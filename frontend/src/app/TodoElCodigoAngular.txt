
<router-outlet></router-outlet>
import { NgModule } from '@angular/core';
import { RouterModule, Routes, CanLoad } from '@angular/router';
import { AuthGuard } from './auth/guards/auth.guard';
import { AdminGuard } from './auth/guards/admin.guard';
import { medicGuard } from './auth/guards/medic.guard';
import { patientGuard } from './auth/guards/patient.guard';

const routes: Routes = [
  {
    path: 'auth',
    loadChildren: () => import('./auth/auth.module').then((m) => m.AuthModule),
  },
  {
    
    path: 'paciente',
    loadChildren: () => import('./pacientes/pacientes.module').then((m) => m.PacientesModule),
    canActivate: [AuthGuard, patientGuard], // Aplica el AuthGuard a esta ruta
   
  },
  {
    path: 'ad',
    loadChildren: () => import('./admin/admin.module').then((m) => m.AdminModule),
    canActivate: [AuthGuard, AdminGuard], // Aplica el AuthGuard a esta ruta
  
  },
  {
    path: 'medicos',
    loadChildren: () => import('./medicos/medicos.module').then((m) => m.MedicosModule),
    canActivate: [AuthGuard, medicGuard], // Aplica el AuthGuard a esta ruta
    
 
  },
  {
    path: '',
    redirectTo: 'auth',
    pathMatch: 'full',
  },
];


@NgModule({
  imports: [RouterModule.forRoot(routes)],

  exports: [RouterModule]
})
export class AppRoutingModule { }
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    imports: [RouterTestingModule],
    declarations: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'citaProyect'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('citaProyect');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('citaProyect app is running!');
  });
});
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'citaProyect';
}
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { SharedModule } from './shared/shared.module';
import { HttpClientModule } from '@angular/common/http';

import { PacientesModule } from './pacientes/pacientes.module';
import { ReactiveFormsModule } from '@angular/forms';

import { MedicosModule } from './medicos/medicos.module';
import { AdminModule } from './admin/admin.module';











@NgModule({
  declarations: [
    AppComponent,
    
   
   
   
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    SharedModule,
    HttpClientModule,
    AdminModule,
    PacientesModule,
    ReactiveFormsModule,
    MedicosModule

  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
/* No CSS *//*# sourceMappingURL=app.component.css.map *//* No CSS *//*# sourceMappingURL=app.component.css.map */{
    "version": 3,
    "mappings": "",
    "sources": [
        "app.component.scss"
    ],
    "names": [],
    "file": "app.component.css"
}
<router-outlet></router-outlet>
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    imports: [RouterTestingModule],
    declarations: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'citaProyect'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('citaProyect');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('citaProyect app is running!');
  });
});
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'citaProyect';
}
import { NgModule } from '@angular/core';
import { RouterModule, Routes, CanLoad } from '@angular/router';
import { AuthGuard } from './auth/guards/auth.guard';
import { AdminGuard } from './auth/guards/admin.guard';
import { medicGuard } from './auth/guards/medic.guard';
import { patientGuard } from './auth/guards/patient.guard';

const routes: Routes = [
  {
    path: 'auth',
    loadChildren: () => import('./auth/auth.module').then((m) => m.AuthModule),
  },
  {
    
    path: 'paciente',
    loadChildren: () => import('./pacientes/pacientes.module').then((m) => m.PacientesModule),
    canActivate: [AuthGuard, patientGuard], // Aplica el AuthGuard a esta ruta
   
  },
  {
    path: 'ad',
    loadChildren: () => import('./admin/admin.module').then((m) => m.AdminModule),
    canActivate: [AuthGuard, AdminGuard], // Aplica el AuthGuard a esta ruta
  
  },
  {
    path: 'medicos',
    loadChildren: () => import('./medicos/medicos.module').then((m) => m.MedicosModule),
    canActivate: [AuthGuard, medicGuard], // Aplica el AuthGuard a esta ruta
    
 
  },
  {
    path: '',
    redirectTo: 'auth',
    pathMatch: 'full',
  },
];


@NgModule({
  imports: [RouterModule.forRoot(routes)],

  exports: [RouterModule]
})
export class AppRoutingModule { }
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { SharedModule } from './shared/shared.module';
import { HttpClientModule } from '@angular/common/http';

import { PacientesModule } from './pacientes/pacientes.module';
import { ReactiveFormsModule } from '@angular/forms';

import { MedicosModule } from './medicos/medicos.module';
import { AdminModule } from './admin/admin.module';











@NgModule({
  declarations: [
    AppComponent,
    
   
   
   
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    SharedModule,
    HttpClientModule,
    AdminModule,
    PacientesModule,
    ReactiveFormsModule,
    MedicosModule

  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { RouterModule, Routes } from '@angular/router';
import { GestionarPacientesComponent } from './pages/gestionar-pacientes/gestionar-pacientes/gestionar-pacientes.component';
import { GestionarCitasMedicasComponent } from './pages/gestionarCitasMedicas/gestionar-citas/gestionar-citas-medicas.component';
import { GestionarTiposCitasComponent } from './pages/gestionarTiposCitas/gestionar-tipos-citas/gestionar-tipos-citas.component';
import { GestionarHorariosMedicosComponent } from './pages/gestionarHorariosMedicos/gestionar-horarios-medicos/gestionar-horarios-medicos.component';
import { AgregarPacienteComponent } from './pages/gestionar-pacientes/agregar-paciente/agregar-paciente.component';
import { AgregarHorarioMedicoComponent } from './pages/gestionarHorariosMedicos/agregar-horario/agregar-horario.component';
import { GestionarMedicosComponent } from './pages/gestionar-medicos/gestiona-medicos/gestionar-medicos.component';
import { AgregarCitaMedicaComponent } from './pages/gestionarCitasMedicas/agregar-cita-medica/agregar-cita-medica.component';
import { AgregarmedicoComponent } from './pages/gestionar-medicos/agregarmedico/agregarmedico.component';
import { AgregarTipoCitaComponent } from './pages/gestionarTiposCitas/agregar-tipo-cita/agregar-tipo-cita.component';

import { AuthGuard } from '../auth/guards/auth.guard';
import { EditarUsuarioComponent } from './pages/gestionar-pacientes/editar-usuario/editar-usuario.component';
import { InicioComponent } from './pages/inicio/inicio.component';
import { InfoClinicaComponent } from './pages/info-clinica/info-clinica.component';
import { AgregarInfoClinicaComponent } from './pages/info-clinica/agregar-info-clinica/agregar-info-clinica.component';
import { AdminGuard } from '../auth/guards/admin.guard';
import { VerFacturasComponent } from './pages/facturas-medicas/ver-facturas/ver-facturas.component';
import { ImprimirFacturaComponent } from './pages/facturas-medicas/imprimir-factura/imprimir-factura.component';


const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent, canActivate: [AuthGuard],
    children: [
      { path: 'info-clinica', component: InfoClinicaComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'factura', component: VerFacturasComponent,canActivate: [AuthGuard,AdminGuard] },

      { path: 'imprimir-factura/:id', component: ImprimirFacturaComponent, canActivate: [AuthGuard,AdminGuard] },

      { path: 'agregar-info-clinica', component: AgregarInfoClinicaComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'inicio-instrucciones', component: InicioComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'gestionar-pacientes', component: GestionarPacientesComponent , canActivate: [AuthGuard,AdminGuard] },
      {
        path: 'agregar-paciente', component: AgregarPacienteComponent, canActivate: [AuthGuard,AdminGuard]  // El componente al que deseas redirigir
      },
      {
        path: 'editar-usuario/:id', 
        component: EditarUsuarioComponent, canActivate: [AuthGuard,AdminGuard]
      },
      {
        path: 'gestionar-medicos', component: GestionarMedicosComponent, canActivate: [AuthGuard,AdminGuard] // El componente al que deseas redirigir
      },
      {
        path: 'agregar-medico',
        component: AgregarmedicoComponent,
        canActivate: [AuthGuard, AdminGuard]
      },
      {
        path: 'editar-medico/:id',
        component: AgregarmedicoComponent,
        canActivate: [AuthGuard, AdminGuard]
      },
      



      


      { path: 'gestionar-cita', component: GestionarCitasMedicasComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'agregar-cita', component: AgregarCitaMedicaComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'gestionar-horarios-medicos', component: GestionarHorariosMedicosComponent, canActivate: [AuthGuard,AdminGuard] },

      { path: 'agregar-horario-medico', component: AgregarHorarioMedicoComponent, canActivate: [AuthGuard, AdminGuard] },
      { path: 'editar-horario/:id', component: AgregarHorarioMedicoComponent, canActivate: [AuthGuard, AdminGuard] },


      { path: 'gestionar-tipo-cita', component: GestionarTiposCitasComponent, canActivate: [AuthGuard, AdminGuard] },
      { path: 'agregar-tipo-cita', component: AgregarTipoCitaComponent, canActivate: [AuthGuard, AdminGuard] },
      { path: 'editar-tipoCita/:id', component: AgregarTipoCitaComponent, canActivate: [AuthGuard, AdminGuard] },

      
    

    
    ]
  }
];

@NgModule({
  imports: [ RouterModule.forChild( routes ) ],
  exports: [RouterModule]
})
export class AdminRoutingModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GestionarHorariosMedicosComponent } from './pages/gestionarHorariosMedicos/gestionar-horarios-medicos/gestionar-horarios-medicos.component';
import { GestionarCitasMedicasComponent } from './pages/gestionarCitasMedicas/gestionar-citas/gestionar-citas-medicas.component';
import { GestionarTiposCitasComponent } from './pages/gestionarTiposCitas/gestionar-tipos-citas/gestionar-tipos-citas.component';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { GestionarPacientesComponent } from './pages/gestionar-pacientes/gestionar-pacientes/gestionar-pacientes.component';
import { AdminRoutingModule } from './admin-routing.module';
import { MaterialModule } from '../material/material.module';
import { SharedModule } from '../shared/shared.module';
import { RouterModule } from '@angular/router';

import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AgregarPacienteComponent } from './pages/gestionar-pacientes/agregar-paciente/agregar-paciente.component';
import { AgregarHorarioMedicoComponent } from './pages/gestionarHorariosMedicos/agregar-horario/agregar-horario.component';
import { AgregarCitaMedicaComponent } from './pages/gestionarCitasMedicas/agregar-cita-medica/agregar-cita-medica.component';
import { GestionarMedicosComponent } from './pages/gestionar-medicos/gestiona-medicos/gestionar-medicos.component';

import { AgregarTipoCitaComponent } from './pages/gestionarTiposCitas/agregar-tipo-cita/agregar-tipo-cita.component';
import { EditarUsuarioComponent } from './pages/gestionar-pacientes/editar-usuario/editar-usuario.component';
import { InicioComponent } from './pages/inicio/inicio.component';
import { InfoClinicaComponent } from './pages/info-clinica/info-clinica.component';
import { AgregarInfoClinicaComponent } from './pages/info-clinica/agregar-info-clinica/agregar-info-clinica.component';
import { VerFacturasComponent } from './pages/facturas-medicas/ver-facturas/ver-facturas.component';
import { ImprimirFacturaComponent } from './pages/facturas-medicas/imprimir-factura/imprimir-factura.component';
import { AgregarmedicoComponent } from './pages/gestionar-medicos/agregarmedico/agregarmedico.component';






@NgModule({
  declarations: [
    GestionarCitasMedicasComponent,
    GestionarHorariosMedicosComponent,
    GestionarPacientesComponent,
    GestionarTiposCitasComponent,
    GestionarHorariosMedicosComponent,
  
    LayoutPageComponent,
 
    GestionarPacientesComponent,
    AgregarPacienteComponent,
    AgregarHorarioMedicoComponent,
    AgregarCitaMedicaComponent,
    GestionarCitasMedicasComponent,
    GestionarMedicosComponent,

    AgregarTipoCitaComponent,

    EditarUsuarioComponent,
    InicioComponent,
    InfoClinicaComponent,
    AgregarInfoClinicaComponent,
    VerFacturasComponent,
    ImprimirFacturaComponent,
    AgregarmedicoComponent,
    

  
   
    
  ],
  imports: [
    CommonModule,
    AdminRoutingModule,
    MaterialModule,
    SharedModule,
    ReactiveFormsModule,
    RouterModule,
    FormsModule

  ]
})
export class AdminModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { RouterModule, Routes } from '@angular/router';
import { GestionarPacientesComponent } from './pages/gestionar-pacientes/gestionar-pacientes/gestionar-pacientes.component';
import { GestionarCitasMedicasComponent } from './pages/gestionarCitasMedicas/gestionar-citas/gestionar-citas-medicas.component';
import { GestionarTiposCitasComponent } from './pages/gestionarTiposCitas/gestionar-tipos-citas/gestionar-tipos-citas.component';
import { GestionarHorariosMedicosComponent } from './pages/gestionarHorariosMedicos/gestionar-horarios-medicos/gestionar-horarios-medicos.component';
import { AgregarPacienteComponent } from './pages/gestionar-pacientes/agregar-paciente/agregar-paciente.component';
import { AgregarHorarioMedicoComponent } from './pages/gestionarHorariosMedicos/agregar-horario/agregar-horario.component';
import { GestionarMedicosComponent } from './pages/gestionar-medicos/gestiona-medicos/gestionar-medicos.component';
import { AgregarCitaMedicaComponent } from './pages/gestionarCitasMedicas/agregar-cita-medica/agregar-cita-medica.component';
import { AgregarmedicoComponent } from './pages/gestionar-medicos/agregarmedico/agregarmedico.component';
import { AgregarTipoCitaComponent } from './pages/gestionarTiposCitas/agregar-tipo-cita/agregar-tipo-cita.component';

import { AuthGuard } from '../auth/guards/auth.guard';
import { EditarUsuarioComponent } from './pages/gestionar-pacientes/editar-usuario/editar-usuario.component';
import { InicioComponent } from './pages/inicio/inicio.component';
import { InfoClinicaComponent } from './pages/info-clinica/info-clinica.component';
import { AgregarInfoClinicaComponent } from './pages/info-clinica/agregar-info-clinica/agregar-info-clinica.component';
import { AdminGuard } from '../auth/guards/admin.guard';
import { VerFacturasComponent } from './pages/facturas-medicas/ver-facturas/ver-facturas.component';
import { ImprimirFacturaComponent } from './pages/facturas-medicas/imprimir-factura/imprimir-factura.component';


const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent, canActivate: [AuthGuard],
    children: [
      { path: 'info-clinica', component: InfoClinicaComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'factura', component: VerFacturasComponent,canActivate: [AuthGuard,AdminGuard] },

      { path: 'imprimir-factura/:id', component: ImprimirFacturaComponent, canActivate: [AuthGuard,AdminGuard] },

      { path: 'agregar-info-clinica', component: AgregarInfoClinicaComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'inicio-instrucciones', component: InicioComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'gestionar-pacientes', component: GestionarPacientesComponent , canActivate: [AuthGuard,AdminGuard] },
      {
        path: 'agregar-paciente', component: AgregarPacienteComponent, canActivate: [AuthGuard,AdminGuard]  // El componente al que deseas redirigir
      },
      {
        path: 'editar-usuario/:id', 
        component: EditarUsuarioComponent, canActivate: [AuthGuard,AdminGuard]
      },
      {
        path: 'gestionar-medicos', component: GestionarMedicosComponent, canActivate: [AuthGuard,AdminGuard] // El componente al que deseas redirigir
      },
      {
        path: 'agregar-medico',
        component: AgregarmedicoComponent,
        canActivate: [AuthGuard, AdminGuard]
      },
      {
        path: 'editar-medico/:id',
        component: AgregarmedicoComponent,
        canActivate: [AuthGuard, AdminGuard]
      },
      



      


      { path: 'gestionar-cita', component: GestionarCitasMedicasComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'agregar-cita', component: AgregarCitaMedicaComponent, canActivate: [AuthGuard,AdminGuard]  },

      { path: 'gestionar-horarios-medicos', component: GestionarHorariosMedicosComponent, canActivate: [AuthGuard,AdminGuard] },

      { path: 'agregar-horario-medico', component: AgregarHorarioMedicoComponent, canActivate: [AuthGuard, AdminGuard] },
      { path: 'editar-horario/:id', component: AgregarHorarioMedicoComponent, canActivate: [AuthGuard, AdminGuard] },


      { path: 'gestionar-tipo-cita', component: GestionarTiposCitasComponent, canActivate: [AuthGuard, AdminGuard] },
      { path: 'agregar-tipo-cita', component: AgregarTipoCitaComponent, canActivate: [AuthGuard, AdminGuard] },
      { path: 'editar-tipoCita/:id', component: AgregarTipoCitaComponent, canActivate: [AuthGuard, AdminGuard] },

      
    

    
    ]
  }
];

@NgModule({
  imports: [ RouterModule.forChild( routes ) ],
  exports: [RouterModule]
})
export class AdminRoutingModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { GestionarHorariosMedicosComponent } from './pages/gestionarHorariosMedicos/gestionar-horarios-medicos/gestionar-horarios-medicos.component';
import { GestionarCitasMedicasComponent } from './pages/gestionarCitasMedicas/gestionar-citas/gestionar-citas-medicas.component';
import { GestionarTiposCitasComponent } from './pages/gestionarTiposCitas/gestionar-tipos-citas/gestionar-tipos-citas.component';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { GestionarPacientesComponent } from './pages/gestionar-pacientes/gestionar-pacientes/gestionar-pacientes.component';
import { AdminRoutingModule } from './admin-routing.module';
import { MaterialModule } from '../material/material.module';
import { SharedModule } from '../shared/shared.module';
import { RouterModule } from '@angular/router';

import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AgregarPacienteComponent } from './pages/gestionar-pacientes/agregar-paciente/agregar-paciente.component';
import { AgregarHorarioMedicoComponent } from './pages/gestionarHorariosMedicos/agregar-horario/agregar-horario.component';
import { AgregarCitaMedicaComponent } from './pages/gestionarCitasMedicas/agregar-cita-medica/agregar-cita-medica.component';
import { GestionarMedicosComponent } from './pages/gestionar-medicos/gestiona-medicos/gestionar-medicos.component';

import { AgregarTipoCitaComponent } from './pages/gestionarTiposCitas/agregar-tipo-cita/agregar-tipo-cita.component';
import { EditarUsuarioComponent } from './pages/gestionar-pacientes/editar-usuario/editar-usuario.component';
import { InicioComponent } from './pages/inicio/inicio.component';
import { InfoClinicaComponent } from './pages/info-clinica/info-clinica.component';
import { AgregarInfoClinicaComponent } from './pages/info-clinica/agregar-info-clinica/agregar-info-clinica.component';
import { VerFacturasComponent } from './pages/facturas-medicas/ver-facturas/ver-facturas.component';
import { ImprimirFacturaComponent } from './pages/facturas-medicas/imprimir-factura/imprimir-factura.component';
import { AgregarmedicoComponent } from './pages/gestionar-medicos/agregarmedico/agregarmedico.component';






@NgModule({
  declarations: [
    GestionarCitasMedicasComponent,
    GestionarHorariosMedicosComponent,
    GestionarPacientesComponent,
    GestionarTiposCitasComponent,
    GestionarHorariosMedicosComponent,
  
    LayoutPageComponent,
 
    GestionarPacientesComponent,
    AgregarPacienteComponent,
    AgregarHorarioMedicoComponent,
    AgregarCitaMedicaComponent,
    GestionarCitasMedicasComponent,
    GestionarMedicosComponent,

    AgregarTipoCitaComponent,

    EditarUsuarioComponent,
    InicioComponent,
    InfoClinicaComponent,
    AgregarInfoClinicaComponent,
    VerFacturasComponent,
    ImprimirFacturaComponent,
    AgregarmedicoComponent,
    

  
   
    
  ],
  imports: [
    CommonModule,
    AdminRoutingModule,
    MaterialModule,
    SharedModule,
    ReactiveFormsModule,
    RouterModule,
    FormsModule

  ]
})
export class AdminModule { }
<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            Detalles de la Factura
        </div>
        <div class="card-body">
            <h5 class="card-title">Factura Nº {{ factura?.idFactura }}</h5>
            <p class="card-text"><strong>Fecha de Pago:</strong> {{ factura?.fecha_pago | date }}</p>
            <p class="card-text"><strong>Método de Pago:</strong> {{ factura?.paymentMethodId }}</p>
            <p class="card-text"><strong>Monto Pagado:</strong> ${{ factura?.montoPagado | number }}</p>
            <p class="card-text"><strong>Paciente:</strong> {{ factura?.nombrePaciente }} {{ factura?.apellidosPaciente }}</p>
            <p class="card-text"><strong>RUT del Paciente:</strong> {{ factura?.rutPaciente }}</p>
            <p class="card-text"><strong>Médico:</strong> {{ factura?.nombreMedico }} {{ factura?.apellidosMedico }}</p>
            <p class="card-text"><strong>RUT del Médico:</strong> {{ factura?.rutMedico }}</p>
            <p class="card-text"><strong>Motivo de la Cita:</strong> {{ factura?.motivoCita }}</p>
   
        </div>
    </div>
    <div class="mt-4">
        <button class="btn btn-primary" onclick="window.print();">Imprimir Factura</button>
    </div>
</div>
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FacturaService } from '../../services/factura.service';

@Component({
  selector: 'app-imprimir-factura',
  templateUrl: './imprimir-factura.component.html',
  styleUrls: ['./imprimir-factura.component.scss']
})
export class ImprimirFacturaComponent {
  factura: any = {};

  constructor(
      private facturaService: FacturaService,
      private route: ActivatedRoute
  ) { }

  ngOnInit(): void {
    const idFactura = this.route.snapshot.paramMap.get('id');

    if (idFactura) {
        this.cargarFactura(idFactura);
    } else {
        console.error('No se proporcionó un ID de factura válido.');
 
    }
}

cargarFactura(id: string) {
  // Llamada al servicio para obtener los detalles de la factura
  this.facturaService.obtenerFacturaPorId(id)
  .subscribe((response:any) => {
      if (response.ok && response.factura) {
        console.log('aqui esta la respuesta completa',response)
          this.factura = response.factura;
          console.log('Factura cargada:', this.factura);
      } else {
          console.error('La factura no se encontró o la respuesta no es válida.');
          // Manejar el caso en que la factura no se encuentra o la respuesta no es como se espera
      }
  }, error => {
      console.error('Error al cargar la factura:', error);
  });
}

}
<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            Detalles de la Factura
        </div>
        <div class="card-body">
            <h5 class="card-title">Factura Nº {{ factura?.idFactura }}</h5>
            <p class="card-text"><strong>Fecha de Pago:</strong> {{ factura?.fecha_pago | date }}</p>
            <p class="card-text"><strong>Método de Pago:</strong> {{ factura?.paymentMethodId }}</p>
            <p class="card-text"><strong>Monto Pagado:</strong> ${{ factura?.montoPagado | number }}</p>
            <p class="card-text"><strong>Paciente:</strong> {{ factura?.nombrePaciente }} {{ factura?.apellidosPaciente }}</p>
            <p class="card-text"><strong>RUT del Paciente:</strong> {{ factura?.rutPaciente }}</p>
            <p class="card-text"><strong>Médico:</strong> {{ factura?.nombreMedico }} {{ factura?.apellidosMedico }}</p>
            <p class="card-text"><strong>RUT del Médico:</strong> {{ factura?.rutMedico }}</p>
            <p class="card-text"><strong>Motivo de la Cita:</strong> {{ factura?.motivoCita }}</p>
   
        </div>
    </div>
    <div class="mt-4">
        <button class="btn btn-primary" onclick="window.print();">Imprimir Factura</button>
    </div>
</div>
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FacturaService } from '../../services/factura.service';

@Component({
  selector: 'app-imprimir-factura',
  templateUrl: './imprimir-factura.component.html',
  styleUrls: ['./imprimir-factura.component.scss']
})
export class ImprimirFacturaComponent {
  factura: any = {};

  constructor(
      private facturaService: FacturaService,
      private route: ActivatedRoute
  ) { }

  ngOnInit(): void {
    const idFactura = this.route.snapshot.paramMap.get('id');

    if (idFactura) {
        this.cargarFactura(idFactura);
    } else {
        console.error('No se proporcionó un ID de factura válido.');
 
    }
}

cargarFactura(id: string) {
  // Llamada al servicio para obtener los detalles de la factura
  this.facturaService.obtenerFacturaPorId(id)
  .subscribe((response:any) => {
      if (response.ok && response.factura) {
        console.log('aqui esta la respuesta completa',response)
          this.factura = response.factura;
          console.log('Factura cargada:', this.factura);
      } else {
          console.error('La factura no se encontró o la respuesta no es válida.');
          // Manejar el caso en que la factura no se encuentra o la respuesta no es como se espera
      }
  }, error => {
      console.error('Error al cargar la factura:', error);
  });
}

}


<div class="row animated fadeIn fast"
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">


              <p style="font-weight: bold; color: #3336ff;">Busca facturas por nombre paciente</p>
                <input type="text"
                        class="form-control"
                        placeholder="Buscar facturas..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )">

            </div>
        </div>
    </div>
</div> 




<div class="row" 
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">      
                
                <div class="row">
                    <div class="col-8">
                        <h4 class="card-title">total de facturas </h4>
                        <h6 class="card-subtitle">
                            facturas registrados en mi aplicación
                        </h6>
                    </div>
                  
              

                </div>

                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
                          <th style="width: 3%;">ID</th>
                          <th style="width: 8%;">Rut paciente</th>
                          <th style="width: 13%;">Nombre paciente</th>
                          <th style="width: 12%;">Motivo cita</th>
                          <th style="width: 15%;">Nombre medico</th>
                          <th style="width: 8%;">Método pago</th>
                          <th style="width: 8%;">Monto</th>
                          <th style="width: 8%;">Fecha pago</th>
                          <th style="width: 5%;">Accion</th>
                        </tr>
                      </thead>
                      
                      <tbody>
                        <tr *ngFor="let factura of facturas">
                          <td>{{ factura.id_factura }}</td>
                          <td>{{ factura.citaMedica.paciente.rut }}</td>
                          <td>{{ factura.citaMedica.paciente.nombre }} {{ factura.citaMedica.paciente.apellidos }}</td>
                          <td>{{ factura.citaMedica.motivo }}</td>
                          <td>{{ factura.citaMedica.medico.nombre }} {{ factura.citaMedica.medico.apellidos }}</td>
                          <td>{{ factura.payment_method_id }}</td>
                          <td>{{ factura.monto_pagado | currency }}</td>
                          <td>{{ factura.fecha_pago }}</td>
                         
                     

<td>
  <div style="display: flex; align-items: center; justify-content: center;">
      <!-- Icono de Eliminar -->
      <div class="icon-container icon-delete" style="margin-right: 10px;">
        <a class="cursor"
        data-toggle="tooltip" 
        data-original-title="Borrar"
        (click)="borrarFactura( factura.id_factura )"> 
        <i class="fa fa-close text-danger"></i> 
      </a>
      </div>
     
<div class="icon-container icon-print">
    <a class="cursor" data-toggle="tooltip" data-original-title="Imprimir" 
       [routerLink]="['/imprimir-factura', factura.id_factura]">
        <i class="fa fa-print"></i> 
    </a>
</div>
  </div>
</td>



              
              
              
                      </tr>
                    </tbody>
                  </table>
                </div>
                
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                  <app-paginator 
                  [totalItems]="totalFacturas" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
            </div>
        </div>
    </div>

</div>

import { Component, OnInit } from '@angular/core';
import { FacturaService } from '../../services/factura.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';
import { Factura } from '../../../../pacientes/pages/interfaces/payment';

@Component({
  selector: 'app-ver-facturas',
  templateUrl: './ver-facturas.component.html',
  styleUrls: ['./ver-facturas.component.scss']
})
export class VerFacturasComponent implements OnInit {

  facturas: any[] = []; // Arreglo para almacenar las facturas
  public desde: number = 0;
  public totalFacturas: number = 0; 

  constructor(private FacturaService: FacturaService, private router: Router, private BusquedasService: BusquedasService) { } // Inyecta tu servicio aquí

  ngOnInit(): void {
    this.cargarFacturas();
   
  }

  cargarFacturas() {
    this.FacturaService.cargarAllFactura(this.desde)
    .subscribe((data: any) => {
      this.totalFacturas = data.total;
      this.facturas = data.facturas;
  
    }, error => {
      console.error('Error al cargar las facturas:', error);
    });
  }

  cambiarPagina(nuevoOffset: number) {
    this.desde = nuevoOffset;

    if( this.desde < 0){ 
      this.desde = 0;
    } else if( this.desde >= this.totalFacturas ){ 
      this.desde -= nuevoOffset;
    }
    this.cargarFacturas(); 
  }


  borrarFactura( factura: number ) {

    Swal.fire({
      title: '¿Borrar factura?',
      text: `Esta seguro que desea eliminar la factura ${ factura } primero asegurese de haber imprimido la factura o de contar con algun otro tipo de respaldo`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.FacturaService.borrarFactura( factura )
          .subscribe( resp => {
            
          
            Swal.fire(
              'Factura borrado',
              `${ factura } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

  }

  buscar(termino: string): void {
    console.log('aqui esta el termino',termino);
    if (termino.length === 0) {
      return this.cargarFacturas(); 
    }

    this.BusquedasService.buscar('facturas', termino)
      .subscribe((resp: any) => { 
        console.log('aqui esta la respuesta',resp);
      
        this.facturas = resp.citas
        console.log('aqui esta la factura',this.facturas);
 
      });
  }

}
.cursor {
    cursor: pointer;
}


table {
    width: 100%;
    table-layout: fixed;
  }
  

  table th,
  table td {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  

<div class="row animated fadeIn fast"
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">


              <p style="font-weight: bold; color: #3336ff;">Busca facturas por nombre paciente</p>
                <input type="text"
                        class="form-control"
                        placeholder="Buscar facturas..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )">

            </div>
        </div>
    </div>
</div> 




<div class="row" 
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">      
                
                <div class="row">
                    <div class="col-8">
                        <h4 class="card-title">total de facturas </h4>
                        <h6 class="card-subtitle">
                            facturas registrados en mi aplicación
                        </h6>
                    </div>
                  
              

                </div>

                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
                          <th style="width: 3%;">ID</th>
                          <th style="width: 8%;">Rut paciente</th>
                          <th style="width: 13%;">Nombre paciente</th>
                          <th style="width: 12%;">Motivo cita</th>
                          <th style="width: 15%;">Nombre medico</th>
                          <th style="width: 8%;">Método pago</th>
                          <th style="width: 8%;">Monto</th>
                          <th style="width: 8%;">Fecha pago</th>
                          <th style="width: 5%;">Accion</th>
                        </tr>
                      </thead>
                      
                      <tbody>
                        <tr *ngFor="let factura of facturas">
                          <td>{{ factura.id_factura }}</td>
                          <td>{{ factura.citaMedica.paciente.rut }}</td>
                          <td>{{ factura.citaMedica.paciente.nombre }} {{ factura.citaMedica.paciente.apellidos }}</td>
                          <td>{{ factura.citaMedica.motivo }}</td>
                          <td>{{ factura.citaMedica.medico.nombre }} {{ factura.citaMedica.medico.apellidos }}</td>
                          <td>{{ factura.payment_method_id }}</td>
                          <td>{{ factura.monto_pagado | currency }}</td>
                          <td>{{ factura.fecha_pago }}</td>
                         
                     

<td>
  <div style="display: flex; align-items: center; justify-content: center;">
      <!-- Icono de Eliminar -->
      <div class="icon-container icon-delete" style="margin-right: 10px;">
        <a class="cursor"
        data-toggle="tooltip" 
        data-original-title="Borrar"
        (click)="borrarFactura( factura.id_factura )"> 
        <i class="fa fa-close text-danger"></i> 
      </a>
      </div>
     
<div class="icon-container icon-print">
    <a class="cursor" data-toggle="tooltip" data-original-title="Imprimir" 
       [routerLink]="['/imprimir-factura', factura.id_factura]">
        <i class="fa fa-print"></i> 
    </a>
</div>
  </div>
</td>



              
              
              
                      </tr>
                    </tbody>
                  </table>
                </div>
                
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                  <app-paginator 
                  [totalItems]="totalFacturas" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
            </div>
        </div>
    </div>

</div>

.cursor {
    cursor: pointer;
}


table {
    width: 100%;
    table-layout: fixed;
  }
  

  table th,
  table td {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  import { Component, OnInit } from '@angular/core';
import { FacturaService } from '../../services/factura.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';
import { Factura } from '../../../../pacientes/pages/interfaces/payment';

@Component({
  selector: 'app-ver-facturas',
  templateUrl: './ver-facturas.component.html',
  styleUrls: ['./ver-facturas.component.scss']
})
export class VerFacturasComponent implements OnInit {

  facturas: any[] = []; // Arreglo para almacenar las facturas
  public desde: number = 0;
  public totalFacturas: number = 0; 

  constructor(private FacturaService: FacturaService, private router: Router, private BusquedasService: BusquedasService) { } // Inyecta tu servicio aquí

  ngOnInit(): void {
    this.cargarFacturas();
   
  }

  cargarFacturas() {
    this.FacturaService.cargarAllFactura(this.desde)
    .subscribe((data: any) => {
      this.totalFacturas = data.total;
      this.facturas = data.facturas;
  
    }, error => {
      console.error('Error al cargar las facturas:', error);
    });
  }

  cambiarPagina(nuevoOffset: number) {
    this.desde = nuevoOffset;

    if( this.desde < 0){ 
      this.desde = 0;
    } else if( this.desde >= this.totalFacturas ){ 
      this.desde -= nuevoOffset;
    }
    this.cargarFacturas(); 
  }


  borrarFactura( factura: number ) {

    Swal.fire({
      title: '¿Borrar factura?',
      text: `Esta seguro que desea eliminar la factura ${ factura } primero asegurese de haber imprimido la factura o de contar con algun otro tipo de respaldo`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.FacturaService.borrarFactura( factura )
          .subscribe( resp => {
            
          
            Swal.fire(
              'Factura borrado',
              `${ factura } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

  }

  buscar(termino: string): void {
    console.log('aqui esta el termino',termino);
    if (termino.length === 0) {
      return this.cargarFacturas(); 
    }

    this.BusquedasService.buscar('facturas', termino)
      .subscribe((resp: any) => { 
        console.log('aqui esta la respuesta',resp);
      
        this.facturas = resp.citas
        console.log('aqui esta la factura',this.facturas);
 
      });
  }

}
<!-- HTML del formulario de médicos mejorado -->
<div class="container-fluid py-4">
  <div class="card shadow-sm border-0">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">{{ isEditMode ? 'Editar Médico' : 'Registro de Médicos' }}</h5>
    </div>
    <div class="card-body p-4">
      <form [formGroup]="formulario" (ngSubmit)="onSubmit()">
        <div class="row">
          <!-- Campo RUT -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="rut" class="form-label fw-bold">RUT</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-id-card"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="rut" formControlName="rut" placeholder="Ej: 12345678-9">
            </div>
            <div *ngIf="formulario.controls['rut'].touched && formulario.controls['rut'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
            <div *ngIf="formulario.controls['rut'].errors?.['rutInvalid']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>RUT no válido.
            </div>
          </div>
          
          <!-- Campo Nombre -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="nombre" class="form-label fw-bold">Nombre</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-user"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="nombre" formControlName="nombre" placeholder="Ingrese nombre">
            </div>
            <div *ngIf="formulario.controls['nombre'].touched && formulario.controls['nombre'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
          </div>
          
          <!-- Campo Apellidos -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="apellidos" class="form-label fw-bold">Apellidos</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-user"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="apellidos" formControlName="apellidos" placeholder="Ingrese apellidos">
            </div>
            <div *ngIf="formulario.controls['apellidos'].touched && formulario.controls['apellidos'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
          </div>
          
          <!-- Campo Email -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="email" class="form-label fw-bold">Email</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-envelope"></i>
              </span>
              <input type="email" class="form-control form-control-lg" id="email" formControlName="email" placeholder="ejemplo@gmail.com">
            </div>
            <div *ngIf="formulario.get('email')?.hasError('required') && formulario.get('email')?.touched" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>El email es requerido.
            </div>
            <div *ngIf="formulario.get('email')?.hasError('email') && formulario.get('email')?.touched" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>El email no es válido.
            </div>
            <div *ngIf="formulario.get('email')?.hasError('notGmail') && formulario.get('email')?.touched" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Solo se permiten direcciones de email de Gmail.
            </div>
          </div>
          
          <!-- Campo Teléfono -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="telefono" class="form-label fw-bold">Teléfono</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-phone"></i>
              </span>
              <input type="tel" class="form-control form-control-lg" id="telefono" formControlName="telefono" placeholder="+56 9 XXXX-XXXX">
            </div>
            <div *ngIf="formulario.controls['telefono'].touched && formulario.controls['telefono'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
            <div *ngIf="formulario.controls['telefono'].touched && formulario.controls['telefono'].errors?.['telefonoInvalido']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Formato de teléfono inválido. Debe ser +56 9 XXXX-XXXX.
            </div>
          </div>
          
          <!-- Campo Dirección -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="direccion" class="form-label fw-bold">Dirección</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-map-marker-alt"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="direccion" formControlName="direccion" placeholder="Ingrese dirección">
            </div>
            <div *ngIf="formulario.controls['direccion'].touched && formulario.controls['direccion'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
            <div *ngIf="formulario.controls['direccion'].touched && formulario.controls['direccion'].errors?.['maxlength']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La dirección no puede exceder los 66 caracteres.
            </div>
          </div>
          
          <!-- Campo Nacionalidad -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="nacionalidad" class="form-label fw-bold">Nacionalidad</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-globe"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="nacionalidad" formControlName="nacionalidad" placeholder="Ingrese nacionalidad">
            </div>
            <div *ngIf="formulario.controls['nacionalidad'].touched && formulario.controls['nacionalidad'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
          </div>
          
          <!-- Campo Contraseña: solo se muestra en modo agregar -->
          <div class="form-group col-12 col-md-6 mb-4" *ngIf="!isEditMode">
            <label for="password" class="form-label fw-bold">Contraseña</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-lock"></i>
              </span>
              <input type="password" class="form-control form-control-lg" id="password" formControlName="password" placeholder="Ingrese contraseña">
            </div>
            <div *ngIf="formulario.controls['password'].touched && formulario.controls['password'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
            <div *ngIf="formulario.controls['password'].errors?.['passwordStrength']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La contraseña debe incluir mayúsculas, números y caracteres especiales.
            </div>
          </div>
          
          <!-- Campo Especialidad -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="especialidad_medica" class="form-label fw-bold">Especialidad</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-stethoscope"></i>
              </span>
              <select class="form-control form-control-lg" id="especialidad_medica" formControlName="especialidad_medica">
                <option value="" disabled selected>Seleccione especialidad</option>
                <option *ngFor="let especialidad of especialidades" [value]="especialidad">
                  {{ especialidad }}
                </option>
              </select>
            </div>
            <div *ngIf="formulario.controls['especialidad_medica'].touched && formulario.controls['especialidad_medica'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La selección de la especialidad es obligatoria.
            </div>
          </div>
        </div>
        
        <!-- Botones de acción -->
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
          <button type="button" class="btn btn-outline-secondary me-md-2" routerLink="/gestionar-medicos">
            <i class="fas fa-times me-1"></i>Cancelar
          </button>
          <button type="submit" class="btn btn-primary" [disabled]="!formulario.valid">
            <i class="fas fa-save me-1"></i>{{ isEditMode ? 'Guardar Cambios' : 'Registrar Médico' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</div>import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import Swal from 'sweetalert2';
import { MedicoService } from '../../services/medico.service';
import { TipoCitaService } from '../../services/tipo-cita.service';
import { rutValidator } from 'src/app/shared/Validators/rut-validator';
import { phoneValidator } from 'src/app/shared/Validators/phone-validator';
import { passwordStrengthValidator } from 'src/app/shared/Validators/password-strength-validator';

@Component({
  selector: 'app-agregarmedico',
  templateUrl: './agregarmedico.component.html',
  styleUrls: ['./agregarmedico.component.scss']
})

export class AgregarmedicoComponent implements OnInit {
  formulario: FormGroup;
  isEditMode: boolean = false;
  medicoId: string | null = null;
  especialidades: string[] = [];

  constructor(
    private formBuilder: FormBuilder,
    private medicoService: MedicoService,
    private tipoCitaService: TipoCitaService,
    private route: ActivatedRoute,
    private router: Router
  ) {
    // Construir el formulario con sus validaciones compartidas
    this.formulario = this.formBuilder.group({
      rut: ['', [Validators.required, rutValidator()]],
      nombre: ['', Validators.required],
      apellidos: ['', Validators.required],
      email: ['', [Validators.required, Validators.email, this.gmailValidator]],
      telefono: ['', [Validators.required, phoneValidator()]],
      direccion: ['', [Validators.required, Validators.maxLength(66)]],
      nacionalidad: ['', Validators.required],
      // Se incluirá la contraseña solo en modo agregar; en edición se puede omitir o hacer opcional
      password: ['', [Validators.required, passwordStrengthValidator()]],
      especialidad_medica: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    // Llamar a cargar las especialidades
    this.cargaEspecialidades();
  
    // Obtener el parámetro 'id' de la ruta para determinar si es modo edición
    this.medicoId = this.route.snapshot.paramMap.get('id');
    if (this.medicoId) {
      this.isEditMode = true;
      // Llama al servicio para obtener los datos del médico y rellena el formulario
      this.medicoService.obtenerMedicoPorId(this.medicoId).subscribe(
        (response: any) => {
          const medico = response.medico;
          this.formulario.patchValue({
            rut: medico.rut,
            nombre: medico.nombre,
            apellidos: medico.apellidos,
            email: medico.email,
            telefono: medico.telefono,
            direccion: medico.direccion,
            nacionalidad: medico.nacionalidad,
            especialidad_medica: medico.especialidad_medica
          });
        },
        error => {
          console.error("Error al cargar el médico:", error);
        }
      );
    } else {
      this.isEditMode = false;
    }
  }
  
  

  // Validador personalizado para que el email termine en @gmail.com
  gmailValidator(control: AbstractControl): ValidationErrors | null {
    const value = control.value;
    if (!value) return null;
    return value.endsWith('@gmail.com') ? null : { notGmail: true };
  }

  cargaEspecialidades(): void {
    this.tipoCitaService.cargaEspecialidades().subscribe(
      data => {
        // Suponiendo que data.especialidades es un arreglo de objetos con la propiedad especialidad_medica
        this.especialidades = data.especialidades.map((e: { especialidad_medica: string }) => e.especialidad_medica);
      },
      error => {
        console.error("Error al cargar especialidades:", error);
      }
    );
  }

  onSubmit(): void {
    console.log("aholaaa");
    if (this.formulario.invalid) {
      console.log("Hola",this.formulario.invalid);
      this.formulario.markAllAsTouched();

    }
    
    const formData = this.formulario.value;
    console.log("aqui esta la data", formData);
    if (this.isEditMode) {
      // En modo edición se llama al servicio de edición
      this.medicoService.editarMedico(formData).subscribe(
        response => {
          console.log("medico ",response);
          Swal.fire('Éxito', 'Médico editado exitosamente', 'success');
          this.router.navigateByUrl('/gestionar-medicos');
        },
        error => {
          Swal.fire('Error', 'Hubo un error al editar el médico', 'error');
        }
      );
    } else {
      // En modo agregar se crea un nuevo médico
      this.medicoService.crearMedico(formData).subscribe(
        (response: any) => {
          Swal.fire('Mensaje', response.msg, 'success');
          this.router.navigateByUrl('/gestionar-medicos');
        },
        error => {
          Swal.fire('Error', error.error.msg, 'error');
        }
      );
    }
  }
}
/* Estilos para mejorar el formulario de médicos */
.card {
    border-radius: 10px;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1) !important;
  }
  
  .card-header {
    border-bottom: none;
    padding: 1.2rem 1.5rem;
  }
  
  .form-control, .input-group-text {
    border-radius: 5px;
    transition: all 0.2s;
  }
  
  .form-control:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    border-color: #0d6efd;
  }
  
  .input-group-text {
    border: 1px solid #ced4da;
    min-width: 45px;
    display: flex;
    justify-content: center;
  }
  
  .form-label {
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
  }
  
  .text-danger {
    font-size: 0.85rem;
    animation: fadeIn 0.3s;
  }
  
  .btn {
    border-radius: 5px;
    padding: 0.6rem 1.5rem;
    font-weight: 500;
    transition: all 0.3s;
  }
  
  .btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
  }
  
  .btn-primary:hover {
    background-color: #0b5ed7;
    border-color: #0a58ca;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(13, 110, 253, 0.25);
  }
  
  .btn-primary:disabled {
    background-color: #0d6efd;
    border-color: #0d6efd;
    opacity: 0.65;
  }
  
  .btn-outline-secondary:hover {
    transform: translateY(-2px);
  }
  
  /* Animación para errores de validación */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Estilo específico para el selector */
  select.form-control {
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 8px 10px;
    padding-right: 2rem;
  }
  
  /* Estilo para los campos cuando son válidos */
  .form-control.ng-valid.ng-touched {
    border-color: #28a745;
  }
  
  /* Estilo para campos requeridos */
  .form-label.required::after {
    content: "*";
    color: #dc3545;
    margin-left: 4px;
  }<!-- HTML del formulario de médicos mejorado -->
<div class="container-fluid py-4">
  <div class="card shadow-sm border-0">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">{{ isEditMode ? 'Editar Médico' : 'Registro de Médicos' }}</h5>
    </div>
    <div class="card-body p-4">
      <form [formGroup]="formulario" (ngSubmit)="onSubmit()">
        <div class="row">
          <!-- Campo RUT -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="rut" class="form-label fw-bold">RUT</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-id-card"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="rut" formControlName="rut" placeholder="Ej: 12345678-9">
            </div>
            <div *ngIf="formulario.controls['rut'].touched && formulario.controls['rut'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
            <div *ngIf="formulario.controls['rut'].errors?.['rutInvalid']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>RUT no válido.
            </div>
          </div>
          
          <!-- Campo Nombre -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="nombre" class="form-label fw-bold">Nombre</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-user"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="nombre" formControlName="nombre" placeholder="Ingrese nombre">
            </div>
            <div *ngIf="formulario.controls['nombre'].touched && formulario.controls['nombre'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
          </div>
          
          <!-- Campo Apellidos -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="apellidos" class="form-label fw-bold">Apellidos</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-user"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="apellidos" formControlName="apellidos" placeholder="Ingrese apellidos">
            </div>
            <div *ngIf="formulario.controls['apellidos'].touched && formulario.controls['apellidos'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
          </div>
          
          <!-- Campo Email -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="email" class="form-label fw-bold">Email</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-envelope"></i>
              </span>
              <input type="email" class="form-control form-control-lg" id="email" formControlName="email" placeholder="ejemplo@gmail.com">
            </div>
            <div *ngIf="formulario.get('email')?.hasError('required') && formulario.get('email')?.touched" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>El email es requerido.
            </div>
            <div *ngIf="formulario.get('email')?.hasError('email') && formulario.get('email')?.touched" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>El email no es válido.
            </div>
            <div *ngIf="formulario.get('email')?.hasError('notGmail') && formulario.get('email')?.touched" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Solo se permiten direcciones de email de Gmail.
            </div>
          </div>
          
          <!-- Campo Teléfono -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="telefono" class="form-label fw-bold">Teléfono</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-phone"></i>
              </span>
              <input type="tel" class="form-control form-control-lg" id="telefono" formControlName="telefono" placeholder="+56 9 XXXX-XXXX">
            </div>
            <div *ngIf="formulario.controls['telefono'].touched && formulario.controls['telefono'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
            <div *ngIf="formulario.controls['telefono'].touched && formulario.controls['telefono'].errors?.['telefonoInvalido']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Formato de teléfono inválido. Debe ser +56 9 XXXX-XXXX.
            </div>
          </div>
          
          <!-- Campo Dirección -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="direccion" class="form-label fw-bold">Dirección</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-map-marker-alt"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="direccion" formControlName="direccion" placeholder="Ingrese dirección">
            </div>
            <div *ngIf="formulario.controls['direccion'].touched && formulario.controls['direccion'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
            <div *ngIf="formulario.controls['direccion'].touched && formulario.controls['direccion'].errors?.['maxlength']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La dirección no puede exceder los 66 caracteres.
            </div>
          </div>
          
          <!-- Campo Nacionalidad -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="nacionalidad" class="form-label fw-bold">Nacionalidad</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-globe"></i>
              </span>
              <input type="text" class="form-control form-control-lg" id="nacionalidad" formControlName="nacionalidad" placeholder="Ingrese nacionalidad">
            </div>
            <div *ngIf="formulario.controls['nacionalidad'].touched && formulario.controls['nacionalidad'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
          </div>
          
          <!-- Campo Contraseña: solo se muestra en modo agregar -->
          <div class="form-group col-12 col-md-6 mb-4" *ngIf="!isEditMode">
            <label for="password" class="form-label fw-bold">Contraseña</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-lock"></i>
              </span>
              <input type="password" class="form-control form-control-lg" id="password" formControlName="password" placeholder="Ingrese contraseña">
            </div>
            <div *ngIf="formulario.controls['password'].touched && formulario.controls['password'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Este campo es obligatorio.
            </div>
            <div *ngIf="formulario.controls['password'].errors?.['passwordStrength']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La contraseña debe incluir mayúsculas, números y caracteres especiales.
            </div>
          </div>
          
          <!-- Campo Especialidad -->
          <div class="form-group col-12 col-md-6 mb-4">
            <label for="especialidad_medica" class="form-label fw-bold">Especialidad</label>
            <div class="input-group">
              <span class="input-group-text bg-light">
                <i class="fas fa-stethoscope"></i>
              </span>
              <select class="form-control form-control-lg" id="especialidad_medica" formControlName="especialidad_medica">
                <option value="" disabled selected>Seleccione especialidad</option>
                <option *ngFor="let especialidad of especialidades" [value]="especialidad">
                  {{ especialidad }}
                </option>
              </select>
            </div>
            <div *ngIf="formulario.controls['especialidad_medica'].touched && formulario.controls['especialidad_medica'].errors?.['required']" class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La selección de la especialidad es obligatoria.
            </div>
          </div>
        </div>
        
        <!-- Botones de acción -->
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
          <button type="button" class="btn btn-outline-secondary me-md-2" routerLink="/gestionar-medicos">
            <i class="fas fa-times me-1"></i>Cancelar
          </button>
          <button type="submit" class="btn btn-primary" [disabled]="!formulario.valid">
            <i class="fas fa-save me-1"></i>{{ isEditMode ? 'Guardar Cambios' : 'Registrar Médico' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</div>/* Estilos para mejorar el formulario de médicos */
.card {
    border-radius: 10px;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1) !important;
  }
  
  .card-header {
    border-bottom: none;
    padding: 1.2rem 1.5rem;
  }
  
  .form-control, .input-group-text {
    border-radius: 5px;
    transition: all 0.2s;
  }
  
  .form-control:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    border-color: #0d6efd;
  }
  
  .input-group-text {
    border: 1px solid #ced4da;
    min-width: 45px;
    display: flex;
    justify-content: center;
  }
  
  .form-label {
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
  }
  
  .text-danger {
    font-size: 0.85rem;
    animation: fadeIn 0.3s;
  }
  
  .btn {
    border-radius: 5px;
    padding: 0.6rem 1.5rem;
    font-weight: 500;
    transition: all 0.3s;
  }
  
  .btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
  }
  
  .btn-primary:hover {
    background-color: #0b5ed7;
    border-color: #0a58ca;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(13, 110, 253, 0.25);
  }
  
  .btn-primary:disabled {
    background-color: #0d6efd;
    border-color: #0d6efd;
    opacity: 0.65;
  }
  
  .btn-outline-secondary:hover {
    transform: translateY(-2px);
  }
  
  /* Animación para errores de validación */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Estilo específico para el selector */
  select.form-control {
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3E%3Cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 8px 10px;
    padding-right: 2rem;
  }
  
  /* Estilo para los campos cuando son válidos */
  .form-control.ng-valid.ng-touched {
    border-color: #28a745;
  }
  
  /* Estilo para campos requeridos */
  .form-label.required::after {
    content: "*";
    color: #dc3545;
    margin-left: 4px;
  }import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import Swal from 'sweetalert2';
import { MedicoService } from '../../services/medico.service';
import { TipoCitaService } from '../../services/tipo-cita.service';
import { rutValidator } from 'src/app/shared/Validators/rut-validator';
import { phoneValidator } from 'src/app/shared/Validators/phone-validator';
import { passwordStrengthValidator } from 'src/app/shared/Validators/password-strength-validator';

@Component({
  selector: 'app-agregarmedico',
  templateUrl: './agregarmedico.component.html',
  styleUrls: ['./agregarmedico.component.scss']
})

export class AgregarmedicoComponent implements OnInit {
  formulario: FormGroup;
  isEditMode: boolean = false;
  medicoId: string | null = null;
  especialidades: string[] = [];

  constructor(
    private formBuilder: FormBuilder,
    private medicoService: MedicoService,
    private tipoCitaService: TipoCitaService,
    private route: ActivatedRoute,
    private router: Router
  ) {
    // Construir el formulario con sus validaciones compartidas
    this.formulario = this.formBuilder.group({
      rut: ['', [Validators.required, rutValidator()]],
      nombre: ['', Validators.required],
      apellidos: ['', Validators.required],
      email: ['', [Validators.required, Validators.email, this.gmailValidator]],
      telefono: ['', [Validators.required, phoneValidator()]],
      direccion: ['', [Validators.required, Validators.maxLength(66)]],
      nacionalidad: ['', Validators.required],
      // Se incluirá la contraseña solo en modo agregar; en edición se puede omitir o hacer opcional
      password: ['', [Validators.required, passwordStrengthValidator()]],
      especialidad_medica: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    // Llamar a cargar las especialidades
    this.cargaEspecialidades();
  
    // Obtener el parámetro 'id' de la ruta para determinar si es modo edición
    this.medicoId = this.route.snapshot.paramMap.get('id');
    if (this.medicoId) {
      this.isEditMode = true;
      // Llama al servicio para obtener los datos del médico y rellena el formulario
      this.medicoService.obtenerMedicoPorId(this.medicoId).subscribe(
        (response: any) => {
          const medico = response.medico;
          this.formulario.patchValue({
            rut: medico.rut,
            nombre: medico.nombre,
            apellidos: medico.apellidos,
            email: medico.email,
            telefono: medico.telefono,
            direccion: medico.direccion,
            nacionalidad: medico.nacionalidad,
            especialidad_medica: medico.especialidad_medica
          });
        },
        error => {
          console.error("Error al cargar el médico:", error);
        }
      );
    } else {
      this.isEditMode = false;
    }
  }
  
  

  // Validador personalizado para que el email termine en @gmail.com
  gmailValidator(control: AbstractControl): ValidationErrors | null {
    const value = control.value;
    if (!value) return null;
    return value.endsWith('@gmail.com') ? null : { notGmail: true };
  }

  cargaEspecialidades(): void {
    this.tipoCitaService.cargaEspecialidades().subscribe(
      data => {
        // Suponiendo que data.especialidades es un arreglo de objetos con la propiedad especialidad_medica
        this.especialidades = data.especialidades.map((e: { especialidad_medica: string }) => e.especialidad_medica);
      },
      error => {
        console.error("Error al cargar especialidades:", error);
      }
    );
  }

  onSubmit(): void {
    console.log("aholaaa");
    if (this.formulario.invalid) {
      console.log("Hola",this.formulario.invalid);
      this.formulario.markAllAsTouched();

    }
    
    const formData = this.formulario.value;
    console.log("aqui esta la data", formData);
    if (this.isEditMode) {
      // En modo edición se llama al servicio de edición
      this.medicoService.editarMedico(formData).subscribe(
        response => {
          console.log("medico ",response);
          Swal.fire('Éxito', 'Médico editado exitosamente', 'success');
          this.router.navigateByUrl('/gestionar-medicos');
        },
        error => {
          Swal.fire('Error', 'Hubo un error al editar el médico', 'error');
        }
      );
    } else {
      // En modo agregar se crea un nuevo médico
      this.medicoService.crearMedico(formData).subscribe(
        (response: any) => {
          Swal.fire('Mensaje', response.msg, 'success');
          this.router.navigateByUrl('/gestionar-medicos');
        },
        error => {
          Swal.fire('Error', error.error.msg, 'error');
        }
      );
    }
  }
}
<div class="row animated fadeIn fast">
  <div class="col-12">
      <div class="card shadow-sm">
          <div class="card-body">
            <div class="alert alert-warning d-flex align-items-center" role="alert">
              <i class="fa fa-info-circle me-2"></i>
              <div>
                Si ya tienes médicos en tu aplicación, registra su horario laboral
                <a href="/gestionar-horarios-medicos" class="btn btn-info btn-sm ms-2">Registrar horarios</a>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="searchDoctor" class="form-label fw-bold text-primary">Buscar médicos por nombre</label>
              <div class="input-group">
                <span class="input-group-text bg-light">
                  <i class="fa fa-search"></i>
                </span>
                <input type="text"
                       id="searchDoctor"
                       class="form-control"
                       placeholder="Ingrese nombre del médico..."
                       #txtTermino
                       (keyup)="buscar(txtTermino.value)"/>
              </div>
            </div>
          </div>
      </div>
  </div>
</div> 

<div class="row mt-3">
  <div class="col-lg-12">
      <div class="card shadow-sm">
          <div class="card-header bg-light">
              <div class="d-flex justify-content-between align-items-center">
                  <div>
                      <h4 class="card-title mb-0">Total de médicos: <span class="badge bg-primary">{{ totalUsuarios }}</span></h4>
                      <p class="text-muted small mb-0">Profesionales registrados en el sistema</p>
                  </div>
                  <a class="btn btn-primary" routerLink="/agregar-medico">
                      <i class="fa fa-plus-circle me-1"></i> Crear médico
                  </a>
              </div>
          </div>
          <div class="card-body p-0">
              <div class="table-responsive">
                <table class="table table-hover table-striped mb-0">
                  <thead class="bg-light text-dark">
                    <tr>
                      <th class="px-3 py-3" style="width: 10%;">RUT</th>
                      <th class="px-3 py-3" style="width: 15%;">Nombre</th>
                      <th class="px-3 py-3" style="width: 20%;">Apellidos</th>
                      <th class="px-3 py-3" style="width: 15%;">Teléfono</th>
                      <th class="px-3 py-3" style="width: 20%;">Email</th>
                      <th class="px-3 py-3" style="width: 20%;">Especialidad</th>
                      <th class="px-3 py-3 text-center" style="width: 10%;">Acciones</th>
                    </tr>
                  </thead>
                  
                  <tbody>
                    <tr *ngFor="let medico of medicos">
                      <td class="px-3 py-2 align-middle">{{ medico.rut }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ medico.nombre }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ medico.apellidos }}</td>
                      <td class="px-3 py-2 align-middle">{{ medico.telefono }}</td>
                      <td class="px-3 py-2 align-middle">{{ medico.email }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ medico.especialidad_medica }}</td>
                      <td class="px-3 py-2 align-middle text-center">
                        <div class="btn-group" role="group">
                          <button type="button" class="btn btn-outline-primary btn-sm" 
                                  data-toggle="tooltip" title="Editar" 
                                  (click)="editarMedico(medico)">
                            <i class="fa fa-pencil"></i>
                          </button>
                          <button type="button" class="btn btn-outline-danger btn-sm" 
                                  data-toggle="tooltip" title="Eliminar" 
                                  (click)="borrarMedico(medico)">
                            <i class="fa fa-trash"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                    <tr *ngIf="medicos.length === 0">
                      <td colspan="7" class="text-center py-4">
                        <div class="text-muted">
                          <i class="fa fa-info-circle me-1"></i> No se encontraron médicos
                        </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <div class="p-3" *ngIf="txtTermino.value.length === 0">
                <app-paginator 
                  [totalItems]="totalUsuarios" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
          </div>
      </div>
  </div>
</div>import { Component, OnInit } from '@angular/core';
import { Medico, MedicoResponse } from '../../interface/medicos';
import { MedicoService } from '../../services/medico.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';



@Component({
  selector: 'app-gestionar-medicos',
  templateUrl: './gestionar-medicos.component.html',
  styleUrls: ['./gestionar-medicos.component.scss']
})


export class GestionarMedicosComponent implements OnInit {

  public medicos: Medico[] = [];
  public desde: number = 0;
  public totalUsuarios: number = 0;

 

  constructor(private MedicoService: MedicoService, private router: Router, private BusquedasService: BusquedasService){}

  ngOnInit(){
    this.cargaMedicos();
  }

  cargaMedicos() {
    this.MedicoService.cargarMedicos(this.desde)
      .subscribe((response: MedicoResponse) => {
        this.totalUsuarios = response.total;
      
        this.medicos = response.medicos; 

      });
  }

  

  borrarMedico( medico: Medico ) {

    Swal.fire({
      title: '¿Borrar médico?',
      text: `Está a punto de eliminar a ${medico.nombre}. Tenga en cuenta que se eliminarán los horarios y las citas en las que el médico esté involucrado. Solo se eliminarán las citas en estado "terminado", por lo que las citas que ya fueron pagadas o están en curso seguirán activas. Por favor, asegúrese de contar con un médico suplente para atender estas citas o comuníquese con sus pacientes.`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.MedicoService.borrarMedico( medico.rut )
          .subscribe( resp => {
            
            this.cargaMedicos();
            Swal.fire(
              'Médico borrado',
              `${ medico.nombre } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

  }

  editarMedico(medico: Medico) {
    console.log('este medico',medico);
    this.router.navigate(['/editar-medico', medico.rut]);
  }

  cambiarPagina(nuevoOffset: number) {
        console.log("valor", nuevoOffset);
        this.desde = nuevoOffset;
        console.log(this.desde);

        if( this.desde < 0){ 
          this.desde = 0;
        } else if( this.desde >= this.totalUsuarios ){ 
          this.desde -= nuevoOffset;
        }
        this.cargaMedicos(); 
      }

      

  buscar(termino: string): void {
  
    if (termino.length === 0) {
      this.cargaMedicos();
        return; // Termina la ejecución si no hay término a buscar
    }

    this.BusquedasService.buscar('medicos', termino)
  
    .subscribe((resp: any) => {  // Cambia el tipo a 'any' para no tener problemas con el tipado
      console.log(resp);
      this.medicos = resp;
  
  });           
}


}
.icon-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-right: 5px;
}

.cursor {
  cursor: pointer;
}

/* Estilo para los botones */
.btn-group .btn {
  transition: all 0.3s ease;
}

/* Estilos para la tabla */
.table {
  width: 100%;
  table-layout: fixed;
  border-collapse: separate;
  border-spacing: 0;
}

.table th,
.table td {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  vertical-align: middle;
}

/* Mejoras para los botones de acción */
.btn-sm {
  padding: 0.25rem 0.5rem;
}

/* Estilos para las tarjetas */
.card {
  border-radius: 0.5rem;
  border: none;
  transition: all 0.3s ease;
}

.card-header {
  border-bottom: 1px solid rgba(0,0,0,0.1);
  padding: 1rem 1.5rem;
}

.shadow-sm {
  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
}

/* Estilo para el mensaje de alerta */
.alert {
  border-left: 4px solid #ffc107;
}

/* Estilo para la fila al pasar el mouse */
.table-hover tbody tr:hover {
  background-color: rgba(0, 123, 255, 0.05);
}

/* Estilo para los badges */
.badge {
  font-weight: 500;
  padding: 0.35em 0.65em;
}

.text-capitalize {
  text-transform: capitalize;
}<div class="row animated fadeIn fast">
  <div class="col-12">
      <div class="card shadow-sm">
          <div class="card-body">
            <div class="alert alert-warning d-flex align-items-center" role="alert">
              <i class="fa fa-info-circle me-2"></i>
              <div>
                Si ya tienes médicos en tu aplicación, registra su horario laboral
                <a href="/gestionar-horarios-medicos" class="btn btn-info btn-sm ms-2">Registrar horarios</a>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="searchDoctor" class="form-label fw-bold text-primary">Buscar médicos por nombre</label>
              <div class="input-group">
                <span class="input-group-text bg-light">
                  <i class="fa fa-search"></i>
                </span>
                <input type="text"
                       id="searchDoctor"
                       class="form-control"
                       placeholder="Ingrese nombre del médico..."
                       #txtTermino
                       (keyup)="buscar(txtTermino.value)"/>
              </div>
            </div>
          </div>
      </div>
  </div>
</div> 

<div class="row mt-3">
  <div class="col-lg-12">
      <div class="card shadow-sm">
          <div class="card-header bg-light">
              <div class="d-flex justify-content-between align-items-center">
                  <div>
                      <h4 class="card-title mb-0">Total de médicos: <span class="badge bg-primary">{{ totalUsuarios }}</span></h4>
                      <p class="text-muted small mb-0">Profesionales registrados en el sistema</p>
                  </div>
                  <a class="btn btn-primary" routerLink="/agregar-medico">
                      <i class="fa fa-plus-circle me-1"></i> Crear médico
                  </a>
              </div>
          </div>
          <div class="card-body p-0">
              <div class="table-responsive">
                <table class="table table-hover table-striped mb-0">
                  <thead class="bg-light text-dark">
                    <tr>
                      <th class="px-3 py-3" style="width: 10%;">RUT</th>
                      <th class="px-3 py-3" style="width: 15%;">Nombre</th>
                      <th class="px-3 py-3" style="width: 20%;">Apellidos</th>
                      <th class="px-3 py-3" style="width: 15%;">Teléfono</th>
                      <th class="px-3 py-3" style="width: 20%;">Email</th>
                      <th class="px-3 py-3" style="width: 20%;">Especialidad</th>
                      <th class="px-3 py-3 text-center" style="width: 10%;">Acciones</th>
                    </tr>
                  </thead>
                  
                  <tbody>
                    <tr *ngFor="let medico of medicos">
                      <td class="px-3 py-2 align-middle">{{ medico.rut }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ medico.nombre }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ medico.apellidos }}</td>
                      <td class="px-3 py-2 align-middle">{{ medico.telefono }}</td>
                      <td class="px-3 py-2 align-middle">{{ medico.email }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ medico.especialidad_medica }}</td>
                      <td class="px-3 py-2 align-middle text-center">
                        <div class="btn-group" role="group">
                          <button type="button" class="btn btn-outline-primary btn-sm" 
                                  data-toggle="tooltip" title="Editar" 
                                  (click)="editarMedico(medico)">
                            <i class="fa fa-pencil"></i>
                          </button>
                          <button type="button" class="btn btn-outline-danger btn-sm" 
                                  data-toggle="tooltip" title="Eliminar" 
                                  (click)="borrarMedico(medico)">
                            <i class="fa fa-trash"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                    <tr *ngIf="medicos.length === 0">
                      <td colspan="7" class="text-center py-4">
                        <div class="text-muted">
                          <i class="fa fa-info-circle me-1"></i> No se encontraron médicos
                        </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <div class="p-3" *ngIf="txtTermino.value.length === 0">
                <app-paginator 
                  [totalItems]="totalUsuarios" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
          </div>
      </div>
  </div>
</div>.icon-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-right: 5px;
}

.cursor {
  cursor: pointer;
}

/* Estilo para los botones */
.btn-group .btn {
  transition: all 0.3s ease;
}

/* Estilos para la tabla */
.table {
  width: 100%;
  table-layout: fixed;
  border-collapse: separate;
  border-spacing: 0;
}

.table th,
.table td {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  vertical-align: middle;
}

/* Mejoras para los botones de acción */
.btn-sm {
  padding: 0.25rem 0.5rem;
}

/* Estilos para las tarjetas */
.card {
  border-radius: 0.5rem;
  border: none;
  transition: all 0.3s ease;
}

.card-header {
  border-bottom: 1px solid rgba(0,0,0,0.1);
  padding: 1rem 1.5rem;
}

.shadow-sm {
  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
}

/* Estilo para el mensaje de alerta */
.alert {
  border-left: 4px solid #ffc107;
}

/* Estilo para la fila al pasar el mouse */
.table-hover tbody tr:hover {
  background-color: rgba(0, 123, 255, 0.05);
}

/* Estilo para los badges */
.badge {
  font-weight: 500;
  padding: 0.35em 0.65em;
}

.text-capitalize {
  text-transform: capitalize;
}import { Component, OnInit } from '@angular/core';
import { Medico, MedicoResponse } from '../../interface/medicos';
import { MedicoService } from '../../services/medico.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';



@Component({
  selector: 'app-gestionar-medicos',
  templateUrl: './gestionar-medicos.component.html',
  styleUrls: ['./gestionar-medicos.component.scss']
})


export class GestionarMedicosComponent implements OnInit {

  public medicos: Medico[] = [];
  public desde: number = 0;
  public totalUsuarios: number = 0;

 

  constructor(private MedicoService: MedicoService, private router: Router, private BusquedasService: BusquedasService){}

  ngOnInit(){
    this.cargaMedicos();
  }

  cargaMedicos() {
    this.MedicoService.cargarMedicos(this.desde)
      .subscribe((response: MedicoResponse) => {
        this.totalUsuarios = response.total;
      
        this.medicos = response.medicos; 

      });
  }

  

  borrarMedico( medico: Medico ) {

    Swal.fire({
      title: '¿Borrar médico?',
      text: `Está a punto de eliminar a ${medico.nombre}. Tenga en cuenta que se eliminarán los horarios y las citas en las que el médico esté involucrado. Solo se eliminarán las citas en estado "terminado", por lo que las citas que ya fueron pagadas o están en curso seguirán activas. Por favor, asegúrese de contar con un médico suplente para atender estas citas o comuníquese con sus pacientes.`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.MedicoService.borrarMedico( medico.rut )
          .subscribe( resp => {
            
            this.cargaMedicos();
            Swal.fire(
              'Médico borrado',
              `${ medico.nombre } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

  }

  editarMedico(medico: Medico) {
    console.log('este medico',medico);
    this.router.navigate(['/editar-medico', medico.rut]);
  }

  cambiarPagina(nuevoOffset: number) {
        console.log("valor", nuevoOffset);
        this.desde = nuevoOffset;
        console.log(this.desde);

        if( this.desde < 0){ 
          this.desde = 0;
        } else if( this.desde >= this.totalUsuarios ){ 
          this.desde -= nuevoOffset;
        }
        this.cargaMedicos(); 
      }

      

  buscar(termino: string): void {
  
    if (termino.length === 0) {
      this.cargaMedicos();
        return; // Termina la ejecución si no hay término a buscar
    }

    this.BusquedasService.buscar('medicos', termino)
  
    .subscribe((resp: any) => {  // Cambia el tipo a 'any' para no tener problemas con el tipado
      console.log(resp);
      this.medicos = resp;
  
  });           
}


}
<div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <h2 class="text-center mb-4">Formulario de Registro de Paciente</h2>
        <form [formGroup]="formulario"
         (ngSubmit)="crearPaciente()">
          <div class="form-row">
            <div class="form-group col-md-6 mb-3">
              <label for="rut_paciente">Rut</label>
              <input type="text" class="form-control" id="rut_paciente" formControlName="rut" placeholder="Ingrese su rut">
              <!-- Alerta para RUT inválido -->
              <div *ngIf="formulario.controls['rut'].errors?.['rutInvalid']" class="text-danger">
                RUT no válido.
              </div>
              <!-- Alerta para campo requerido -->
              <div *ngIf="formulario.controls['rut'].touched && formulario.controls['rut'].errors?.['required']" class="text-danger">
                Este campo es obligatorio.
              </div>
            </div>
             
            <div class="form-group col-md-6 mb-3">
              <label for="nombres">Nombre</label>
              <input type="text" class="form-control" id="nombres" formControlName="nombre" placeholder="Ingrese su nombre">
              <!-- Alerta para campo requerido -->
              <div *ngIf="formulario.controls['nombre'].touched && formulario.controls['nombre'].errors?.['required']" class="text-danger">
                Este campo es obligatorio.
              </div>
            </div>
            
            <div class="form-group col-md-6 mb-3">
              <label for="apellidos">Apellidos</label>
              <input type="text" class="form-control" id="apellidos" formControlName="apellidos" placeholder="Ingrese sus apellidos">
              <!-- Alerta para campo requerido -->
              <div *ngIf="formulario.controls['apellidos'].touched && formulario.controls['apellidos'].errors?.['required']" class="text-danger">
                Este campo es obligatorio.
              </div>
            </div>
            
            <div class="form-group col-md-6 mb-3">
              <label for="password">Password</label>
              <input type="password" class="form-control" id="password" formControlName="password" placeholder="ingrese contraseña">
              <!-- Alerta para fuerza de contraseña -->
              <div *ngIf="formulario.controls['password'].errors?.['passwordStrength']" class="text-danger">
                La contraseña debe incluir mayúsculas, números y caracteres especiales.
              </div>
            </div>
            
          </div>
         
          <div class="form-group col-md-6 mb-3">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" formControlName="email" placeholder="ingrese su email">
            <div *ngIf="formulario.get('email')?.hasError('required') && formulario.get('email')?.touched" class="text-danger">
              El email es requerido.
            </div>
            <div *ngIf="formulario.get('email')?.hasError('email') && formulario.get('email')?.touched" class="text-danger">
              El email no es válido.
            </div>
            <!-- Alerta para email no Gmail -->
            <div *ngIf="formulario.get('email')?.hasError('notGmail') && formulario.get('email')?.touched" class="text-danger">
              Solo se permiten direcciones de email de Gmail.
            </div>
          </div>
          
          <div class="form-group col-md-6 mb-3">
            <label for="fechaNacimiento">Fecha de Nacimiento</label>
            <input type="date" class="form-control" id="fechaNacimiento" formControlName="fecha_nacimiento">
            <!-- Alerta para campo requerido -->
            <div *ngIf="formulario.controls['fecha_nacimiento'].touched && formulario.controls['fecha_nacimiento'].errors?.['required']" class="text-danger">
              Este campo es obligatorio.
            </div>
          </div>
          
        
       
          <div class="form-group col-md-6 mb-3">
            <label for="telefono">Teléfono</label>
            <input type="tel" class="form-control" id="telefono" formControlName="telefono" placeholder="ingrese su Teléfono">
            <!-- Alerta para campo requerido -->
            <div *ngIf="formulario.controls['telefono'].touched && formulario.controls['telefono'].errors?.['required']" class="text-danger">
              Este campo es obligatorio.
            </div>
            <!-- Alerta para formato de teléfono inválido -->
            <div *ngIf="formulario.controls['telefono'].errors?.['telefonoInvalido'] && formulario.controls['telefono'].touched" class="text-danger">
              Formato de teléfono inválido. Debe ser +56 9 XXXX-XXXX.
            </div>
          </div>
          <div class="form-group mb-3">
            <label for="direccion">Dirección</label>
            <input type="text" class="form-control" id="direccion" formControlName="direccion" placeholder="ingrese su Dirección">
            <!-- Alerta para campo requerido -->
            <div *ngIf="formulario.controls['direccion'].touched && formulario.controls['direccion'].errors?.['required']" class="text-danger">
              Este campo es obligatorio.
            </div>
          </div>
          
          <button type="submit" class="btn btn-primary btn-block">Registrar Paciente</button>
        </form>
      </div>
    </div>
  </div>
  
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors  } from '@angular/forms';
import { PacienteService } from '../../services/usuario.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { rutValidator } from 'src/app/shared/Validators/rut-validator';
import { passwordStrengthValidator } from 'src/app/shared/Validators/password-strength-validator';
import { phoneValidator } from 'src/app/shared/Validators/phone-validator';

@Component({
  selector: 'app-agregar-paciente',
  templateUrl: './agregar-paciente.component.html',
  styleUrls: ['./agregar-paciente.component.scss']
})
export class AgregarPacienteComponent {

  formulario: FormGroup;

  constructor(private formBuilder: FormBuilder, private PacienteService: PacienteService, private router: Router) {
    this.formulario = this.formBuilder.group({
      rut: ['', [Validators.required, rutValidator()]],
      nombre: ['', Validators.required],
      apellidos: ['', Validators.required],
      password: ['', [Validators.required, passwordStrengthValidator()]],
      email: ['', [Validators.required, Validators.email, this.gmailValidator]],
      fecha_nacimiento: ['', Validators.required],
      telefono: ['', [Validators.required, phoneValidator()]],
      direccion: ['', Validators.required],
    });
  }



  gmailValidator(control: AbstractControl): ValidationErrors | null {
    const value = control.value;
    if (!value) {
      return null;
    }
  
    const isGmail = value.endsWith('@gmail.com');
    return !isGmail ? { 'notGmail': true } : null;
  }


  crearPaciente() {
    if (this.formulario.invalid) {
      // Marca todos los controles del formulario como tocados
      this.formulario.markAllAsTouched();
      return;
    }
  
    const formData = this.formulario.value;
    console.log(formData);
  
    this.PacienteService.crearPaciente(formData).subscribe(
      (respuesta: any) => {
        // Mensaje de éxito con SweetAlert
        Swal.fire({
          title: '¡Éxito!',
          text: 'El paciente ha sido creado con éxito.',
          icon: 'success',
          confirmButtonText: 'Aceptar'
        }).then((result) => {
          // Redireccionar a la ruta 'gestionar-pacientes' después de cerrar el SweetAlert
          if (result.isConfirmed) {
            this.router.navigate(['/gestionar-pacientes']);
          }
        });
  
      }, (err) => {
        // Mensaje de error con SweetAlert
        Swal.fire('Error', err.error.msg, 'error');
      }
    );
  }
  
  

}
<div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <h2 class="text-center mb-4">Formulario de Registro de Paciente</h2>
        <form [formGroup]="formulario"
         (ngSubmit)="crearPaciente()">
          <div class="form-row">
            <div class="form-group col-md-6 mb-3">
              <label for="rut_paciente">Rut</label>
              <input type="text" class="form-control" id="rut_paciente" formControlName="rut" placeholder="Ingrese su rut">
              <!-- Alerta para RUT inválido -->
              <div *ngIf="formulario.controls['rut'].errors?.['rutInvalid']" class="text-danger">
                RUT no válido.
              </div>
              <!-- Alerta para campo requerido -->
              <div *ngIf="formulario.controls['rut'].touched && formulario.controls['rut'].errors?.['required']" class="text-danger">
                Este campo es obligatorio.
              </div>
            </div>
             
            <div class="form-group col-md-6 mb-3">
              <label for="nombres">Nombre</label>
              <input type="text" class="form-control" id="nombres" formControlName="nombre" placeholder="Ingrese su nombre">
              <!-- Alerta para campo requerido -->
              <div *ngIf="formulario.controls['nombre'].touched && formulario.controls['nombre'].errors?.['required']" class="text-danger">
                Este campo es obligatorio.
              </div>
            </div>
            
            <div class="form-group col-md-6 mb-3">
              <label for="apellidos">Apellidos</label>
              <input type="text" class="form-control" id="apellidos" formControlName="apellidos" placeholder="Ingrese sus apellidos">
              <!-- Alerta para campo requerido -->
              <div *ngIf="formulario.controls['apellidos'].touched && formulario.controls['apellidos'].errors?.['required']" class="text-danger">
                Este campo es obligatorio.
              </div>
            </div>
            
            <div class="form-group col-md-6 mb-3">
              <label for="password">Password</label>
              <input type="password" class="form-control" id="password" formControlName="password" placeholder="ingrese contraseña">
              <!-- Alerta para fuerza de contraseña -->
              <div *ngIf="formulario.controls['password'].errors?.['passwordStrength']" class="text-danger">
                La contraseña debe incluir mayúsculas, números y caracteres especiales.
              </div>
            </div>
            
          </div>
         
          <div class="form-group col-md-6 mb-3">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" formControlName="email" placeholder="ingrese su email">
            <div *ngIf="formulario.get('email')?.hasError('required') && formulario.get('email')?.touched" class="text-danger">
              El email es requerido.
            </div>
            <div *ngIf="formulario.get('email')?.hasError('email') && formulario.get('email')?.touched" class="text-danger">
              El email no es válido.
            </div>
            <!-- Alerta para email no Gmail -->
            <div *ngIf="formulario.get('email')?.hasError('notGmail') && formulario.get('email')?.touched" class="text-danger">
              Solo se permiten direcciones de email de Gmail.
            </div>
          </div>
          
          <div class="form-group col-md-6 mb-3">
            <label for="fechaNacimiento">Fecha de Nacimiento</label>
            <input type="date" class="form-control" id="fechaNacimiento" formControlName="fecha_nacimiento">
            <!-- Alerta para campo requerido -->
            <div *ngIf="formulario.controls['fecha_nacimiento'].touched && formulario.controls['fecha_nacimiento'].errors?.['required']" class="text-danger">
              Este campo es obligatorio.
            </div>
          </div>
          
        
       
          <div class="form-group col-md-6 mb-3">
            <label for="telefono">Teléfono</label>
            <input type="tel" class="form-control" id="telefono" formControlName="telefono" placeholder="ingrese su Teléfono">
            <!-- Alerta para campo requerido -->
            <div *ngIf="formulario.controls['telefono'].touched && formulario.controls['telefono'].errors?.['required']" class="text-danger">
              Este campo es obligatorio.
            </div>
            <!-- Alerta para formato de teléfono inválido -->
            <div *ngIf="formulario.controls['telefono'].errors?.['telefonoInvalido'] && formulario.controls['telefono'].touched" class="text-danger">
              Formato de teléfono inválido. Debe ser +56 9 XXXX-XXXX.
            </div>
          </div>
          <div class="form-group mb-3">
            <label for="direccion">Dirección</label>
            <input type="text" class="form-control" id="direccion" formControlName="direccion" placeholder="ingrese su Dirección">
            <!-- Alerta para campo requerido -->
            <div *ngIf="formulario.controls['direccion'].touched && formulario.controls['direccion'].errors?.['required']" class="text-danger">
              Este campo es obligatorio.
            </div>
          </div>
          
          <button type="submit" class="btn btn-primary btn-block">Registrar Paciente</button>
        </form>
      </div>
    </div>
  </div>
  
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors  } from '@angular/forms';
import { PacienteService } from '../../services/usuario.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { rutValidator } from 'src/app/shared/Validators/rut-validator';
import { passwordStrengthValidator } from 'src/app/shared/Validators/password-strength-validator';
import { phoneValidator } from 'src/app/shared/Validators/phone-validator';

@Component({
  selector: 'app-agregar-paciente',
  templateUrl: './agregar-paciente.component.html',
  styleUrls: ['./agregar-paciente.component.scss']
})
export class AgregarPacienteComponent {

  formulario: FormGroup;

  constructor(private formBuilder: FormBuilder, private PacienteService: PacienteService, private router: Router) {
    this.formulario = this.formBuilder.group({
      rut: ['', [Validators.required, rutValidator()]],
      nombre: ['', Validators.required],
      apellidos: ['', Validators.required],
      password: ['', [Validators.required, passwordStrengthValidator()]],
      email: ['', [Validators.required, Validators.email, this.gmailValidator]],
      fecha_nacimiento: ['', Validators.required],
      telefono: ['', [Validators.required, phoneValidator()]],
      direccion: ['', Validators.required],
    });
  }



  gmailValidator(control: AbstractControl): ValidationErrors | null {
    const value = control.value;
    if (!value) {
      return null;
    }
  
    const isGmail = value.endsWith('@gmail.com');
    return !isGmail ? { 'notGmail': true } : null;
  }


  crearPaciente() {
    if (this.formulario.invalid) {
      // Marca todos los controles del formulario como tocados
      this.formulario.markAllAsTouched();
      return;
    }
  
    const formData = this.formulario.value;
    console.log(formData);
  
    this.PacienteService.crearPaciente(formData).subscribe(
      (respuesta: any) => {
        // Mensaje de éxito con SweetAlert
        Swal.fire({
          title: '¡Éxito!',
          text: 'El paciente ha sido creado con éxito.',
          icon: 'success',
          confirmButtonText: 'Aceptar'
        }).then((result) => {
          // Redireccionar a la ruta 'gestionar-pacientes' después de cerrar el SweetAlert
          if (result.isConfirmed) {
            this.router.navigate(['/gestionar-pacientes']);
          }
        });
  
      }, (err) => {
        // Mensaje de error con SweetAlert
        Swal.fire('Error', err.error.msg, 'error');
      }
    );
  }
  
  

}

/*
<div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <h2 class="text-center mb-4">Formulario de Editar Usuario</h2>
        <form [formGroup]="formulario"
        (ngSubmit)="editarPaciente()">
          <div class="form-row">
            <div class="form-group col-md-6 mb-3">
              <label for="rut_paciente">Rut</label>
              <input type="text" class="form-control" id="rut_paciente" formControlName="rut" placeholder="rut">
            </div>
            <div class="form-group col-md-6 mb-3">
              <label for="nombres">Nombres</label>
              <input type="text" class="form-control" id="nombres" formControlName="nombre" placeholder="Nombres">
            </div>
            <div class="form-group col-md-6 mb-3">
              <label for="apellidos">Apellidos</label>
              <input type="text" class="form-control" id="apellidos" formControlName="apellidos" placeholder="Apellidos">
            </div>

          </div>
          <div class="form-row">
            <div class="form-group col-md-6 mb-3">
              <label for="email">Email</label>
              <input type="email" class="form-control" id="email" formControlName="email" placeholder="Email">
              <div *ngIf="formulario.get('email')?.hasError('required') && formulario.get('email')?.touched" class="text-danger">
                El email es requerido.
              </div>
              <div *ngIf="formulario.get('email')?.hasError('email') && formulario.get('email')?.touched" class="text-danger">
                El email no es válido.
              </div>
            </div>
            <div class="form-group col-md-6 mb-3">
              <label for="fechaNacimiento">Fecha de Nacimiento</label>
              <input type="date" class="form-control" id="fechaNacimiento" formControlName="fecha_nacimiento">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group col-md-6 mb-3">
              <label for="telefono">Teléfono</label>
              <input type="tel" class="form-control" id="telefono" formControlName="telefono" placeholder="Teléfono">
            </div>
          </div>
          <div class="form-group mb-3">
            <label for="direccion">Dirección</label>
            <input type="text" class="form-control" id="direccion" formControlName="direccion" placeholder="Dirección">
          </div>
          <button type="submit" class="btn btn-primary btn-block">Registrar Paciente</button>
        </form>
      </div>
    </div>
  </div>
  
*/import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PacienteService } from '../../services/usuario.service';
import { Router } from '@angular/router';
import { ActivatedRoute } from '@angular/router';
import Swal from 'sweetalert2';
import { phoneValidator } from 'src/app/shared/Validators/phone-validator';

@Component({
  selector: 'app-editar-usuario',
  templateUrl: './editar-usuario.component.html',
  styleUrls: ['./editar-usuario.component.scss']
})
export class EditarUsuarioComponent implements OnInit {
  formulario: FormGroup;

  constructor(private formBuilder: FormBuilder, private PacienteService: PacienteService, private ActivatedRoute: ActivatedRoute, private router: Router) {
    this.formulario = this.formBuilder.group({
      rut: ['', Validators.required],
      nombre: ['', Validators.required],
      apellidos: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      fecha_nacimiento: [''],
      telefono: ['', [Validators.required, phoneValidator()]],
      direccion: [''],
    });
  }
  ngOnInit() {
    this.ActivatedRoute.params.subscribe(params => {
      const usuarioId = params['id'];
      console.log('id',usuarioId)
      if (usuarioId) {
        this.PacienteService.obtenerUsuarioPorId(usuarioId).subscribe((response: any) => {
          const usuarioData = response.usuario; 
          this.formulario.patchValue({
            rut: usuarioData.rut,
            nombre: usuarioData.nombre,
            apellidos: usuarioData.apellidos,
            email: usuarioData.email,
            fecha_nacimiento: usuarioData.fecha_nacimiento,
            telefono: usuarioData.telefono,
            direccion: usuarioData.direccion,  
          });
        });
      }

    });
  }

  editarPaciente() {
   
    Swal.fire({
      title: '¿Editar usuario?',
      text: 'Esta a punto de editar los datos del usuario. ¿Desea continuar?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sí, editar',
      cancelButtonText: 'Cancelar',
    }).then((result) => {
      if (result.value) {
      
          console.log('AQUI',this.formulario.value);
          const usuarioEditado = this.formulario.value;
          console.log('AQUI ESTA EL USUARIO EDITADO',usuarioEditado);
          this.PacienteService.editarUsuario(usuarioEditado).subscribe(
            (response) => {
              Swal.fire('Éxito', 'Usuario editado exitosamente', 'success');
              this.router.navigateByUrl('/gestionar-pacientes');
            },
            (error) => {
              Swal.fire('Error', 'Hubo un error al editar el médico', 'error');
              // Manejar errores, como mensajes de error o reversiones de cambios en el formulario.
            }
          );
      
      }
    });
  }

}

/*
<div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <h2 class="text-center mb-4">Formulario de Editar Usuario</h2>
        <form [formGroup]="formulario"
        (ngSubmit)="editarPaciente()">
          <div class="form-row">
            <div class="form-group col-md-6 mb-3">
              <label for="rut_paciente">Rut</label>
              <input type="text" class="form-control" id="rut_paciente" formControlName="rut" placeholder="rut">
            </div>
            <div class="form-group col-md-6 mb-3">
              <label for="nombres">Nombres</label>
              <input type="text" class="form-control" id="nombres" formControlName="nombre" placeholder="Nombres">
            </div>
            <div class="form-group col-md-6 mb-3">
              <label for="apellidos">Apellidos</label>
              <input type="text" class="form-control" id="apellidos" formControlName="apellidos" placeholder="Apellidos">
            </div>

          </div>
          <div class="form-row">
            <div class="form-group col-md-6 mb-3">
              <label for="email">Email</label>
              <input type="email" class="form-control" id="email" formControlName="email" placeholder="Email">
              <div *ngIf="formulario.get('email')?.hasError('required') && formulario.get('email')?.touched" class="text-danger">
                El email es requerido.
              </div>
              <div *ngIf="formulario.get('email')?.hasError('email') && formulario.get('email')?.touched" class="text-danger">
                El email no es válido.
              </div>
            </div>
            <div class="form-group col-md-6 mb-3">
              <label for="fechaNacimiento">Fecha de Nacimiento</label>
              <input type="date" class="form-control" id="fechaNacimiento" formControlName="fecha_nacimiento">
            </div>
          </div>
          <div class="form-row">
            <div class="form-group col-md-6 mb-3">
              <label for="telefono">Teléfono</label>
              <input type="tel" class="form-control" id="telefono" formControlName="telefono" placeholder="Teléfono">
            </div>
          </div>
          <div class="form-group mb-3">
            <label for="direccion">Dirección</label>
            <input type="text" class="form-control" id="direccion" formControlName="direccion" placeholder="Dirección">
          </div>
          <button type="submit" class="btn btn-primary btn-block">Registrar Paciente</button>
        </form>
      </div>
    </div>
  </div>
  
*/import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PacienteService } from '../../services/usuario.service';
import { Router } from '@angular/router';
import { ActivatedRoute } from '@angular/router';
import Swal from 'sweetalert2';
import { phoneValidator } from 'src/app/shared/Validators/phone-validator';

@Component({
  selector: 'app-editar-usuario',
  templateUrl: './editar-usuario.component.html',
  styleUrls: ['./editar-usuario.component.scss']
})
export class EditarUsuarioComponent implements OnInit {
  formulario: FormGroup;

  constructor(private formBuilder: FormBuilder, private PacienteService: PacienteService, private ActivatedRoute: ActivatedRoute, private router: Router) {
    this.formulario = this.formBuilder.group({
      rut: ['', Validators.required],
      nombre: ['', Validators.required],
      apellidos: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      fecha_nacimiento: [''],
      telefono: ['', [Validators.required, phoneValidator()]],
      direccion: [''],
    });
  }
  ngOnInit() {
    this.ActivatedRoute.params.subscribe(params => {
      const usuarioId = params['id'];
      console.log('id',usuarioId)
      if (usuarioId) {
        this.PacienteService.obtenerUsuarioPorId(usuarioId).subscribe((response: any) => {
          const usuarioData = response.usuario; 
          this.formulario.patchValue({
            rut: usuarioData.rut,
            nombre: usuarioData.nombre,
            apellidos: usuarioData.apellidos,
            email: usuarioData.email,
            fecha_nacimiento: usuarioData.fecha_nacimiento,
            telefono: usuarioData.telefono,
            direccion: usuarioData.direccion,  
          });
        });
      }

    });
  }

  editarPaciente() {
   
    Swal.fire({
      title: '¿Editar usuario?',
      text: 'Esta a punto de editar los datos del usuario. ¿Desea continuar?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sí, editar',
      cancelButtonText: 'Cancelar',
    }).then((result) => {
      if (result.value) {
      
          console.log('AQUI',this.formulario.value);
          const usuarioEditado = this.formulario.value;
          console.log('AQUI ESTA EL USUARIO EDITADO',usuarioEditado);
          this.PacienteService.editarUsuario(usuarioEditado).subscribe(
            (response) => {
              Swal.fire('Éxito', 'Usuario editado exitosamente', 'success');
              this.router.navigateByUrl('/gestionar-pacientes');
            },
            (error) => {
              Swal.fire('Error', 'Hubo un error al editar el médico', 'error');
              // Manejar errores, como mensajes de error o reversiones de cambios en el formulario.
            }
          );
      
      }
    });
  }

}
<div class="row animated fadeIn fast">
  <div class="col-12">
      <div class="card shadow-sm">
          <div class="card-body">
            <div class="mb-3">
              <label for="searchPatient" class="form-label fw-bold text-primary">Buscar pacientes por nombre</label>
              <div class="input-group">
                <span class="input-group-text bg-light">
                  <i class="fa fa-search"></i>
                </span>
                <input type="text"
                       id="searchPatient"
                       class="form-control"
                       placeholder="Ingrese nombre del paciente..."
                       #txtTermino
                       (keyup)="buscar(txtTermino.value)"/>
              </div>
            </div>
          </div>
      </div>
  </div>
</div>

<div class="row mt-3">
  <div class="col-12">
      <div class="card shadow-sm">
          <div class="card-header bg-light">
              <div class="d-flex justify-content-between align-items-center">
                  <div>
                      <h4 class="card-title mb-0">Pacientes: <span class="badge bg-primary">{{ totalUsuarios }}</span></h4>
                      <p class="text-muted small mb-0">Pacientes registrados en el sistema</p>
                  </div>
                  <a class="btn btn-primary" routerLink="/agregar-paciente">
                      <i class="fa fa-plus-circle me-1"></i> Crear Paciente
                  </a>
              </div>
          </div>
          <div class="card-body p-0">
              <div class="table-responsive">
                <table class="table table-hover table-striped mb-0">
                  <thead class="bg-light text-dark">
                    <tr>
                      <th class="px-3 py-3" style="width: 15%;">RUT</th>
                      <th class="px-3 py-3" style="width: 10%;">Nombre</th>
                      <th class="px-3 py-3" style="width: 15%;">Apellidos</th>
                      <th class="px-3 py-3" style="width: 15%;">Email</th>
                      <th class="px-3 py-3" style="width: 15%;">Teléfono</th>
                      <th class="px-3 py-3" style="width: 15%;">Rol</th>
                      <th class="px-3 py-3 text-center" style="width: 10%;">Acciones</th>
                    </tr>
                  </thead>
                  
                  <tbody>
                    <tr *ngFor="let paciente of pacientes">
                      <td class="px-3 py-2 align-middle">{{ paciente.rut }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ paciente.nombre }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ paciente.apellidos }}</td>
                      <td class="px-3 py-2 align-middle">{{ paciente.email }}</td>
                      <td class="px-3 py-2 align-middle">{{ paciente.telefono }}</td>
                      <td class="px-3 py-2 align-middle">
                          <select class="form-select form-select-sm"
                                 [(ngModel)]="paciente.rol"
                                 (change)="cambiarRole(paciente)">
                            <option value="ADMIN_ROLE">Administrador</option>
                            <option value="USER_ROLE">Usuario</option>
                          </select>
                      </td>
                      <td class="px-3 py-2 align-middle text-center">
                        <div class="btn-group" role="group">
                          <button type="button" class="btn btn-outline-primary btn-sm" 
                                  data-toggle="tooltip" title="Editar" 
                                  (click)="editarUsuario(paciente)">
                            <i class="fa fa-pencil"></i>
                          </button>
                          <button type="button" class="btn btn-outline-danger btn-sm" 
                                  data-toggle="tooltip" title="Eliminar" 
                                  (click)="borrarPaciente(paciente)">
                            <i class="fa fa-trash"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                    <tr *ngIf="pacientes.length === 0">
                      <td colspan="7" class="text-center py-4">
                        <div class="text-muted">
                          <i class="fa fa-info-circle me-1"></i> No se encontraron pacientes
                        </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <div class="p-3" *ngIf="txtTermino.value.length === 0">
                <app-paginator 
                  [totalItems]="totalUsuarios" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
          </div>
      </div>
  </div>
</div>import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PacienteService } from '../../services/usuario.service';
import { Router } from '@angular/router';
import { Paciente, UsuariosResponse } from '../../interface/paciente';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';
import { AuthService } from '../../../../auth/services/auth.service';
import { Usuario } from '../../../../medicos/usuarios';

@Component({
  selector: 'app-gestionar-pacientes',
  templateUrl: './gestionar-pacientes.component.html',
  styleUrls: ['./gestionar-pacientes.component.scss']
})
export class GestionarPacientesComponent implements OnInit {
  
  pacientes: Paciente [] = [];
  public desde: number = 0;
  public totalUsuarios: number = 0;

  constructor(private PacienteService: PacienteService, private router: Router, private BusquedasService: BusquedasService, private AuthService: AuthService){}

  ngOnInit(){
    this.cargaPacientes();
  }


  cargaPacientes() {
    this.PacienteService.cargarPacientes(this.desde)
      .subscribe((response: UsuariosResponse) => { 
        this.totalUsuarios = response.total,
        this.pacientes = response.usuarios 

      });
  }

  borrarPaciente(paciente: Paciente) {
    if (this.AuthService.usuario.rut === paciente.rut) {
        Swal.fire('Operación no permitida', 'No puedes eliminarte a ti mismo.', 'error');
        return;
    }

    Swal.fire({
        title: `¿Estás seguro de querer eliminar a ${paciente.nombre}?`,
        text: "Esta acción eliminara todas las citas agendadas del paciente y sus historiales medicos.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.value) {
            this.PacienteService.borrarPaciente(paciente.rut).subscribe(
                (response) => {
                    Swal.fire('Eliminado!', response.msg, 'success');
                    this.cargaPacientes();
                },
                (error) => {
                    Swal.fire('Error', error.error.msg, 'error');
                }
            );
        }
    });
}

  
  

  cambiarRole(paciente: Paciente) {
    // Verificar si el paciente a editar es el mismo que el usuario autenticado
    if (this.AuthService.usuario.rut === paciente.rut) {
      Swal.fire(
        'Operación no permitida',
        'No puedes cambiar tu propio rol.',
        'error'
      );
      return; // Detener la ejecución si el usuario intenta cambiar su propio rol
    }
  
    // Si no es el mismo, proceder con la lógica de cambio de rol
    this.PacienteService.guardarUsuario(paciente)
      .subscribe(resp => {
        console.log(resp);
        Swal.fire(
          'Rol actualizado',
          `El rol de ${paciente.nombre} fue actualizado correctamente`,
          'success'
        );
      });
  }
  
  buscar(termino: string): void {
    console.log(termino);
    if (termino.length === 0) {
        this.cargaPacientes(); // Recargar todos los pacientes si la búsqueda está vacía
        return;
    }

    this.BusquedasService.buscar('usuarios', termino)
    .subscribe(resp => {
      console.log("Respuesta completa:", resp);
      this.pacientes = resp; // Asignar los resultados de la búsqueda
      console.log("this.pacientes después de asignar:", this.pacientes);
    });           
}

editarUsuario(usuario: any) {
  console.log('este paciente',usuario);
  this.router.navigate(['/editar-usuario', usuario.rut]);
}



cambiarPagina(nuevoOffset: number) {
      
      this.desde = nuevoOffset;

      if( this.desde < 0){
        this.desde = 0;
      } else if( this.desde >= this.totalUsuarios ){ 
        this.desde -= nuevoOffset;
      }
      this.cargaPacientes();

    }




}
.cursor {
  cursor: pointer;
}

.icon-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-right: 5px;
}

/* Estilos para los botones */
.btn-group .btn {
  transition: all 0.3s ease;
}

/* Estilos para la tabla */
.table {
  width: 100%;
  table-layout: fixed;
  border-collapse: separate;
  border-spacing: 0;
}

.table th,
.table td {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  vertical-align: middle;
}

/* Mejoras para los botones de acción */
.btn-sm {
  padding: 0.25rem 0.5rem;
}

/* Estilos para las tarjetas */
.card {
  border-radius: 0.5rem;
  border: none;
  transition: all 0.3s ease;
}

.card-header {
  border-bottom: 1px solid rgba(0,0,0,0.1);
  padding: 1rem 1.5rem;
}

.shadow-sm {
  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
}

/* Estilo para la fila al pasar el mouse */
.table-hover tbody tr:hover {
  background-color: rgba(0, 123, 255, 0.05);
}

/* Estilo para los badges */
.badge {
  font-weight: 500;
  padding: 0.35em 0.65em;
}

/* Campos de selección */
.form-select-sm {
  padding: 0.25rem 2rem 0.25rem 0.5rem;
  font-size: 0.875rem;
  border-radius: 0.2rem;
}

.text-capitalize {
  text-transform: capitalize;
}<div class="row animated fadeIn fast">
  <div class="col-12">
      <div class="card shadow-sm">
          <div class="card-body">
            <div class="mb-3">
              <label for="searchPatient" class="form-label fw-bold text-primary">Buscar pacientes por nombre</label>
              <div class="input-group">
                <span class="input-group-text bg-light">
                  <i class="fa fa-search"></i>
                </span>
                <input type="text"
                       id="searchPatient"
                       class="form-control"
                       placeholder="Ingrese nombre del paciente..."
                       #txtTermino
                       (keyup)="buscar(txtTermino.value)"/>
              </div>
            </div>
          </div>
      </div>
  </div>
</div>

<div class="row mt-3">
  <div class="col-12">
      <div class="card shadow-sm">
          <div class="card-header bg-light">
              <div class="d-flex justify-content-between align-items-center">
                  <div>
                      <h4 class="card-title mb-0">Pacientes: <span class="badge bg-primary">{{ totalUsuarios }}</span></h4>
                      <p class="text-muted small mb-0">Pacientes registrados en el sistema</p>
                  </div>
                  <a class="btn btn-primary" routerLink="/agregar-paciente">
                      <i class="fa fa-plus-circle me-1"></i> Crear Paciente
                  </a>
              </div>
          </div>
          <div class="card-body p-0">
              <div class="table-responsive">
                <table class="table table-hover table-striped mb-0">
                  <thead class="bg-light text-dark">
                    <tr>
                      <th class="px-3 py-3" style="width: 15%;">RUT</th>
                      <th class="px-3 py-3" style="width: 10%;">Nombre</th>
                      <th class="px-3 py-3" style="width: 15%;">Apellidos</th>
                      <th class="px-3 py-3" style="width: 15%;">Email</th>
                      <th class="px-3 py-3" style="width: 15%;">Teléfono</th>
                      <th class="px-3 py-3" style="width: 15%;">Rol</th>
                      <th class="px-3 py-3 text-center" style="width: 10%;">Acciones</th>
                    </tr>
                  </thead>
                  
                  <tbody>
                    <tr *ngFor="let paciente of pacientes">
                      <td class="px-3 py-2 align-middle">{{ paciente.rut }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ paciente.nombre }}</td>
                      <td class="px-3 py-2 align-middle text-capitalize">{{ paciente.apellidos }}</td>
                      <td class="px-3 py-2 align-middle">{{ paciente.email }}</td>
                      <td class="px-3 py-2 align-middle">{{ paciente.telefono }}</td>
                      <td class="px-3 py-2 align-middle">
                          <select class="form-select form-select-sm"
                                 [(ngModel)]="paciente.rol"
                                 (change)="cambiarRole(paciente)">
                            <option value="ADMIN_ROLE">Administrador</option>
                            <option value="USER_ROLE">Usuario</option>
                          </select>
                      </td>
                      <td class="px-3 py-2 align-middle text-center">
                        <div class="btn-group" role="group">
                          <button type="button" class="btn btn-outline-primary btn-sm" 
                                  data-toggle="tooltip" title="Editar" 
                                  (click)="editarUsuario(paciente)">
                            <i class="fa fa-pencil"></i>
                          </button>
                          <button type="button" class="btn btn-outline-danger btn-sm" 
                                  data-toggle="tooltip" title="Eliminar" 
                                  (click)="borrarPaciente(paciente)">
                            <i class="fa fa-trash"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                    <tr *ngIf="pacientes.length === 0">
                      <td colspan="7" class="text-center py-4">
                        <div class="text-muted">
                          <i class="fa fa-info-circle me-1"></i> No se encontraron pacientes
                        </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
              
              <div class="p-3" *ngIf="txtTermino.value.length === 0">
                <app-paginator 
                  [totalItems]="totalUsuarios" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
          </div>
      </div>
  </div>
</div>.cursor {
  cursor: pointer;
}

.icon-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-right: 5px;
}

/* Estilos para los botones */
.btn-group .btn {
  transition: all 0.3s ease;
}

/* Estilos para la tabla */
.table {
  width: 100%;
  table-layout: fixed;
  border-collapse: separate;
  border-spacing: 0;
}

.table th,
.table td {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  vertical-align: middle;
}

/* Mejoras para los botones de acción */
.btn-sm {
  padding: 0.25rem 0.5rem;
}

/* Estilos para las tarjetas */
.card {
  border-radius: 0.5rem;
  border: none;
  transition: all 0.3s ease;
}

.card-header {
  border-bottom: 1px solid rgba(0,0,0,0.1);
  padding: 1rem 1.5rem;
}

.shadow-sm {
  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
}

/* Estilo para la fila al pasar el mouse */
.table-hover tbody tr:hover {
  background-color: rgba(0, 123, 255, 0.05);
}

/* Estilo para los badges */
.badge {
  font-weight: 500;
  padding: 0.35em 0.65em;
}

/* Campos de selección */
.form-select-sm {
  padding: 0.25rem 2rem 0.25rem 0.5rem;
  font-size: 0.875rem;
  border-radius: 0.2rem;
}

.text-capitalize {
  text-transform: capitalize;
}import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PacienteService } from '../../services/usuario.service';
import { Router } from '@angular/router';
import { Paciente, UsuariosResponse } from '../../interface/paciente';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';
import { AuthService } from '../../../../auth/services/auth.service';
import { Usuario } from '../../../../medicos/usuarios';

@Component({
  selector: 'app-gestionar-pacientes',
  templateUrl: './gestionar-pacientes.component.html',
  styleUrls: ['./gestionar-pacientes.component.scss']
})
export class GestionarPacientesComponent implements OnInit {
  
  pacientes: Paciente [] = [];
  public desde: number = 0;
  public totalUsuarios: number = 0;

  constructor(private PacienteService: PacienteService, private router: Router, private BusquedasService: BusquedasService, private AuthService: AuthService){}

  ngOnInit(){
    this.cargaPacientes();
  }


  cargaPacientes() {
    this.PacienteService.cargarPacientes(this.desde)
      .subscribe((response: UsuariosResponse) => { 
        this.totalUsuarios = response.total,
        this.pacientes = response.usuarios 

      });
  }

  borrarPaciente(paciente: Paciente) {
    if (this.AuthService.usuario.rut === paciente.rut) {
        Swal.fire('Operación no permitida', 'No puedes eliminarte a ti mismo.', 'error');
        return;
    }

    Swal.fire({
        title: `¿Estás seguro de querer eliminar a ${paciente.nombre}?`,
        text: "Esta acción eliminara todas las citas agendadas del paciente y sus historiales medicos.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Sí, eliminar',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.value) {
            this.PacienteService.borrarPaciente(paciente.rut).subscribe(
                (response) => {
                    Swal.fire('Eliminado!', response.msg, 'success');
                    this.cargaPacientes();
                },
                (error) => {
                    Swal.fire('Error', error.error.msg, 'error');
                }
            );
        }
    });
}

  
  

  cambiarRole(paciente: Paciente) {
    // Verificar si el paciente a editar es el mismo que el usuario autenticado
    if (this.AuthService.usuario.rut === paciente.rut) {
      Swal.fire(
        'Operación no permitida',
        'No puedes cambiar tu propio rol.',
        'error'
      );
      return; // Detener la ejecución si el usuario intenta cambiar su propio rol
    }
  
    // Si no es el mismo, proceder con la lógica de cambio de rol
    this.PacienteService.guardarUsuario(paciente)
      .subscribe(resp => {
        console.log(resp);
        Swal.fire(
          'Rol actualizado',
          `El rol de ${paciente.nombre} fue actualizado correctamente`,
          'success'
        );
      });
  }
  
  buscar(termino: string): void {
    console.log(termino);
    if (termino.length === 0) {
        this.cargaPacientes(); // Recargar todos los pacientes si la búsqueda está vacía
        return;
    }

    this.BusquedasService.buscar('usuarios', termino)
    .subscribe(resp => {
      console.log("Respuesta completa:", resp);
      this.pacientes = resp; // Asignar los resultados de la búsqueda
      console.log("this.pacientes después de asignar:", this.pacientes);
    });           
}

editarUsuario(usuario: any) {
  console.log('este paciente',usuario);
  this.router.navigate(['/editar-usuario', usuario.rut]);
}



cambiarPagina(nuevoOffset: number) {
      
      this.desde = nuevoOffset;

      if( this.desde < 0){
        this.desde = 0;
      } else if( this.desde >= this.totalUsuarios ){ 
        this.desde -= nuevoOffset;
      }
      this.cargaPacientes();

    }




}

<div class="alert alert-warning" role="alert">
  Si no tienes médicos registrados en la aplicación o no sabes qué días trabajan tus médicos 
  <button class="btn btn-info" (click)="irAGestionarHorarios()">Revisa los horarios aquí</button>
</div>


<form (ngSubmit)="guardarCita()">

  <!-- Motivo de la cita -->


 <!-- Paciente -->
 <div class="form-group mb-3">
  <label for="paciente">Paciente</label>
  <select class="form-control" id="paciente" [(ngModel)]="selectedPaciente" name="paciente">
    <option value="" disabled>Seleccione un paciente</option>
    <option *ngFor="let paciente of pacientes" [value]="paciente.rut">{{ paciente.nombre }} {{ paciente.apellidos }}</option>
  </select>
</div>

<!-- Especialidad Médica -->
<div class="form-group mb-3">
  <label for="especialidad">Especialidad</label>
  <select class="form-control" id="especialidad" [(ngModel)]="selectedEspecialidad" (change)="onChangeData()" name="especialidad">
    <option value="" disabled selected>Seleccione una especialidad</option>
    <option *ngFor="let especialidad of especialidades" [value]="especialidad.especialidad_medica">{{ especialidad.especialidad_medica }}</option>
  </select>
</div>

  
<div class="form-group mb-3">
  <label for="fecha">Fecha de cita</label>
  <input type="date" class="form-control" id="fecha" [(ngModel)]="selectedDate" (change)="onChangeData()" name="fecha">
</div>

  
<div class="form-group mb-3" *ngIf="medicosDisponibles && medicosDisponibles.length">
  <label for="medico">Médicos disponibles</label>
  <select class="form-control" id="medico" [(ngModel)]="selectedMedico" name="medico" (change)="onMedicoSelected($event)">
    <option *ngFor="let medico of medicosDisponibles" [ngValue]="medico">{{ medico.medicoNombre }} {{ medico.idTipoCita }}  ({{ medico.hora_inicio }} - {{ medico.hora_fin }})</option>
  </select>
  
</div>
<div *ngIf="selectedMedico && selectedMedico.rutMedico">
  
  <p>Nombre del Médico: {{ selectedMedico.medicoNombre }}</p>
  <p>Horario: {{ selectedMedico.hora_inicio }} - {{ selectedMedico.hora_fin }}</p>
 
</div>


<button type="submit" class="btn btn-primary" [disabled]="!formularioValido()">Guardar Cita</button>




</form>

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { CitaMedicaService } from '../../services/cita-medica.service';
import { CitasResponse } from '../../interface/cita_medica';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { PacienteService } from '../../services/usuario.service';
import { MedicoService } from '../../services/medico.service';
import { TipoCitaService } from '../../services/tipo-cita.service';
import { MedicoResponse } from '../../interface/medicos';
import { UsuariosResponse } from '../../interface/paciente';
import { tipoCitaResponse } from '../../interface/tipoCita';
import { HorarioMedicoService } from '../../services/horario-medico.service';
import { CitasResponsex } from '../../interface/cita_medicaResponse';

export interface Especialidad {
  especialidad_medica: string;
}


@Component({
  selector: 'app-agregar-cita-medica',
  templateUrl: './agregar-cita-medica.component.html',
  styleUrls: ['./agregar-cita-medica.component.scss']
})
export class AgregarCitaMedicaComponent implements OnInit {
  
        motivo: string = '';
        formulario!: FormGroup;
        public pacientes: any[] = [];
      public medicos: any[] = [];
      public tiposCita: any[] = [];
      horaInicio: string = '';
      horaFin: string = '';

      tiposCitax = ['Consulta general', 'Especialidad médica'];
      selectedTipoCita!: string;
      especialidades: Especialidad[] = [];
      selectedEspecialidad: string = '';  

      selectedDate!: string; 
        
      medicosDisponibles: any[] = [];
      selectedMedico: any;
      selectedPaciente: string = ''; 
      idTipo!: number;




  constructor(private fb: FormBuilder, private citaMedicaService: CitaMedicaService, private router: Router, private PacienteService: PacienteService, private TipoCitaService: TipoCitaService, private MedicoService: MedicoService, private HorarioMedicoService: HorarioMedicoService) { }

  ngOnInit(): void {
    this.formulario= this.fb.group({
      motivo: ['', [Validators.required]],
      rut_paciente: ['', [Validators.required]],
      rut_medico: ['', [Validators.required]],
      fecha: ['', [Validators.required]],
      hora_inicio: ['', [Validators.required]],
      hora_fin: ['', [Validators.required]],
      estado: ['', [Validators.required]],
      descripcion: ['', [Validators.required]],
      idTipoCita: ['', [Validators.required]],
    });
    this.selectedMedico = {};
   this.cargaMedicos();
   this.cargaPacientes();
    this.cargaTipocita();
    this.cargaEspecialidades();
  }

  onMedicoSelected(event: any): void {
   
    console.log('AQUI ESTA EL MEDICO SELECCIONADO',this.selectedMedico);
    if (this.selectedMedico) {
      this.horaInicio = this.selectedMedico.hora_inicio;
      this.horaFin = this.selectedMedico.hora_fin;
      this.idTipo = this.selectedMedico.idTipoCita;
    }
  }
  irAGestionarHorarios() {
    this.router.navigate(['/gestionar-horarios-medicos']);
  }
  


  guardarCita() {
    const nuevaCita: CitasResponsex = {
      cita: {
        idCita: 0,
        motivo: this.motivo,
        fecha: this.selectedDate,
        hora_inicio: this.horaInicio,
        hora_fin: this.horaFin,
        rut_paciente: this.selectedPaciente,
        rut_medico: this.selectedMedico.rutMedico,
        tipo_cita: this.selectedTipoCita,
        idTipoCita: this.idTipo,
        estado: 'en_curso'
      }
    };
    console.log('aqui esta la nueva cita',nuevaCita);
  
    this.citaMedicaService.crearCitaMedica(nuevaCita).subscribe(
      response => {
        Swal.fire('Exito', 'Cita creada exitosamente!', 'success');
        this.router.navigateByUrl('/gestionar-cita');
      },
      error => {
        // Verifica si el error es específicamente por falta de médicos disponibles
        if (error.error && error.error.msg) {
          Swal.fire('Error', error.error.msg, 'error');
        } else {
          // Mensaje de error genérico si no es por falta de médicos disponibles
          Swal.fire('Error', 'Hubo un error al guardar la cita', 'error');
        }
      }
    );
  }
  
  
  onTipoCitaChange(event: any) {
    if (event.target.value === 'Especialidad médica') {
      this.cargaEspecialidades();
    } else {
      this.onChangeData();  // Llama a onChangeData cuando se selecciona "Consulta general"
    }
  }
  
  formatDate(dateString: string): string {
    const days = ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"];
    const months = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];

    const date = new Date(dateString);
    const dayName = days[date.getDay()];
    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear();

    return `${dayName} ${day} de ${month} del ${year}`;
}

formularioValido(): boolean {
  return this.selectedPaciente && this.selectedEspecialidad &&
         this.selectedDate && this.selectedMedico && this.selectedMedico.rutMedico;
}



  onChangeData() {
    console.log('onChangeData fue llamada');
    console.log('selectedEspecialidad:', this.selectedEspecialidad);
    console.log('selectedDate aqui esta la fecha seleccionada:', this.selectedDate);
    console.log('selectedMedico', this.selectedMedico);
  
    this.motivo = this.selectedEspecialidad;
    this.medicosDisponibles = [];
  
    let formData: any = {
        fecha: this.selectedDate,
        especialidad: this.motivo
    };

    console.log('este es el motivo', this.motivo);

    const selectedDateObj = new Date(this.selectedDate);
    const currentDate = new Date();
    currentDate.setHours(0, 0, 0, 0); // Establecer la hora actual a medianoche

    // Verifica si la fecha seleccionada es en el pasado o es hoy
    if (selectedDateObj < currentDate) {
        Swal.fire('Error', 'No puede seleccionar una fecha pasada para la cita o el dia actual.', 'error');
        return; // Detiene la ejecución posterior
    } else if (selectedDateObj.getTime() === currentDate.getTime()) {
        Swal.fire('Advertencia', 'Ha seleccionado el día actual. Verifique la disponibilidad de los médicos para hoy.', 'warning');
    }

    if (this.selectedDate) {
        console.log('ESTa es la fecha selecccionada', this.selectedDate);

        this.HorarioMedicoService.buscarHorarioDisponible(formData).subscribe(
            (response) => {
                this.medicosDisponibles = response.bloques;
                console.log('ARRAY DE MEDICOS DISPONIBLES',this.medicosDisponibles)
                this.medicosDisponibles.forEach((medico) => {
                  console.log('RUT del médico:', medico.rutMedico);
                });
                
           
                if (this.medicosDisponibles.length === 0) {
                  const formattedDate = this.formatDate(this.selectedDate);
                  Swal.fire('Información', `No hay médicos disponibles para el ${formattedDate}, para saber en qué horario trabajan sus médicos consulte sus horarios`, 'info');
              }
            },
            (error) => {
                console.error('Error obteniendo médicos disponibles:', error);
                Swal.fire('Error', 'Error obteniendo médicos disponibles', 'error');
            }
        );
    }
}

  





  cargaEspecialidades() {
    this.TipoCitaService.cargaEspecialidades().subscribe(data => {
      console.log(data)
      this.especialidades = data.especialidades;
    });
  }



  cargaMedicos() {
    this.MedicoService.cargarMedicos()
      .subscribe((response: MedicoResponse) => { 
        this.medicos = response.medicos; 

      });
  }

  cargaTipocita() {
    this.TipoCitaService.cargaTipocita()
      .subscribe((response: tipoCitaResponse) => {
        console.log('aqui estan los pacientes que se cargan',response);
        this.tiposCita = response.tipo_cita; // Asigna el arreglo tipo_cita de la respuesta a tiposCitas

      });
  }

  cargaPacientes() {
    this.PacienteService.cargarAllPacientes()
      .subscribe((response: UsuariosResponse) => { 
        console.log('aqui esta la respuesta',response);
        this.pacientes = response.usuarios // Asignar la propiedad 'medicos' de la respuesta al arreglo 'medicos'
        console.log('aqui estan los pacientes',this.pacientes);
      });
  }

}

<div class="alert alert-warning" role="alert">
  Si no tienes médicos registrados en la aplicación o no sabes qué días trabajan tus médicos 
  <button class="btn btn-info" (click)="irAGestionarHorarios()">Revisa los horarios aquí</button>
</div>


<form (ngSubmit)="guardarCita()">

  <!-- Motivo de la cita -->


 <!-- Paciente -->
 <div class="form-group mb-3">
  <label for="paciente">Paciente</label>
  <select class="form-control" id="paciente" [(ngModel)]="selectedPaciente" name="paciente">
    <option value="" disabled>Seleccione un paciente</option>
    <option *ngFor="let paciente of pacientes" [value]="paciente.rut">{{ paciente.nombre }} {{ paciente.apellidos }}</option>
  </select>
</div>

<!-- Especialidad Médica -->
<div class="form-group mb-3">
  <label for="especialidad">Especialidad</label>
  <select class="form-control" id="especialidad" [(ngModel)]="selectedEspecialidad" (change)="onChangeData()" name="especialidad">
    <option value="" disabled selected>Seleccione una especialidad</option>
    <option *ngFor="let especialidad of especialidades" [value]="especialidad.especialidad_medica">{{ especialidad.especialidad_medica }}</option>
  </select>
</div>

  
<div class="form-group mb-3">
  <label for="fecha">Fecha de cita</label>
  <input type="date" class="form-control" id="fecha" [(ngModel)]="selectedDate" (change)="onChangeData()" name="fecha">
</div>

  
<div class="form-group mb-3" *ngIf="medicosDisponibles && medicosDisponibles.length">
  <label for="medico">Médicos disponibles</label>
  <select class="form-control" id="medico" [(ngModel)]="selectedMedico" name="medico" (change)="onMedicoSelected($event)">
    <option *ngFor="let medico of medicosDisponibles" [ngValue]="medico">{{ medico.medicoNombre }} {{ medico.idTipoCita }}  ({{ medico.hora_inicio }} - {{ medico.hora_fin }})</option>
  </select>
  
</div>
<div *ngIf="selectedMedico && selectedMedico.rutMedico">
  
  <p>Nombre del Médico: {{ selectedMedico.medicoNombre }}</p>
  <p>Horario: {{ selectedMedico.hora_inicio }} - {{ selectedMedico.hora_fin }}</p>
 
</div>


<button type="submit" class="btn btn-primary" [disabled]="!formularioValido()">Guardar Cita</button>




</form>

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { CitaMedicaService } from '../../services/cita-medica.service';
import { CitasResponse } from '../../interface/cita_medica';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { PacienteService } from '../../services/usuario.service';
import { MedicoService } from '../../services/medico.service';
import { TipoCitaService } from '../../services/tipo-cita.service';
import { MedicoResponse } from '../../interface/medicos';
import { UsuariosResponse } from '../../interface/paciente';
import { tipoCitaResponse } from '../../interface/tipoCita';
import { HorarioMedicoService } from '../../services/horario-medico.service';
import { CitasResponsex } from '../../interface/cita_medicaResponse';

export interface Especialidad {
  especialidad_medica: string;
}


@Component({
  selector: 'app-agregar-cita-medica',
  templateUrl: './agregar-cita-medica.component.html',
  styleUrls: ['./agregar-cita-medica.component.scss']
})
export class AgregarCitaMedicaComponent implements OnInit {
  
        motivo: string = '';
        formulario!: FormGroup;
        public pacientes: any[] = [];
      public medicos: any[] = [];
      public tiposCita: any[] = [];
      horaInicio: string = '';
      horaFin: string = '';

      tiposCitax = ['Consulta general', 'Especialidad médica'];
      selectedTipoCita!: string;
      especialidades: Especialidad[] = [];
      selectedEspecialidad: string = '';  

      selectedDate!: string; 
        
      medicosDisponibles: any[] = [];
      selectedMedico: any;
      selectedPaciente: string = ''; 
      idTipo!: number;




  constructor(private fb: FormBuilder, private citaMedicaService: CitaMedicaService, private router: Router, private PacienteService: PacienteService, private TipoCitaService: TipoCitaService, private MedicoService: MedicoService, private HorarioMedicoService: HorarioMedicoService) { }

  ngOnInit(): void {
    this.formulario= this.fb.group({
      motivo: ['', [Validators.required]],
      rut_paciente: ['', [Validators.required]],
      rut_medico: ['', [Validators.required]],
      fecha: ['', [Validators.required]],
      hora_inicio: ['', [Validators.required]],
      hora_fin: ['', [Validators.required]],
      estado: ['', [Validators.required]],
      descripcion: ['', [Validators.required]],
      idTipoCita: ['', [Validators.required]],
    });
    this.selectedMedico = {};
   this.cargaMedicos();
   this.cargaPacientes();
    this.cargaTipocita();
    this.cargaEspecialidades();
  }

  onMedicoSelected(event: any): void {
   
    console.log('AQUI ESTA EL MEDICO SELECCIONADO',this.selectedMedico);
    if (this.selectedMedico) {
      this.horaInicio = this.selectedMedico.hora_inicio;
      this.horaFin = this.selectedMedico.hora_fin;
      this.idTipo = this.selectedMedico.idTipoCita;
    }
  }
  irAGestionarHorarios() {
    this.router.navigate(['/gestionar-horarios-medicos']);
  }
  


  guardarCita() {
    const nuevaCita: CitasResponsex = {
      cita: {
        idCita: 0,
        motivo: this.motivo,
        fecha: this.selectedDate,
        hora_inicio: this.horaInicio,
        hora_fin: this.horaFin,
        rut_paciente: this.selectedPaciente,
        rut_medico: this.selectedMedico.rutMedico,
        tipo_cita: this.selectedTipoCita,
        idTipoCita: this.idTipo,
        estado: 'en_curso'
      }
    };
    console.log('aqui esta la nueva cita',nuevaCita);
  
    this.citaMedicaService.crearCitaMedica(nuevaCita).subscribe(
      response => {
        Swal.fire('Exito', 'Cita creada exitosamente!', 'success');
        this.router.navigateByUrl('/gestionar-cita');
      },
      error => {
        // Verifica si el error es específicamente por falta de médicos disponibles
        if (error.error && error.error.msg) {
          Swal.fire('Error', error.error.msg, 'error');
        } else {
          // Mensaje de error genérico si no es por falta de médicos disponibles
          Swal.fire('Error', 'Hubo un error al guardar la cita', 'error');
        }
      }
    );
  }
  
  
  onTipoCitaChange(event: any) {
    if (event.target.value === 'Especialidad médica') {
      this.cargaEspecialidades();
    } else {
      this.onChangeData();  // Llama a onChangeData cuando se selecciona "Consulta general"
    }
  }
  
  formatDate(dateString: string): string {
    const days = ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"];
    const months = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];

    const date = new Date(dateString);
    const dayName = days[date.getDay()];
    const day = date.getDate();
    const month = months[date.getMonth()];
    const year = date.getFullYear();

    return `${dayName} ${day} de ${month} del ${year}`;
}

formularioValido(): boolean {
  return this.selectedPaciente && this.selectedEspecialidad &&
         this.selectedDate && this.selectedMedico && this.selectedMedico.rutMedico;
}



  onChangeData() {
    console.log('onChangeData fue llamada');
    console.log('selectedEspecialidad:', this.selectedEspecialidad);
    console.log('selectedDate aqui esta la fecha seleccionada:', this.selectedDate);
    console.log('selectedMedico', this.selectedMedico);
  
    this.motivo = this.selectedEspecialidad;
    this.medicosDisponibles = [];
  
    let formData: any = {
        fecha: this.selectedDate,
        especialidad: this.motivo
    };

    console.log('este es el motivo', this.motivo);

    const selectedDateObj = new Date(this.selectedDate);
    const currentDate = new Date();
    currentDate.setHours(0, 0, 0, 0); // Establecer la hora actual a medianoche

    // Verifica si la fecha seleccionada es en el pasado o es hoy
    if (selectedDateObj < currentDate) {
        Swal.fire('Error', 'No puede seleccionar una fecha pasada para la cita o el dia actual.', 'error');
        return; // Detiene la ejecución posterior
    } else if (selectedDateObj.getTime() === currentDate.getTime()) {
        Swal.fire('Advertencia', 'Ha seleccionado el día actual. Verifique la disponibilidad de los médicos para hoy.', 'warning');
    }

    if (this.selectedDate) {
        console.log('ESTa es la fecha selecccionada', this.selectedDate);

        this.HorarioMedicoService.buscarHorarioDisponible(formData).subscribe(
            (response) => {
                this.medicosDisponibles = response.bloques;
                console.log('ARRAY DE MEDICOS DISPONIBLES',this.medicosDisponibles)
                this.medicosDisponibles.forEach((medico) => {
                  console.log('RUT del médico:', medico.rutMedico);
                });
                
           
                if (this.medicosDisponibles.length === 0) {
                  const formattedDate = this.formatDate(this.selectedDate);
                  Swal.fire('Información', `No hay médicos disponibles para el ${formattedDate}, para saber en qué horario trabajan sus médicos consulte sus horarios`, 'info');
              }
            },
            (error) => {
                console.error('Error obteniendo médicos disponibles:', error);
                Swal.fire('Error', 'Error obteniendo médicos disponibles', 'error');
            }
        );
    }
}

  





  cargaEspecialidades() {
    this.TipoCitaService.cargaEspecialidades().subscribe(data => {
      console.log(data)
      this.especialidades = data.especialidades;
    });
  }



  cargaMedicos() {
    this.MedicoService.cargarMedicos()
      .subscribe((response: MedicoResponse) => { 
        this.medicos = response.medicos; 

      });
  }

  cargaTipocita() {
    this.TipoCitaService.cargaTipocita()
      .subscribe((response: tipoCitaResponse) => {
        console.log('aqui estan los pacientes que se cargan',response);
        this.tiposCita = response.tipo_cita; // Asigna el arreglo tipo_cita de la respuesta a tiposCitas

      });
  }

  cargaPacientes() {
    this.PacienteService.cargarAllPacientes()
      .subscribe((response: UsuariosResponse) => { 
        console.log('aqui esta la respuesta',response);
        this.pacientes = response.usuarios // Asignar la propiedad 'medicos' de la respuesta al arreglo 'medicos'
        console.log('aqui estan los pacientes',this.pacientes);
      });
  }

}


<div class="row animated fadeIn fast"
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <p style="font-weight: bold; color: #3336ff;">Busca citas medicas por nombre del paciente o nombre del medico...</p>
                <input type="text"
                        class="form-control"
                        placeholder="Buscar Citas medica..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )"/>

            </div>
        </div>
    </div>
</div>  

                    <!--BOTON DE CREAR MEDICO-->
                    <div class="col">
                        <div class="text-right">
                            <a class="btn btn-primary"
                               routerLink="/agregar-cita">
                                <i class="fa fa-hospital-o"></i> 
                                Crear cita Medica
                            </a>
                        </div>
                    </div>

         


<div class="row animated fadeIn fast"> 
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Total de Citas medica: </h4>
                <h6 class="card-subtitle">Citas registrados en mi aplicacion ({{totalCitas}})</h6>
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                              <th style="width: 8%;">Id</th>
                              <th style="width: 12%;">Fecha</th>
                              <th style="width: 20%;">Paciente</th>
                              <th style="width: 20%;">Médico</th>
                              <th style="width: 15%;">Tipo de cita</th>
                              <th style="width: 10%;">Estado</th>
                              <th style="width: 10%;">Hora inicio</th>
                              <th style="width: 10%;">Hora fin</th>
                              <th style="width: 10%;">Acciones</th>
                            </tr>
                          </thead>
                          
                        <tbody>
                            <tr *ngFor="let cita of citas">
                               
                                <th>{{ cita.idCita }}</th>
                                <td>{{ cita.fecha | date: 'MMM d, y' }}</td>
                                <td>{{ cita.paciente.nombre + ' ' + cita.paciente.apellidos }}</td>
                                <td>{{ cita.medico.nombre + ' ' + cita.medico.apellidos }}</td>

                                <td>{{ cita.motivo }}</td>

                                <select class="form-control" [(ngModel)]="cita.estado" (change)="cambioEstado(cita)">
                                    <option value="en_curso">En Curso</option>
                                    <option value="terminado">Terminado</option>
                                    <option value="no_asistio">No Asistió</option>
                                    <option value="pagado">Pagado</option>
                                    <option value="no_pagado">no Pagado</option>
                                    <option value="cancelada">cancelada</option>
                                 
                                </select>
                                
                                  
                                <td>{{ cita.hora_inicio }}</td>
                                <td>{{ cita.hora_fin }}</td>
                                <td class="text-nowrap text-center">
                                    
                                    <a data-toggle="tooltip"
                                       data-original-title="Borrar"
                                       class="cursor"
                                       (click)="borrarCita(cita)">
                                        <i class="fa fa-close text-danger"></i>
                                    </a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                    <app-paginator 
                    [totalItems]="totalCitas" 
                    [(offset)]="desde" 
                    [pageSize]="5"
                    (offsetChange)="cambiarPagina($event)">
                  </app-paginator>
                </div>
            </div>
        </div>
    </div>

</div>



import { Component, OnInit } from '@angular/core';
import { BusquedasService } from '../../services/busquedas.service';
import { CitaMedica, CitasResponse } from '../../interface/cita_medica';
import { CitaMedicaService } from '../../services/cita-medica.service';
import Swal from 'sweetalert2';
@Component({
  selector: 'app-gestionar-citas-medicas',
  templateUrl: './gestionar-citas-medicas.component.html',
  styleUrls: ['./gestionar-citas-medicas.component.scss']
})
export class GestionarCitasMedicasComponent implements OnInit {

  public citas: CitaMedica[] = [];
  public desde: number = 0;
 
  public mostrarEspecialidad: boolean = false;
  public totalCitas: number = 0;


  // Agrega una función para cambiar el filtro


    constructor(private BusquedasService: BusquedasService, private CitaMedicaService: CitaMedicaService){}

    ngOnInit(): void {
      this.cargarCitas();
    }
  
    buscar(termino: string): void {
      if (termino.length === 0) {
        this.cargarCitas(); // Recargar todas las citas si la búsqueda está vacía
        return;
      }
    
      this.BusquedasService.buscar('cita_medica', termino)
        .subscribe((resp: any) => {
          this.citas = resp.citas; 
          console.log(this.citas);
        });  
    }
    

borrarCita( cita: any ) {

  Swal.fire({
    title: '¿Borrar Horario?',
    text: `Esta seguro que desea eliminar esta cita?`,
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'Si, borrarlo'
  }).then((result) => {
    if (result.value) {
      
      this.CitaMedicaService.borrarCitaMedica( cita.idCita )
        .subscribe( resp => {
          
          this.cargarCitas()
          Swal.fire(
            'Horario borrado',
            `Horario ${ cita.idCita } fue eliminado correctamente`,
            'success'
          );
          
        });

    }
  })

}

cargarCitas() {
  this.CitaMedicaService.cargarCitaMedica(this.desde)
    .subscribe((response: CitasResponse) => { 
      this.totalCitas = response.total ?? this.citas.length; 
      this.citas = response.citas; 
     

    });
}

cambioEstado(cita: any) {
  this.CitaMedicaService.actualizarCita(cita.idCita, { estado: cita.estado })
    .subscribe(response => {
      console.log('Cita actualizada:', response);
      Swal.fire({
        icon: 'success',
        title: '¡Hecho!',
        text: 'Cita actualizada correctamente.',
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'Aceptar'
      });
    }, error => {
      console.error('Error al actualizar cita:', error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Hubo un error al actualizar la cita.',
        confirmButtonColor: '#d33',
        confirmButtonText: 'Intentar de nuevo'
      });
    });
}

cambiarPagina(nuevoOffset: number) {
  this.desde = nuevoOffset;
  console.log(this.totalCitas);
  if( this.desde < 0){ 
    this.desde = 0;
  } else if( this.desde >= this.totalCitas ){ 
    this.desde -= nuevoOffset;
  }
  this.cargarCitas(); 
}

}
.cursor {
    cursor: pointer;
}

/* Fuerza un layout fijo en la tabla */
table {
    width: 100%;
    table-layout: fixed;
  }
  
  /* Evita que el contenido se desborde y agrega puntos suspensivos */
  table th,
  table td {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  

<div class="row animated fadeIn fast"
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <p style="font-weight: bold; color: #3336ff;">Busca citas medicas por nombre del paciente o nombre del medico...</p>
                <input type="text"
                        class="form-control"
                        placeholder="Buscar Citas medica..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )"/>

            </div>
        </div>
    </div>
</div>  

                    <!--BOTON DE CREAR MEDICO-->
                    <div class="col">
                        <div class="text-right">
                            <a class="btn btn-primary"
                               routerLink="/agregar-cita">
                                <i class="fa fa-hospital-o"></i> 
                                Crear cita Medica
                            </a>
                        </div>
                    </div>

         


<div class="row animated fadeIn fast"> 
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Total de Citas medica: </h4>
                <h6 class="card-subtitle">Citas registrados en mi aplicacion ({{totalCitas}})</h6>
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                              <th style="width: 8%;">Id</th>
                              <th style="width: 12%;">Fecha</th>
                              <th style="width: 20%;">Paciente</th>
                              <th style="width: 20%;">Médico</th>
                              <th style="width: 15%;">Tipo de cita</th>
                              <th style="width: 10%;">Estado</th>
                              <th style="width: 10%;">Hora inicio</th>
                              <th style="width: 10%;">Hora fin</th>
                              <th style="width: 10%;">Acciones</th>
                            </tr>
                          </thead>
                          
                        <tbody>
                            <tr *ngFor="let cita of citas">
                               
                                <th>{{ cita.idCita }}</th>
                                <td>{{ cita.fecha | date: 'MMM d, y' }}</td>
                                <td>{{ cita.paciente.nombre + ' ' + cita.paciente.apellidos }}</td>
                                <td>{{ cita.medico.nombre + ' ' + cita.medico.apellidos }}</td>

                                <td>{{ cita.motivo }}</td>

                                <select class="form-control" [(ngModel)]="cita.estado" (change)="cambioEstado(cita)">
                                    <option value="en_curso">En Curso</option>
                                    <option value="terminado">Terminado</option>
                                    <option value="no_asistio">No Asistió</option>
                                    <option value="pagado">Pagado</option>
                                    <option value="no_pagado">no Pagado</option>
                                    <option value="cancelada">cancelada</option>
                                 
                                </select>
                                
                                  
                                <td>{{ cita.hora_inicio }}</td>
                                <td>{{ cita.hora_fin }}</td>
                                <td class="text-nowrap text-center">
                                    
                                    <a data-toggle="tooltip"
                                       data-original-title="Borrar"
                                       class="cursor"
                                       (click)="borrarCita(cita)">
                                        <i class="fa fa-close text-danger"></i>
                                    </a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                    <app-paginator 
                    [totalItems]="totalCitas" 
                    [(offset)]="desde" 
                    [pageSize]="5"
                    (offsetChange)="cambiarPagina($event)">
                  </app-paginator>
                </div>
            </div>
        </div>
    </div>

</div>



.cursor {
    cursor: pointer;
}

/* Fuerza un layout fijo en la tabla */
table {
    width: 100%;
    table-layout: fixed;
  }
  
  /* Evita que el contenido se desborde y agrega puntos suspensivos */
  table th,
  table td {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  import { Component, OnInit } from '@angular/core';
import { BusquedasService } from '../../services/busquedas.service';
import { CitaMedica, CitasResponse } from '../../interface/cita_medica';
import { CitaMedicaService } from '../../services/cita-medica.service';
import Swal from 'sweetalert2';
@Component({
  selector: 'app-gestionar-citas-medicas',
  templateUrl: './gestionar-citas-medicas.component.html',
  styleUrls: ['./gestionar-citas-medicas.component.scss']
})
export class GestionarCitasMedicasComponent implements OnInit {

  public citas: CitaMedica[] = [];
  public desde: number = 0;
 
  public mostrarEspecialidad: boolean = false;
  public totalCitas: number = 0;


  // Agrega una función para cambiar el filtro


    constructor(private BusquedasService: BusquedasService, private CitaMedicaService: CitaMedicaService){}

    ngOnInit(): void {
      this.cargarCitas();
    }
  
    buscar(termino: string): void {
      if (termino.length === 0) {
        this.cargarCitas(); // Recargar todas las citas si la búsqueda está vacía
        return;
      }
    
      this.BusquedasService.buscar('cita_medica', termino)
        .subscribe((resp: any) => {
          this.citas = resp.citas; 
          console.log(this.citas);
        });  
    }
    

borrarCita( cita: any ) {

  Swal.fire({
    title: '¿Borrar Horario?',
    text: `Esta seguro que desea eliminar esta cita?`,
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'Si, borrarlo'
  }).then((result) => {
    if (result.value) {
      
      this.CitaMedicaService.borrarCitaMedica( cita.idCita )
        .subscribe( resp => {
          
          this.cargarCitas()
          Swal.fire(
            'Horario borrado',
            `Horario ${ cita.idCita } fue eliminado correctamente`,
            'success'
          );
          
        });

    }
  })

}

cargarCitas() {
  this.CitaMedicaService.cargarCitaMedica(this.desde)
    .subscribe((response: CitasResponse) => { 
      this.totalCitas = response.total ?? this.citas.length; 
      this.citas = response.citas; 
     

    });
}

cambioEstado(cita: any) {
  this.CitaMedicaService.actualizarCita(cita.idCita, { estado: cita.estado })
    .subscribe(response => {
      console.log('Cita actualizada:', response);
      Swal.fire({
        icon: 'success',
        title: '¡Hecho!',
        text: 'Cita actualizada correctamente.',
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'Aceptar'
      });
    }, error => {
      console.error('Error al actualizar cita:', error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Hubo un error al actualizar la cita.',
        confirmButtonColor: '#d33',
        confirmButtonText: 'Intentar de nuevo'
      });
    });
}

cambiarPagina(nuevoOffset: number) {
  this.desde = nuevoOffset;
  console.log(this.totalCitas);
  if( this.desde < 0){ 
    this.desde = 0;
  } else if( this.desde >= this.totalCitas ){ 
    this.desde -= nuevoOffset;
  }
  this.cargarCitas(); 
}

}
<button type="button" class="btn btn-secondary btn-block mt-3" (click)="regresar()">Regresar a Horarios Médicos</button>

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <h2 class="text-center mb-4">
        {{ isEditMode ? 'Editar Horario Médico' : 'Formulario de Registro de Horario Médico' }}
      </h2>
      <div style="background-color: #ffcc00; color: #333; padding: 10px; border-radius: 5px; margin: 20px 0; border: 1px solid #ffa500;">
        <strong>Advertencia:</strong> Por favor, asegúrese de haber completado el formulario de Tipo de Cita para que los médicos con sus especialidades se muestren correctamente en este formulario.
      </div>
      
      <form [formGroup]="horarioMedicoForm" (ngSubmit)="onSubmit()">
        <div class="form-group mt-3">
          <label for="diaSemana">Día de la Semana</label>
          <select class="form-control" id="diaSemana" formControlName="diaSemana">
            <option value="">Seleccione día de la semana</option>
            <option value="lunes">Lunes</option>
            <option value="martes">Martes</option>
            <option value="miercoles">Miércoles</option>
            <option value="jueves">Jueves</option>
            <option value="viernes">Viernes</option>
            <option value="sabado">Sábado</option>
            <option value="domingo">Domingo</option>
          </select>
          <div *ngIf="horarioMedicoForm.controls['diaSemana'].touched && horarioMedicoForm.controls['diaSemana'].hasError('required')" class="text-danger">
            Este campo es obligatorio.
          </div>
        </div>

        <div class="form-group mt-3">
          <label for="horaInicio">Hora de Inicio</label>
          <input type="time" class="form-control" id="horaInicio" formControlName="horaInicio" placeholder="08:00:00">
          <div *ngIf="horarioMedicoForm.controls['horaInicio'].touched && horarioMedicoForm.controls['horaInicio'].hasError('required')" class="text-danger">
            Este campo es obligatorio.
          </div>
        </div>

        <div class="form-group mt-3">
          <label for="horaFinalizacion">Hora de Finalización</label>
          <input type="time" class="form-control" id="horaFinalizacion" formControlName="horaFinalizacion" placeholder="12:00:00">
          <div *ngIf="horarioMedicoForm.controls['horaFinalizacion'].touched && horarioMedicoForm.controls['horaFinalizacion'].hasError('required')" class="text-danger">
            Este campo es obligatorio.
          </div>
        </div>

        <div *ngIf="horarioMedicoForm.errors?.['horarioLaboralInvalido']" class="text-danger">
          La hora de inicio debe ser anterior a la hora de finalización.
        </div>

        <div class="form-group mt-3">
          <label for="inicioColacion">Hora de Inicio de Colación</label>
          <input type="time" class="form-control" id="inicioColacion" formControlName="inicio_colacion">
          <div *ngIf="horarioMedicoForm.errors?.['horarioColacionFuera']" class="text-danger">
            El horario de colación debe estar dentro del horario laboral.
          </div>
        </div>

        <div class="form-group mt-3">
          <label for="finColacion">Hora de Fin de Colación</label>
          <input type="time" class="form-control" id="finColacion" formControlName="fin_colacion">
          <div *ngIf="horarioMedicoForm.errors?.['horarioColacionFuera']" class="text-danger">
            El horario de colación debe estar dentro del horario laboral.
          </div>
          <div *ngIf="horarioMedicoForm.errors?.['colacionInvalida']" class="text-danger">
            La hora de inicio de colación debe ser anterior a la hora de fin de colación.
          </div>
        </div>

        <div class="form-group">
          <label for="rutMedico">Médico</label>
          <select class="form-control" id="rutMedico" formControlName="rut_medico" required>
            <option value="">Selecciona un médico</option>
            <option *ngFor="let medico of medicos" [value]="medico.rut">
              {{ medico.nombre }} {{ medico.apellidos }} (Especialidad: {{ medico.especialidad_medica }})
            </option>
          </select>
        </div>

        <button type="submit" class="btn btn-primary btn-block mt-3" [disabled]="!horarioMedicoForm.valid">
          {{ isEditMode ? 'Guardar Cambios' : 'Registrar Horario Médico' }}
        </button>
      </form>
    </div>
  </div>
</div>
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ValidatorFn, AbstractControl } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { HorarioMedicoService } from '../../services/horario-medico.service';
import { MedicoService } from '../../services/medico.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-agregar-horario-medico',
  templateUrl: './agregar-horario.component.html',
  styleUrls: ['./agregar-horario.component.scss']
})
export class AgregarHorarioMedicoComponent implements OnInit {
  horarioMedicoForm: FormGroup;
  isEditMode: boolean = false;
  horarioId: number | null = null;
  medicos: any[] = [];

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private route: ActivatedRoute,
    private HorarioMedicoService: HorarioMedicoService,
    private MedicoService: MedicoService
  ) {
    // Configuramos el formulario con sus validaciones
    this.horarioMedicoForm = this.fb.group({
      idHorario: [''],
      diaSemana: ['', Validators.required],
      horaInicio: ['', [Validators.required, Validators.pattern(/^([01]\d|2[0-3]):([0-5]\d)$/)]],
      horaFinalizacion: ['', [Validators.required, Validators.pattern(/^([01]\d|2[0-3]):([0-5]\d)$/)]],
      inicio_colacion: ['', Validators.required],
      fin_colacion: ['', Validators.required],
      rut_medico: ['', Validators.required]
    }, { validators: this.horarioColacionValidator() });
  }

  // Validador a nivel de formulario para horarios
  horarioColacionValidator(): ValidatorFn {
    return (control: AbstractControl): { [key: string]: any } | null => {
      if (!(control instanceof FormGroup)) return null;

      const inicio = control.get('horaInicio')?.value;
      const fin = control.get('horaFinalizacion')?.value;
      const inicioColacion = control.get('inicio_colacion')?.value;
      const finColacion = control.get('fin_colacion')?.value;

      if (inicio && fin && inicio >= fin) {
        return { horarioLaboralInvalido: true };
      }
      if (inicio && fin && inicioColacion && finColacion) {
        if (inicio > inicioColacion || finColacion > fin) {
          return { horarioColacionFuera: true };
        }
        if (inicioColacion >= finColacion) {
          return { colacionInvalida: true };
        }
      }
      return null;
    };
  }

  ngOnInit(): void {
    // Cargar la lista de médicos para el select
    this.MedicoService.cargarMedicos().subscribe(
      (response: any) => {
        this.medicos = response.medicos;
      },
      error => {
        console.error('Error al cargar médicos', error);
      }
    );

    // Suscribirse a los parámetros de la ruta para determinar si estamos en modo edición
    this.route.params.subscribe(params => {
      if (params['id']) {
        this.isEditMode = true;
        this.horarioId = +params['id'];
        // Cargar el horario existente para editarlo
        this.HorarioMedicoService.obtenerHorarioPorId(this.horarioId).subscribe(
          (response: any) => {
            // Suponiendo que la respuesta trae el objeto en response.horario
            const horario = response.horario;
            this.horarioMedicoForm.patchValue({
              idHorario: horario.idHorario,
              diaSemana: horario.diaSemana,
              horaInicio: horario.horaInicio,
              horaFinalizacion: horario.horaFinalizacion,
              inicio_colacion: horario.inicio_colacion,
              fin_colacion: horario.fin_colacion,
              rut_medico: horario.rutMedico // Ajusta el nombre según tu modelo
            });
          },
          error => {
            console.error('Error al cargar el horario', error);
          }
        );
      } else {
        this.isEditMode = false;
      }
    });
  }

  onSubmit(): void {
    if (this.horarioMedicoForm.invalid) return;
    const formData = { ...this.horarioMedicoForm.value };
    if (this.isEditMode) {
      this.HorarioMedicoService.editarHorario(formData).subscribe(
        response => {
          Swal.fire('Éxito', 'Horario editado exitosamente', 'success');
          this.router.navigateByUrl('/gestionar-horarios-medicos');
        },
        error => {
          Swal.fire('Error', 'Hubo un error al editar el horario', 'error');
        }
      );
    } else {
      // En creación, eliminar el campo de ID para que se genere automáticamente
      delete formData.idHorario;
      this.HorarioMedicoService.crearHorario(formData).subscribe(
        response => {
          Swal.fire('Éxito', 'Horario creado exitosamente', 'success');
          this.router.navigateByUrl('/gestionar-horarios-medicos');
        },
        error => {
          Swal.fire('Error', 'Hubo un error al crear el horario', 'error');
        }
      );
    }
  }

  regresar(): void {
    this.router.navigateByUrl('/gestionar-horarios-medicos');
  }
}
.btn-secondary:hover {
    transform: scale(1.05);
    transition: transform 0.3s ease-in-out;
  }
  <button type="button" class="btn btn-secondary btn-block mt-3" (click)="regresar()">Regresar a Horarios Médicos</button>

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <h2 class="text-center mb-4">
        {{ isEditMode ? 'Editar Horario Médico' : 'Formulario de Registro de Horario Médico' }}
      </h2>
      <div style="background-color: #ffcc00; color: #333; padding: 10px; border-radius: 5px; margin: 20px 0; border: 1px solid #ffa500;">
        <strong>Advertencia:</strong> Por favor, asegúrese de haber completado el formulario de Tipo de Cita para que los médicos con sus especialidades se muestren correctamente en este formulario.
      </div>
      
      <form [formGroup]="horarioMedicoForm" (ngSubmit)="onSubmit()">
        <div class="form-group mt-3">
          <label for="diaSemana">Día de la Semana</label>
          <select class="form-control" id="diaSemana" formControlName="diaSemana">
            <option value="">Seleccione día de la semana</option>
            <option value="lunes">Lunes</option>
            <option value="martes">Martes</option>
            <option value="miercoles">Miércoles</option>
            <option value="jueves">Jueves</option>
            <option value="viernes">Viernes</option>
            <option value="sabado">Sábado</option>
            <option value="domingo">Domingo</option>
          </select>
          <div *ngIf="horarioMedicoForm.controls['diaSemana'].touched && horarioMedicoForm.controls['diaSemana'].hasError('required')" class="text-danger">
            Este campo es obligatorio.
          </div>
        </div>

        <div class="form-group mt-3">
          <label for="horaInicio">Hora de Inicio</label>
          <input type="time" class="form-control" id="horaInicio" formControlName="horaInicio" placeholder="08:00:00">
          <div *ngIf="horarioMedicoForm.controls['horaInicio'].touched && horarioMedicoForm.controls['horaInicio'].hasError('required')" class="text-danger">
            Este campo es obligatorio.
          </div>
        </div>

        <div class="form-group mt-3">
          <label for="horaFinalizacion">Hora de Finalización</label>
          <input type="time" class="form-control" id="horaFinalizacion" formControlName="horaFinalizacion" placeholder="12:00:00">
          <div *ngIf="horarioMedicoForm.controls['horaFinalizacion'].touched && horarioMedicoForm.controls['horaFinalizacion'].hasError('required')" class="text-danger">
            Este campo es obligatorio.
          </div>
        </div>

        <div *ngIf="horarioMedicoForm.errors?.['horarioLaboralInvalido']" class="text-danger">
          La hora de inicio debe ser anterior a la hora de finalización.
        </div>

        <div class="form-group mt-3">
          <label for="inicioColacion">Hora de Inicio de Colación</label>
          <input type="time" class="form-control" id="inicioColacion" formControlName="inicio_colacion">
          <div *ngIf="horarioMedicoForm.errors?.['horarioColacionFuera']" class="text-danger">
            El horario de colación debe estar dentro del horario laboral.
          </div>
        </div>

        <div class="form-group mt-3">
          <label for="finColacion">Hora de Fin de Colación</label>
          <input type="time" class="form-control" id="finColacion" formControlName="fin_colacion">
          <div *ngIf="horarioMedicoForm.errors?.['horarioColacionFuera']" class="text-danger">
            El horario de colación debe estar dentro del horario laboral.
          </div>
          <div *ngIf="horarioMedicoForm.errors?.['colacionInvalida']" class="text-danger">
            La hora de inicio de colación debe ser anterior a la hora de fin de colación.
          </div>
        </div>

        <div class="form-group">
          <label for="rutMedico">Médico</label>
          <select class="form-control" id="rutMedico" formControlName="rut_medico" required>
            <option value="">Selecciona un médico</option>
            <option *ngFor="let medico of medicos" [value]="medico.rut">
              {{ medico.nombre }} {{ medico.apellidos }} (Especialidad: {{ medico.especialidad_medica }})
            </option>
          </select>
        </div>

        <button type="submit" class="btn btn-primary btn-block mt-3" [disabled]="!horarioMedicoForm.valid">
          {{ isEditMode ? 'Guardar Cambios' : 'Registrar Horario Médico' }}
        </button>
      </form>
    </div>
  </div>
</div>
.btn-secondary:hover {
    transform: scale(1.05);
    transition: transform 0.3s ease-in-out;
  }
  import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ValidatorFn, AbstractControl } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { HorarioMedicoService } from '../../services/horario-medico.service';
import { MedicoService } from '../../services/medico.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-agregar-horario-medico',
  templateUrl: './agregar-horario.component.html',
  styleUrls: ['./agregar-horario.component.scss']
})
export class AgregarHorarioMedicoComponent implements OnInit {
  horarioMedicoForm: FormGroup;
  isEditMode: boolean = false;
  horarioId: number | null = null;
  medicos: any[] = [];

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private route: ActivatedRoute,
    private HorarioMedicoService: HorarioMedicoService,
    private MedicoService: MedicoService
  ) {
    // Configuramos el formulario con sus validaciones
    this.horarioMedicoForm = this.fb.group({
      idHorario: [''],
      diaSemana: ['', Validators.required],
      horaInicio: ['', [Validators.required, Validators.pattern(/^([01]\d|2[0-3]):([0-5]\d)$/)]],
      horaFinalizacion: ['', [Validators.required, Validators.pattern(/^([01]\d|2[0-3]):([0-5]\d)$/)]],
      inicio_colacion: ['', Validators.required],
      fin_colacion: ['', Validators.required],
      rut_medico: ['', Validators.required]
    }, { validators: this.horarioColacionValidator() });
  }

  // Validador a nivel de formulario para horarios
  horarioColacionValidator(): ValidatorFn {
    return (control: AbstractControl): { [key: string]: any } | null => {
      if (!(control instanceof FormGroup)) return null;

      const inicio = control.get('horaInicio')?.value;
      const fin = control.get('horaFinalizacion')?.value;
      const inicioColacion = control.get('inicio_colacion')?.value;
      const finColacion = control.get('fin_colacion')?.value;

      if (inicio && fin && inicio >= fin) {
        return { horarioLaboralInvalido: true };
      }
      if (inicio && fin && inicioColacion && finColacion) {
        if (inicio > inicioColacion || finColacion > fin) {
          return { horarioColacionFuera: true };
        }
        if (inicioColacion >= finColacion) {
          return { colacionInvalida: true };
        }
      }
      return null;
    };
  }

  ngOnInit(): void {
    // Cargar la lista de médicos para el select
    this.MedicoService.cargarMedicos().subscribe(
      (response: any) => {
        this.medicos = response.medicos;
      },
      error => {
        console.error('Error al cargar médicos', error);
      }
    );

    // Suscribirse a los parámetros de la ruta para determinar si estamos en modo edición
    this.route.params.subscribe(params => {
      if (params['id']) {
        this.isEditMode = true;
        this.horarioId = +params['id'];
        // Cargar el horario existente para editarlo
        this.HorarioMedicoService.obtenerHorarioPorId(this.horarioId).subscribe(
          (response: any) => {
            // Suponiendo que la respuesta trae el objeto en response.horario
            const horario = response.horario;
            this.horarioMedicoForm.patchValue({
              idHorario: horario.idHorario,
              diaSemana: horario.diaSemana,
              horaInicio: horario.horaInicio,
              horaFinalizacion: horario.horaFinalizacion,
              inicio_colacion: horario.inicio_colacion,
              fin_colacion: horario.fin_colacion,
              rut_medico: horario.rutMedico // Ajusta el nombre según tu modelo
            });
          },
          error => {
            console.error('Error al cargar el horario', error);
          }
        );
      } else {
        this.isEditMode = false;
      }
    });
  }

  onSubmit(): void {
    if (this.horarioMedicoForm.invalid) return;
    const formData = { ...this.horarioMedicoForm.value };
    if (this.isEditMode) {
      this.HorarioMedicoService.editarHorario(formData).subscribe(
        response => {
          Swal.fire('Éxito', 'Horario editado exitosamente', 'success');
          this.router.navigateByUrl('/gestionar-horarios-medicos');
        },
        error => {
          Swal.fire('Error', 'Hubo un error al editar el horario', 'error');
        }
      );
    } else {
      // En creación, eliminar el campo de ID para que se genere automáticamente
      delete formData.idHorario;
      this.HorarioMedicoService.crearHorario(formData).subscribe(
        response => {
          Swal.fire('Éxito', 'Horario creado exitosamente', 'success');
          this.router.navigateByUrl('/gestionar-horarios-medicos');
        },
        error => {
          Swal.fire('Error', 'Hubo un error al crear el horario', 'error');
        }
      );
    }
  }

  regresar(): void {
    this.router.navigateByUrl('/gestionar-horarios-medicos');
  }
}
<div class="row animated fadeIn fast">
  <div class="col-12">
    <div class="card shadow-sm">
      <div class="card-body">
        <div class="alert alert-info d-flex align-items-center" role="alert">
          <i class="fa fa-info-circle me-2"></i>
          <div>
            Si ya tienes horarios con médicos registrados puedes crear una cita médica
            <button class="btn btn-primary btn-sm ms-2" (click)="redirigirACrearCita()">Crear cita</button>
          </div>
        </div>

        <div class="mb-3">
          <label for="searchSchedule" class="form-label fw-bold text-primary">Buscar horarios médicos</label>
          <div class="input-group">
            <span class="input-group-text bg-light">
              <i class="fa fa-search"></i>
            </span>
            <input type="text"
                   id="searchSchedule"
                   class="form-control"
                   placeholder="Ingrese día de trabajo (lunes, martes, miércoles...)"
                   #txtTermino
                   (keyup)="buscar(txtTermino.value)"/>
          </div>
          <small class="text-muted mt-1 d-block">Ejemplo: lunes, martes, miércoles...</small>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="row mt-3">
  <div class="col-12">
    <div class="card shadow-sm">
      <div class="card-header bg-light">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <h4 class="card-title mb-0">Horarios: <span class="badge bg-primary">{{ totalHorarios }}</span></h4>
            <p class="text-muted small mb-0">Horarios médicos registrados en el sistema</p>
          </div>
          <a routerLink="/agregar-horario-medico" class="btn btn-primary">
            <i class="fa fa-plus-circle me-1"></i> Agregar Horario
          </a>
        </div>
      </div>
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table table-hover table-striped mb-0">
            <thead class="bg-light text-dark">
              <tr>
                <th class="px-3 py-3" style="width: 12%;">Día</th>
                <th class="px-3 py-3" style="width: 12%;">Inicio</th>
                <th class="px-3 py-3" style="width: 12%;">Finalización</th>
                <th class="px-3 py-3" style="width: 12%;">Inicio colación</th>
                <th class="px-3 py-3" style="width: 12%;">Fin colación</th>
                <th class="px-3 py-3" style="width: 20%;">Médico</th>
                <th class="px-3 py-3" style="width: 12%;">Especialidad</th>
                <th class="px-3 py-3 text-center" style="width: 8%;">Acciones</th>
              </tr>
            </thead>
            <tbody>
              <tr *ngFor="let horario of horarios">
                <td class="px-3 py-2 align-middle text-capitalize">{{ horario.diaSemana }}</td>
                <td class="px-3 py-2 align-middle">{{ horario.horaInicio }}</td>
                <td class="px-3 py-2 align-middle">{{ horario.horaFinalizacion }}</td>
                <td class="px-3 py-2 align-middle">{{ horario.inicio_colacion || '---' }}</td>
                <td class="px-3 py-2 align-middle">{{ horario.fin_colacion || '---' }}</td>
                <td class="px-3 py-2 align-middle text-capitalize">{{ horario.medico.nombre + ' ' + horario.medico.apellidos }}</td>
                <td class="px-3 py-2 align-middle text-capitalize">{{ horario.medico.especialidad_medica }}</td>
                <td class="px-3 py-2 align-middle text-center">
                  <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary btn-sm" 
                            data-toggle="tooltip" title="Editar" 
                            (click)="editarHorario(horario)">
                      <i class="fa fa-pencil"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger btn-sm" 
                            data-toggle="tooltip" title="Eliminar" 
                            (click)="borrarHorario(horario)">
                      <i class="fa fa-trash"></i>
                    </button>
                  </div>
                </td>
              </tr>
              <tr *ngIf="horarios.length === 0">
                <td colspan="8" class="text-center py-4">
                  <div class="text-muted">
                    <i class="fa fa-info-circle me-1"></i> No se encontraron horarios médicos
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        
        <div class="p-3" *ngIf="txtTermino.value.length === 0">
          <app-paginator 
            [totalItems]="totalHorarios" 
            [(offset)]="desde" 
            [pageSize]="5"
            (offsetChange)="cambiarPagina($event)">
          </app-paginator>
        </div>
      </div>
    </div>
  </div>
</div>import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { HorarioMedicoService } from '../../services/horario-medico.service';
import { HorarioMedico, HorarioResponse } from '../../interface/horarioMedico';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';


@Component({
  selector: 'app-gestionar-horarios-medicos',
  templateUrl: './gestionar-horarios-medicos.component.html',
  styleUrls: ['./gestionar-horarios-medicos.component.scss']
})
export class GestionarHorariosMedicosComponent implements OnInit {

  public totalHorarios: number = 0;

  public horarios: HorarioMedico[] = [];

  public desde: number = 0;


  constructor(private HorarioMedicoService: HorarioMedicoService, private router: Router, private BusquedasService: BusquedasService){}

  ngOnInit(): void {
    this.cargaHorario()
  }

  borrarHorario( horario: HorarioMedico ) {

    Swal.fire({
      title: '¿Borrar Horario?',
      text: `Esta seguro que desea eliminar este horario?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.HorarioMedicoService.borrarHorario( horario.idHorario )
          .subscribe( resp => {
            
            this.cargaHorario();
            Swal.fire(
              'Horario borradoa',
              `Horario medico numero ${ horario.idHorario } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

  }

  redirigirACrearCita() {
    this.router.navigateByUrl('/agregar-cita');
  }

  cargaHorario() {
    this.HorarioMedicoService.cargarHorario(this.desde)
      .subscribe((response: HorarioResponse) => {
        this.totalHorarios = response.total;
        this.horarios = response.horarios;

      });
  }

  editarHorario(horario: HorarioMedico) {
 
    this.router.navigate(['/editar-horario', horario.idHorario]);
  }

  buscar(termino: string): void {
    if (termino.length === 0) {
      this.cargaHorario(); // Recargar todos los horarios si la búsqueda está vacía
      return;
    }
  
    this.BusquedasService.buscar('horario_medico', termino)
      .subscribe((resp: HorarioMedico[]) => {
        this.horarios = resp; // Asignar los resultados de la búsqueda
        console.log(this.horarios);
    });  
  }
  

  cambiarPagina(nuevoOffset: number) {
  this.desde = nuevoOffset;

  if( this.desde < 0){
    this.desde = 0;
  } else if( this.desde >= this.totalHorarios ){ 
    this.desde -= nuevoOffset;
  }
  this.cargaHorario();

}


}
// Estilos para la gestión de horarios médicos
.cursor {
  cursor: pointer;
}

.icon-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-right: 5px;
}

/* Estilos para los botones */
.btn-group .btn {
  transition: all 0.3s ease;
}

/* Estilos para la tabla */
.table {
  width: 100%;
  table-layout: fixed;
  border-collapse: separate;
  border-spacing: 0;
}

.table th,
.table td {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  vertical-align: middle;
}

/* Mejoras para los botones de acción */
.btn-sm {
  padding: 0.25rem 0.5rem;
}

/* Estilos para las tarjetas */
.card {
  border-radius: 0.5rem;
  border: none;
  transition: all 0.3s ease;
}

.card-header {
  border-bottom: 1px solid rgba(0,0,0,0.1);
  padding: 1rem 1.5rem;
}

.shadow-sm {
  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
}

/* Estilo para el mensaje de alerta */
.alert {
  border-left: 4px solid #0dcaf0;
}

/* Estilo para la fila al pasar el mouse */
.table-hover tbody tr:hover {
  background-color: rgba(0, 123, 255, 0.05);
}

/* Estilo para los badges */
.badge {
  font-weight: 500;
  padding: 0.35em 0.65em;
}

.text-capitalize {
  text-transform: capitalize;
}

/* Estilo para las filas alternadas */
.table-striped tbody tr:nth-of-type(odd) {
  background-color: rgba(0, 0, 0, 0.02);
}

/* Estilo para campos vacíos */
td:empty:before {
  content: "---";
  color: #aaa;
}<div class="row animated fadeIn fast">
  <div class="col-12">
    <div class="card shadow-sm">
      <div class="card-body">
        <div class="alert alert-info d-flex align-items-center" role="alert">
          <i class="fa fa-info-circle me-2"></i>
          <div>
            Si ya tienes horarios con médicos registrados puedes crear una cita médica
            <button class="btn btn-primary btn-sm ms-2" (click)="redirigirACrearCita()">Crear cita</button>
          </div>
        </div>

        <div class="mb-3">
          <label for="searchSchedule" class="form-label fw-bold text-primary">Buscar horarios médicos</label>
          <div class="input-group">
            <span class="input-group-text bg-light">
              <i class="fa fa-search"></i>
            </span>
            <input type="text"
                   id="searchSchedule"
                   class="form-control"
                   placeholder="Ingrese día de trabajo (lunes, martes, miércoles...)"
                   #txtTermino
                   (keyup)="buscar(txtTermino.value)"/>
          </div>
          <small class="text-muted mt-1 d-block">Ejemplo: lunes, martes, miércoles...</small>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="row mt-3">
  <div class="col-12">
    <div class="card shadow-sm">
      <div class="card-header bg-light">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <h4 class="card-title mb-0">Horarios: <span class="badge bg-primary">{{ totalHorarios }}</span></h4>
            <p class="text-muted small mb-0">Horarios médicos registrados en el sistema</p>
          </div>
          <a routerLink="/agregar-horario-medico" class="btn btn-primary">
            <i class="fa fa-plus-circle me-1"></i> Agregar Horario
          </a>
        </div>
      </div>
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table table-hover table-striped mb-0">
            <thead class="bg-light text-dark">
              <tr>
                <th class="px-3 py-3" style="width: 12%;">Día</th>
                <th class="px-3 py-3" style="width: 12%;">Inicio</th>
                <th class="px-3 py-3" style="width: 12%;">Finalización</th>
                <th class="px-3 py-3" style="width: 12%;">Inicio colación</th>
                <th class="px-3 py-3" style="width: 12%;">Fin colación</th>
                <th class="px-3 py-3" style="width: 20%;">Médico</th>
                <th class="px-3 py-3" style="width: 12%;">Especialidad</th>
                <th class="px-3 py-3 text-center" style="width: 8%;">Acciones</th>
              </tr>
            </thead>
            <tbody>
              <tr *ngFor="let horario of horarios">
                <td class="px-3 py-2 align-middle text-capitalize">{{ horario.diaSemana }}</td>
                <td class="px-3 py-2 align-middle">{{ horario.horaInicio }}</td>
                <td class="px-3 py-2 align-middle">{{ horario.horaFinalizacion }}</td>
                <td class="px-3 py-2 align-middle">{{ horario.inicio_colacion || '---' }}</td>
                <td class="px-3 py-2 align-middle">{{ horario.fin_colacion || '---' }}</td>
                <td class="px-3 py-2 align-middle text-capitalize">{{ horario.medico.nombre + ' ' + horario.medico.apellidos }}</td>
                <td class="px-3 py-2 align-middle text-capitalize">{{ horario.medico.especialidad_medica }}</td>
                <td class="px-3 py-2 align-middle text-center">
                  <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary btn-sm" 
                            data-toggle="tooltip" title="Editar" 
                            (click)="editarHorario(horario)">
                      <i class="fa fa-pencil"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger btn-sm" 
                            data-toggle="tooltip" title="Eliminar" 
                            (click)="borrarHorario(horario)">
                      <i class="fa fa-trash"></i>
                    </button>
                  </div>
                </td>
              </tr>
              <tr *ngIf="horarios.length === 0">
                <td colspan="8" class="text-center py-4">
                  <div class="text-muted">
                    <i class="fa fa-info-circle me-1"></i> No se encontraron horarios médicos
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        
        <div class="p-3" *ngIf="txtTermino.value.length === 0">
          <app-paginator 
            [totalItems]="totalHorarios" 
            [(offset)]="desde" 
            [pageSize]="5"
            (offsetChange)="cambiarPagina($event)">
          </app-paginator>
        </div>
      </div>
    </div>
  </div>
</div>// Estilos para la gestión de horarios médicos
.cursor {
  cursor: pointer;
}

.icon-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-right: 5px;
}

/* Estilos para los botones */
.btn-group .btn {
  transition: all 0.3s ease;
}

/* Estilos para la tabla */
.table {
  width: 100%;
  table-layout: fixed;
  border-collapse: separate;
  border-spacing: 0;
}

.table th,
.table td {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  vertical-align: middle;
}

/* Mejoras para los botones de acción */
.btn-sm {
  padding: 0.25rem 0.5rem;
}

/* Estilos para las tarjetas */
.card {
  border-radius: 0.5rem;
  border: none;
  transition: all 0.3s ease;
}

.card-header {
  border-bottom: 1px solid rgba(0,0,0,0.1);
  padding: 1rem 1.5rem;
}

.shadow-sm {
  box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,0.075);
}

/* Estilo para el mensaje de alerta */
.alert {
  border-left: 4px solid #0dcaf0;
}

/* Estilo para la fila al pasar el mouse */
.table-hover tbody tr:hover {
  background-color: rgba(0, 123, 255, 0.05);
}

/* Estilo para los badges */
.badge {
  font-weight: 500;
  padding: 0.35em 0.65em;
}

.text-capitalize {
  text-transform: capitalize;
}

/* Estilo para las filas alternadas */
.table-striped tbody tr:nth-of-type(odd) {
  background-color: rgba(0, 0, 0, 0.02);
}

/* Estilo para campos vacíos */
td:empty:before {
  content: "---";
  color: #aaa;
}import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { HorarioMedicoService } from '../../services/horario-medico.service';
import { HorarioMedico, HorarioResponse } from '../../interface/horarioMedico';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';


@Component({
  selector: 'app-gestionar-horarios-medicos',
  templateUrl: './gestionar-horarios-medicos.component.html',
  styleUrls: ['./gestionar-horarios-medicos.component.scss']
})
export class GestionarHorariosMedicosComponent implements OnInit {

  public totalHorarios: number = 0;

  public horarios: HorarioMedico[] = [];

  public desde: number = 0;


  constructor(private HorarioMedicoService: HorarioMedicoService, private router: Router, private BusquedasService: BusquedasService){}

  ngOnInit(): void {
    this.cargaHorario()
  }

  borrarHorario( horario: HorarioMedico ) {

    Swal.fire({
      title: '¿Borrar Horario?',
      text: `Esta seguro que desea eliminar este horario?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.HorarioMedicoService.borrarHorario( horario.idHorario )
          .subscribe( resp => {
            
            this.cargaHorario();
            Swal.fire(
              'Horario borradoa',
              `Horario medico numero ${ horario.idHorario } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

  }

  redirigirACrearCita() {
    this.router.navigateByUrl('/agregar-cita');
  }

  cargaHorario() {
    this.HorarioMedicoService.cargarHorario(this.desde)
      .subscribe((response: HorarioResponse) => {
        this.totalHorarios = response.total;
        this.horarios = response.horarios;

      });
  }

  editarHorario(horario: HorarioMedico) {
 
    this.router.navigate(['/editar-horario', horario.idHorario]);
  }

  buscar(termino: string): void {
    if (termino.length === 0) {
      this.cargaHorario(); // Recargar todos los horarios si la búsqueda está vacía
      return;
    }
  
    this.BusquedasService.buscar('horario_medico', termino)
      .subscribe((resp: HorarioMedico[]) => {
        this.horarios = resp; // Asignar los resultados de la búsqueda
        console.log(this.horarios);
    });  
  }
  

  cambiarPagina(nuevoOffset: number) {
  this.desde = nuevoOffset;

  if( this.desde < 0){
    this.desde = 0;
  } else if( this.desde >= this.totalHorarios ){ 
    this.desde -= nuevoOffset;
  }
  this.cargaHorario();

}


}
<!-- HTML del formulario mejorado -->
<div class="container-fluid py-4">
  <div class="card shadow-sm border-0">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">{{ isEditMode ? 'Editar Tipo de Cita' : 'Nuevo Tipo de Cita' }}</h5>
    </div>
    <div class="card-body p-4">
      <form [formGroup]="formularioTipoCita" (ngSubmit)="onSubmit()">
        <div class="form-group mb-4">
          <label for="especialidad_medica" class="form-label fw-bold">Especialidad Médica</label>
          <div class="input-group">
            <span class="input-group-text bg-light">
              <i class="fas fa-user-md"></i>
            </span>
            <input type="text" id="especialidad_medica" formControlName="especialidad_medica" 
                   class="form-control form-control-lg" placeholder="Ej: Cardiología">
          </div>
          <div *ngIf="formularioTipoCita.controls['especialidad_medica'].touched && 
                      formularioTipoCita.controls['especialidad_medica'].hasError('required')" 
               class="text-danger mt-1 small">
            <i class="fas fa-exclamation-circle me-1"></i>La especialidad médica es requerida
          </div>
        </div>
      
        <div class="form-group mb-4">
          <label for="precio" class="form-label fw-bold">Precio</label>
          <div class="input-group">
            <span class="input-group-text bg-light">$</span>
            <input type="text" id="precio" formControlName="precio" 
                   class="form-control form-control-lg" placeholder="Ej: 500">
          </div>
          <div *ngIf="formularioTipoCita.controls['precio'].touched">
            <div *ngIf="formularioTipoCita.controls['precio'].hasError('required')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>El precio es requerido
            </div>
            <div *ngIf="formularioTipoCita.controls['precio'].hasError('pattern')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Solo se permiten números enteros sin ceros a la izquierda
            </div>
          </div>
        </div>

        <div class="form-group mb-4">
          <label for="duracion_cita" class="form-label fw-bold">Duración de la Cita</label>
          <div class="input-group">
            <span class="input-group-text bg-light">
              <i class="fas fa-clock"></i>
            </span>
            <input type="text" id="duracion_cita" formControlName="duracion_cita" 
                   class="form-control form-control-lg" placeholder="Máximo 180 minutos">
            <span class="input-group-text bg-light">min</span>
          </div>
          <small class="text-muted">Solo minutos, duración máxima 180 minutos (3 horas)</small>
          
          <div *ngIf="formularioTipoCita.controls['duracion_cita'].touched">
            <div *ngIf="formularioTipoCita.controls['duracion_cita'].hasError('required')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La duración de la cita es requerida
            </div>
            <div *ngIf="formularioTipoCita.controls['duracion_cita'].hasError('pattern')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Solo se permiten números enteros para representar minutos
            </div>
            <div *ngIf="formularioTipoCita.controls['duracion_cita'].hasError('max')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La duración de la cita no puede exceder los 180 minutos (3 hrs)
            </div>
          </div>
          
          <div *ngIf="formularioTipoCita.controls['duracion_cita']?.valid && formularioTipoCita.get('duracion_cita')?.value" 
               class="mt-2 text-primary fw-bold">
            <i class="fas fa-info-circle me-1"></i>{{ convertirMinutosAHoras(formularioTipoCita.get('duracion_cita')?.value) }}
          </div>
        </div>
      
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
          <button type="button" class="btn btn-outline-secondary me-md-2" routerLink="/gestionar-tipo-cita">
            <i class="fas fa-times me-1"></i>Cancelar
          </button>
          <button type="submit" class="btn btn-primary" [disabled]="!formularioTipoCita.valid">
            <i class="fas fa-save me-1"></i>{{ isEditMode ? 'Guardar Cambios' : 'Crear Tipo Cita' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</div>import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { TipoCitaService } from '../../services/tipo-cita.service';
import { Router, ActivatedRoute } from '@angular/router';
import Swal from 'sweetalert2';
import { Tipo_cita, tipoCitaResponse } from '../../interface/tipoCita';

@Component({
  selector: 'app-agregar-tipo-cita',
  templateUrl: './agregar-tipo-cita.component.html',
  styleUrls: ['./agregar-tipo-cita.component.scss']
})
export class AgregarTipoCitaComponent {
  formularioTipoCita: FormGroup;
  isEditMode: boolean = false;
  tipoCitaId: string | null = null;
  formularioIntentadoEnviar: boolean = false;

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private tipoCitaService: TipoCitaService
  ) {
    // Definimos el formulario
    this.formularioTipoCita = this.fb.group({
      idTipo: [''], // Se usará en edición; en creación se eliminará
      especialidad_medica: ['', Validators.required],
      precio: ['', [Validators.required, Validators.pattern(/^(?!0\d)\d+$/)]],
      duracion_cita: ['', [
        Validators.required,
        Validators.pattern(/^\d+$/),
        Validators.max(180)
      ]]
    });
  }

  ngOnInit(): void {
    // Verificamos si en la ruta se pasó un parámetro "id"
    this.activatedRoute.params.subscribe(params => {
      this.tipoCitaId = params['id'] || null;
      if (this.tipoCitaId) {
        this.isEditMode = true;
        // Se carga el tipo de cita para editar
        this.tipoCitaService.obtenerTipoCitaId(this.tipoCitaId).subscribe(
          (response: any) => {
            // Ajusta según la estructura de la respuesta (por ejemplo, si el objeto viene en response.tipo_cita)
            const tipoCita = response.tipo_cita || response;
            this.formularioTipoCita.patchValue({
              idTipo: tipoCita.idTipo,
              especialidad_medica: tipoCita.especialidad_medica,
              precio: tipoCita.precio,
              duracion_cita: tipoCita.duracion_cita
            });
          },
          error => {
            console.error('Error al cargar el tipo de cita:', error);
          }
        );
      } else {
        this.isEditMode = false;
      }
    });
  }

  convertirMinutosAHoras(minutos: number): string {
    const horas = Math.floor(minutos / 60);
    const minutosRestantes = minutos % 60;
    return `${horas} hora(s) y ${minutosRestantes} minuto(s)`;
  }

  onSubmit(): void {
    this.formularioIntentadoEnviar = true;
    if (this.formularioTipoCita.invalid) {
      return;
    }
    const formData = { ...this.formularioTipoCita.value };
    if (this.isEditMode) {
      // Modo edición
      this.tipoCitaService.editarTipoCita(formData).subscribe(
        response => {
          Swal.fire('Éxito', 'Tipo de cita editado exitosamente', 'success');
          this.router.navigateByUrl('/gestionar-tipo-cita');
        },
        error => {
          Swal.fire('Error', 'Hubo un error al editar el tipo de cita', 'error');
        }
      );
    } else {
      // Modo creación: eliminar el id ya que no se necesita
      delete formData.idTipo;
      this.tipoCitaService.crearTipoCita(formData).subscribe(
        (respuesta: tipoCitaResponse) => {
          Swal.fire('Mensaje', 'Registro exitoso', 'success');
          this.router.navigateByUrl('/gestionar-tipo-cita');
        },
        err => {
          Swal.fire('Error', err.error.msg, 'error');
        }
      );
    }
  }
}
/* Estilos para mejorar el formulario */
.card {
    border-radius: 10px;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1) !important;
  }
  
  .card-header {
    border-bottom: none;
    padding: 1.2rem 1.5rem;
  }
  
  .form-control, .input-group-text {
    border-radius: 5px;
    transition: all 0.2s;
  }
  
  .form-control:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    border-color: #0d6efd;
  }
  
  .input-group-text {
    border: 1px solid #ced4da;
    min-width: 45px;
    display: flex;
    justify-content: center;
  }
  
  .btn {
    border-radius: 5px;
    padding: 0.6rem 1.5rem;
    font-weight: 500;
    transition: all 0.3s;
  }
  
  .btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
  }
  
  .btn-primary:hover {
    background-color: #0b5ed7;
    border-color: #0a58ca;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(13, 110, 253, 0.25);
  }
  
  .btn-primary:disabled {
    background-color: #0d6efd;
    border-color: #0d6efd;
    opacity: 0.65;
  }
  
  .btn-outline-secondary:hover {
    transform: translateY(-2px);
  }
  
  .form-label {
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
  }
  
  .text-danger {
    font-size: 0.85rem;
  }
  
  /* Animación para los mensajes de error y validación */
  .text-danger, .text-primary {
    animation: fadeIn 0.3s;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }<!-- HTML del formulario mejorado -->
<div class="container-fluid py-4">
  <div class="card shadow-sm border-0">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">{{ isEditMode ? 'Editar Tipo de Cita' : 'Nuevo Tipo de Cita' }}</h5>
    </div>
    <div class="card-body p-4">
      <form [formGroup]="formularioTipoCita" (ngSubmit)="onSubmit()">
        <div class="form-group mb-4">
          <label for="especialidad_medica" class="form-label fw-bold">Especialidad Médica</label>
          <div class="input-group">
            <span class="input-group-text bg-light">
              <i class="fas fa-user-md"></i>
            </span>
            <input type="text" id="especialidad_medica" formControlName="especialidad_medica" 
                   class="form-control form-control-lg" placeholder="Ej: Cardiología">
          </div>
          <div *ngIf="formularioTipoCita.controls['especialidad_medica'].touched && 
                      formularioTipoCita.controls['especialidad_medica'].hasError('required')" 
               class="text-danger mt-1 small">
            <i class="fas fa-exclamation-circle me-1"></i>La especialidad médica es requerida
          </div>
        </div>
      
        <div class="form-group mb-4">
          <label for="precio" class="form-label fw-bold">Precio</label>
          <div class="input-group">
            <span class="input-group-text bg-light">$</span>
            <input type="text" id="precio" formControlName="precio" 
                   class="form-control form-control-lg" placeholder="Ej: 500">
          </div>
          <div *ngIf="formularioTipoCita.controls['precio'].touched">
            <div *ngIf="formularioTipoCita.controls['precio'].hasError('required')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>El precio es requerido
            </div>
            <div *ngIf="formularioTipoCita.controls['precio'].hasError('pattern')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Solo se permiten números enteros sin ceros a la izquierda
            </div>
          </div>
        </div>

        <div class="form-group mb-4">
          <label for="duracion_cita" class="form-label fw-bold">Duración de la Cita</label>
          <div class="input-group">
            <span class="input-group-text bg-light">
              <i class="fas fa-clock"></i>
            </span>
            <input type="text" id="duracion_cita" formControlName="duracion_cita" 
                   class="form-control form-control-lg" placeholder="Máximo 180 minutos">
            <span class="input-group-text bg-light">min</span>
          </div>
          <small class="text-muted">Solo minutos, duración máxima 180 minutos (3 horas)</small>
          
          <div *ngIf="formularioTipoCita.controls['duracion_cita'].touched">
            <div *ngIf="formularioTipoCita.controls['duracion_cita'].hasError('required')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La duración de la cita es requerida
            </div>
            <div *ngIf="formularioTipoCita.controls['duracion_cita'].hasError('pattern')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>Solo se permiten números enteros para representar minutos
            </div>
            <div *ngIf="formularioTipoCita.controls['duracion_cita'].hasError('max')" 
                 class="text-danger mt-1 small">
              <i class="fas fa-exclamation-circle me-1"></i>La duración de la cita no puede exceder los 180 minutos (3 hrs)
            </div>
          </div>
          
          <div *ngIf="formularioTipoCita.controls['duracion_cita']?.valid && formularioTipoCita.get('duracion_cita')?.value" 
               class="mt-2 text-primary fw-bold">
            <i class="fas fa-info-circle me-1"></i>{{ convertirMinutosAHoras(formularioTipoCita.get('duracion_cita')?.value) }}
          </div>
        </div>
      
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
          <button type="button" class="btn btn-outline-secondary me-md-2" routerLink="/gestionar-tipo-cita">
            <i class="fas fa-times me-1"></i>Cancelar
          </button>
          <button type="submit" class="btn btn-primary" [disabled]="!formularioTipoCita.valid">
            <i class="fas fa-save me-1"></i>{{ isEditMode ? 'Guardar Cambios' : 'Crear Tipo Cita' }}
          </button>
        </div>
      </form>
    </div>
  </div>
</div>/* Estilos para mejorar el formulario */
.card {
    border-radius: 10px;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1) !important;
  }
  
  .card-header {
    border-bottom: none;
    padding: 1.2rem 1.5rem;
  }
  
  .form-control, .input-group-text {
    border-radius: 5px;
    transition: all 0.2s;
  }
  
  .form-control:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    border-color: #0d6efd;
  }
  
  .input-group-text {
    border: 1px solid #ced4da;
    min-width: 45px;
    display: flex;
    justify-content: center;
  }
  
  .btn {
    border-radius: 5px;
    padding: 0.6rem 1.5rem;
    font-weight: 500;
    transition: all 0.3s;
  }
  
  .btn-primary {
    background-color: #0d6efd;
    border-color: #0d6efd;
  }
  
  .btn-primary:hover {
    background-color: #0b5ed7;
    border-color: #0a58ca;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(13, 110, 253, 0.25);
  }
  
  .btn-primary:disabled {
    background-color: #0d6efd;
    border-color: #0d6efd;
    opacity: 0.65;
  }
  
  .btn-outline-secondary:hover {
    transform: translateY(-2px);
  }
  
  .form-label {
    margin-bottom: 0.5rem;
    font-size: 0.95rem;
  }
  
  .text-danger {
    font-size: 0.85rem;
  }
  
  /* Animación para los mensajes de error y validación */
  .text-danger, .text-primary {
    animation: fadeIn 0.3s;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-5px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { TipoCitaService } from '../../services/tipo-cita.service';
import { Router, ActivatedRoute } from '@angular/router';
import Swal from 'sweetalert2';
import { Tipo_cita, tipoCitaResponse } from '../../interface/tipoCita';

@Component({
  selector: 'app-agregar-tipo-cita',
  templateUrl: './agregar-tipo-cita.component.html',
  styleUrls: ['./agregar-tipo-cita.component.scss']
})
export class AgregarTipoCitaComponent {
  formularioTipoCita: FormGroup;
  isEditMode: boolean = false;
  tipoCitaId: string | null = null;
  formularioIntentadoEnviar: boolean = false;

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private activatedRoute: ActivatedRoute,
    private tipoCitaService: TipoCitaService
  ) {
    // Definimos el formulario
    this.formularioTipoCita = this.fb.group({
      idTipo: [''], // Se usará en edición; en creación se eliminará
      especialidad_medica: ['', Validators.required],
      precio: ['', [Validators.required, Validators.pattern(/^(?!0\d)\d+$/)]],
      duracion_cita: ['', [
        Validators.required,
        Validators.pattern(/^\d+$/),
        Validators.max(180)
      ]]
    });
  }

  ngOnInit(): void {
    // Verificamos si en la ruta se pasó un parámetro "id"
    this.activatedRoute.params.subscribe(params => {
      this.tipoCitaId = params['id'] || null;
      if (this.tipoCitaId) {
        this.isEditMode = true;
        // Se carga el tipo de cita para editar
        this.tipoCitaService.obtenerTipoCitaId(this.tipoCitaId).subscribe(
          (response: any) => {
            // Ajusta según la estructura de la respuesta (por ejemplo, si el objeto viene en response.tipo_cita)
            const tipoCita = response.tipo_cita || response;
            this.formularioTipoCita.patchValue({
              idTipo: tipoCita.idTipo,
              especialidad_medica: tipoCita.especialidad_medica,
              precio: tipoCita.precio,
              duracion_cita: tipoCita.duracion_cita
            });
          },
          error => {
            console.error('Error al cargar el tipo de cita:', error);
          }
        );
      } else {
        this.isEditMode = false;
      }
    });
  }

  convertirMinutosAHoras(minutos: number): string {
    const horas = Math.floor(minutos / 60);
    const minutosRestantes = minutos % 60;
    return `${horas} hora(s) y ${minutosRestantes} minuto(s)`;
  }

  onSubmit(): void {
    this.formularioIntentadoEnviar = true;
    if (this.formularioTipoCita.invalid) {
      return;
    }
    const formData = { ...this.formularioTipoCita.value };
    if (this.isEditMode) {
      // Modo edición
      this.tipoCitaService.editarTipoCita(formData).subscribe(
        response => {
          Swal.fire('Éxito', 'Tipo de cita editado exitosamente', 'success');
          this.router.navigateByUrl('/gestionar-tipo-cita');
        },
        error => {
          Swal.fire('Error', 'Hubo un error al editar el tipo de cita', 'error');
        }
      );
    } else {
      // Modo creación: eliminar el id ya que no se necesita
      delete formData.idTipo;
      this.tipoCitaService.crearTipoCita(formData).subscribe(
        (respuesta: tipoCitaResponse) => {
          Swal.fire('Mensaje', 'Registro exitoso', 'success');
          this.router.navigateByUrl('/gestionar-tipo-cita');
        },
        err => {
          Swal.fire('Error', err.error.msg, 'error');
        }
      );
    }
  }
}
<div class="row animated fadeIn fast"
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
              <p style="font-weight: bold; color: #3336ff;">Buscar especialidades...</p>
                <input type="text"
                        class="form-control"
                        placeholder="Buscar especialidades medicas..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )"/>

            </div>
        </div>
    </div>
</div> 

<div class="container-fluid">
    <div class="row">
      <div class="col">
        <!-- Contenido principal aquí -->
      </div>
      <div class="col-auto">
        <a routerLink="/agregar-tipo-cita" class="btn btn-primary">Agregar tipo Cita</a>
      </div>
    </div>
  </div>

<div class="row animated fadeIn fast"> <!--SI NO ESTA CARGADO-->
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Total de tipos de cita: </h4>
                <h6 class="card-subtitle">Total de tipos cita registradas en mi aplicacion ({{totalTipoCitas}})</h6>
                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
                          <th style="width: 10%;">ID</th>
                          <th style="width: 30%;">Especialidad Médica</th>
                          <th style="width: 20%;">Precio</th>
                          <th style="width: 20%;">Duración cita</th>
                          <th style="width: 20%;">Acciones</th>
                        </tr>
                      </thead>
                      
                      <tbody>
                        <tr *ngFor="let tipocita of tiposCitas">
                          <td>{{tipocita.idTipo}}</td>
                          <td>{{tipocita.especialidad_medica}}</td>
                          <td>{{tipocita.precio}}</td>
                          
                          <td>{{tipocita.duracion_cita}}</td>
                     

              <td>
                <div class="icon-container">
                    <a class="cursor"
                      data-toggle="tooltip" 
                      data-original-title="Borrar"
                      (click)="borrarTipoCita( tipocita )"> 
                      <i class="fa fa-close text-danger"></i> 
                    </a>
                  </div>
                  <div class="icon-container">
                    <a class="cursor"
                      data-toggle="tooltip" 
                      data-original-title="Editar"
                      (click)="editarTipoCita( tipocita )"> 
                      <i class="fa fa-pencil text-primary"></i> 
                    </a>
                  </div>
                </td>
                
                
                
                        </tr>
                      </tbody>
                    </table>
                  </div>
                <!--ESTA CONDICION SE HACE PARA QUE CUANDO SE TECLEA EN LA BARRA DE BUSQUEDA Y SE CARGAN LOS RESULTADOS DE BUSQUEDA DESAPARESCAN LOS BOTONES SIGUIENTES Y ANTERIOR EN LA PANTALLA-->
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                  <app-paginator 
                  [totalItems]="totalTipoCitas" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
            
            </div>
        </div>
    </div>

</div>
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { TipoCitaService } from '../../services/tipo-cita.service';
import { Medico } from '../../interface/medicos';
import { Tipo_cita, tipoCitaResponse } from '../../interface/tipoCita';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';

@Component({
  selector: 'app-gestionar-tipos-citas',
  templateUrl: './gestionar-tipos-citas.component.html',
  styleUrls: ['./gestionar-tipos-citas.component.scss']
})
export class GestionarTiposCitasComponent implements OnInit{

  public tiposCitas: Tipo_cita[] = [];
  public desde: number = 0;
  public totalTipoCitas: number = 0;

  constructor(private TipoCitaService: TipoCitaService, private router: Router, private BusquedasService: BusquedasService){}

  ngOnInit(): void {
    this.cargaTipocita()
  }
  cargaTipocita() {
    this.TipoCitaService.cargaTipocita(this.desde)
      .subscribe((response: tipoCitaResponse) => {
        console.log('AQUI ESTA LA RESPUESTA COMPLETA',response);
        this.tiposCitas = response.tipo_cita; // Asigna el arreglo tipo_cita de la respuesta a tiposCitas
        console.log('AQUI ESTAN LOS TIPOS CITAS',this.tiposCitas);
        this.totalTipoCitas = response.total;

      });
  }

  borrarTipoCita( tipocita: Tipo_cita ) {

    Swal.fire({
      title: '¿Borrar tipo de cita?',
      text: `Esta seguro que desea eliminar este tipo cita? si elimina este tipo cita con su especialidad se borraran todos los horarios medicos, medico y citas que tengan esa especialidad (solo se borraran las cita  en estado terminado), si desea solo cambiar la especialidad de un medico en particular o solo eliminar un medico que atienda esa especialidad  puede hacerlo desde la seccion de gestionar medicos`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.TipoCitaService.borrarTipoCita( tipocita.idTipo )
          .subscribe( resp => {
            console.log('aqui esta la respuesta',resp);
            this.cargaTipocita()
            Swal.fire(
              'Tipo de cita borrado',
              `Tipo Cita ${ tipocita.idTipo } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

    

  }

  buscar(termino: string): void {
    if (termino.length === 0) {
      this.cargaTipocita(); // Recargar los datos originales
      return;
    }
  
    this.BusquedasService.buscar('tipo_cita', termino)
      .subscribe((resp: Tipo_cita[]) => {
        this.tiposCitas = resp;
      });  
  }
  

    editarTipoCita( tipoCita:any ){
      this.router.navigate(['/editar-tipoCita', tipoCita.idTipo]);
    }


    cambiarPagina(nuevoOffset: number) {

      this.desde = nuevoOffset;

      if( this.desde < 0){
        this.desde = 0;
      } else if( this.desde >= this.totalTipoCitas ){ 
        this.desde -= nuevoOffset;
      }
      this.cargaTipocita();

    }







}
.cursor {
    cursor: pointer;
}

.icon-container {
    display: inline-block;
    margin-right: 10px;  /* Esto añade un pequeño espacio entre los íconos */
}

.table {
    width: 100%;
    table-layout: fixed; /* Forza anchos fijos en las columnas */
  }
  
  .table th,
  .table td {
    white-space: nowrap;       /* Evita que el texto se divida en varias líneas */
    overflow: hidden;          /* Oculta el contenido que se desborda */
    text-overflow: ellipsis;   /* Muestra "..." si el contenido es muy largo */
  }
  
<div class="row animated fadeIn fast"
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
              <p style="font-weight: bold; color: #3336ff;">Buscar especialidades...</p>
                <input type="text"
                        class="form-control"
                        placeholder="Buscar especialidades medicas..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )"/>

            </div>
        </div>
    </div>
</div> 

<div class="container-fluid">
    <div class="row">
      <div class="col">
        <!-- Contenido principal aquí -->
      </div>
      <div class="col-auto">
        <a routerLink="/agregar-tipo-cita" class="btn btn-primary">Agregar tipo Cita</a>
      </div>
    </div>
  </div>

<div class="row animated fadeIn fast"> <!--SI NO ESTA CARGADO-->
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Total de tipos de cita: </h4>
                <h6 class="card-subtitle">Total de tipos cita registradas en mi aplicacion ({{totalTipoCitas}})</h6>
                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
                          <th style="width: 10%;">ID</th>
                          <th style="width: 30%;">Especialidad Médica</th>
                          <th style="width: 20%;">Precio</th>
                          <th style="width: 20%;">Duración cita</th>
                          <th style="width: 20%;">Acciones</th>
                        </tr>
                      </thead>
                      
                      <tbody>
                        <tr *ngFor="let tipocita of tiposCitas">
                          <td>{{tipocita.idTipo}}</td>
                          <td>{{tipocita.especialidad_medica}}</td>
                          <td>{{tipocita.precio}}</td>
                          
                          <td>{{tipocita.duracion_cita}}</td>
                     

              <td>
                <div class="icon-container">
                    <a class="cursor"
                      data-toggle="tooltip" 
                      data-original-title="Borrar"
                      (click)="borrarTipoCita( tipocita )"> 
                      <i class="fa fa-close text-danger"></i> 
                    </a>
                  </div>
                  <div class="icon-container">
                    <a class="cursor"
                      data-toggle="tooltip" 
                      data-original-title="Editar"
                      (click)="editarTipoCita( tipocita )"> 
                      <i class="fa fa-pencil text-primary"></i> 
                    </a>
                  </div>
                </td>
                
                
                
                        </tr>
                      </tbody>
                    </table>
                  </div>
                <!--ESTA CONDICION SE HACE PARA QUE CUANDO SE TECLEA EN LA BARRA DE BUSQUEDA Y SE CARGAN LOS RESULTADOS DE BUSQUEDA DESAPARESCAN LOS BOTONES SIGUIENTES Y ANTERIOR EN LA PANTALLA-->
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                  <app-paginator 
                  [totalItems]="totalTipoCitas" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
            
            </div>
        </div>
    </div>

</div>
.cursor {
    cursor: pointer;
}

.icon-container {
    display: inline-block;
    margin-right: 10px;  /* Esto añade un pequeño espacio entre los íconos */
}

.table {
    width: 100%;
    table-layout: fixed; /* Forza anchos fijos en las columnas */
  }
  
  .table th,
  .table td {
    white-space: nowrap;       /* Evita que el texto se divida en varias líneas */
    overflow: hidden;          /* Oculta el contenido que se desborda */
    text-overflow: ellipsis;   /* Muestra "..." si el contenido es muy largo */
  }
  
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { TipoCitaService } from '../../services/tipo-cita.service';
import { Medico } from '../../interface/medicos';
import { Tipo_cita, tipoCitaResponse } from '../../interface/tipoCita';
import Swal from 'sweetalert2';
import { BusquedasService } from '../../services/busquedas.service';

@Component({
  selector: 'app-gestionar-tipos-citas',
  templateUrl: './gestionar-tipos-citas.component.html',
  styleUrls: ['./gestionar-tipos-citas.component.scss']
})
export class GestionarTiposCitasComponent implements OnInit{

  public tiposCitas: Tipo_cita[] = [];
  public desde: number = 0;
  public totalTipoCitas: number = 0;

  constructor(private TipoCitaService: TipoCitaService, private router: Router, private BusquedasService: BusquedasService){}

  ngOnInit(): void {
    this.cargaTipocita()
  }
  cargaTipocita() {
    this.TipoCitaService.cargaTipocita(this.desde)
      .subscribe((response: tipoCitaResponse) => {
        console.log('AQUI ESTA LA RESPUESTA COMPLETA',response);
        this.tiposCitas = response.tipo_cita; // Asigna el arreglo tipo_cita de la respuesta a tiposCitas
        console.log('AQUI ESTAN LOS TIPOS CITAS',this.tiposCitas);
        this.totalTipoCitas = response.total;

      });
  }

  borrarTipoCita( tipocita: Tipo_cita ) {

    Swal.fire({
      title: '¿Borrar tipo de cita?',
      text: `Esta seguro que desea eliminar este tipo cita? si elimina este tipo cita con su especialidad se borraran todos los horarios medicos, medico y citas que tengan esa especialidad (solo se borraran las cita  en estado terminado), si desea solo cambiar la especialidad de un medico en particular o solo eliminar un medico que atienda esa especialidad  puede hacerlo desde la seccion de gestionar medicos`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.TipoCitaService.borrarTipoCita( tipocita.idTipo )
          .subscribe( resp => {
            console.log('aqui esta la respuesta',resp);
            this.cargaTipocita()
            Swal.fire(
              'Tipo de cita borrado',
              `Tipo Cita ${ tipocita.idTipo } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

    

  }

  buscar(termino: string): void {
    if (termino.length === 0) {
      this.cargaTipocita(); // Recargar los datos originales
      return;
    }
  
    this.BusquedasService.buscar('tipo_cita', termino)
      .subscribe((resp: Tipo_cita[]) => {
        this.tiposCitas = resp;
      });  
  }
  

    editarTipoCita( tipoCita:any ){
      this.router.navigate(['/editar-tipoCita', tipoCita.idTipo]);
    }


    cambiarPagina(nuevoOffset: number) {

      this.desde = nuevoOffset;

      if( this.desde < 0){
        this.desde = 0;
      } else if( this.desde >= this.totalTipoCitas ){ 
        this.desde -= nuevoOffset;
      }
      this.cargaTipocita();

    }







}


<div class="row animated fadeIn fast"
>

</div> 




<div class="row" 
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">      
                
                <div class="row">
                    <div class="col-8">
           
                    </div>
                    <!--BOTON DE CREAR MEDICO-->
                    <div class="col">
                        <div class="text-right">
                            <a class="btn btn-primary"
                               routerLink="/agregar-info-clinica">
                                <i class="fa fa-hospital-o"></i> 
                                Ingresar datos de su clinica
                            </a>
                        </div>
                    </div>

                </div>

                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
                          <th>Id</th>
                          <th>Nombre Clinica</th>
                          <th>Direccion</th>
                          <th>Teléfono</th>
                          <th>Email</th>
                          <th>Acciones</th>
                        </tr>
                      </thead>
                      <tbody>
                        <!-- Asegúrate de que infoClinica está definido antes de intentar acceder a sus propiedades -->
                        <tr *ngIf="infoClinica">
                          <td>{{ infoClinica.id }}</td>
                          <td>{{ infoClinica.nombreClinica }}</td>
                          <td>{{ infoClinica.direccion }}</td>
                          <td>{{ infoClinica.telefono }}</td>
                          <td>{{ infoClinica.email }}</td>
                          <td>
                            <div class="icon-container icon-delete">
                              <a class="cursor"
                                data-toggle="tooltip" 
                                data-original-title="Borrar"
                                (click)="borrarInfoClinica( infoClinica.id )"> 
                                <i class="fa fa-close text-danger"></i> 
                              </a>
                            </div>

                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                
           
            </div>
        </div>
    </div>

</div>

import { Component, OnInit } from '@angular/core';
import { InfoclinicaService } from '../services/infoclinica.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-info-clinica',
  templateUrl: './info-clinica.component.html',
  styleUrls: ['./info-clinica.component.scss']
})
export class InfoClinicaComponent implements OnInit {

  infoClinica: any;


  constructor(private InfoclinicaService: InfoclinicaService){}


  ngOnInit(): void {
    this.cargarInfoClinica();
  }

  cargarInfoClinica() {
    this.InfoclinicaService.cargarInfoClinica()
      .subscribe((response: any) => {
      
      
        this.infoClinica = response.Info[0];
        console.log(this.infoClinica);

      });
  }

  borrarInfoClinica( id: number ) {

    Swal.fire({
      title: '¿Borrar médico?',
      text: `Esta a punto de borrar la clinica, esta seguro?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.InfoclinicaService.borrarInfoClinica( id )
          .subscribe( resp => {
            
            this.cargarInfoClinica();
            Swal.fire(
              'Informacion de clinica borrada',
              `La informacion de la clinica fue borrada exitosamente`,
              'success'
            );
            
          });

      }
    })

  }


  

}
.cursor {
    cursor: pointer;
}

<div class="row animated fadeIn fast"
>

</div> 




<div class="row" 
>
    <div class="col-12">
        <div class="card">
            <div class="card-body">      
                
                <div class="row">
                    <div class="col-8">
           
                    </div>
                    <!--BOTON DE CREAR MEDICO-->
                    <div class="col">
                        <div class="text-right">
                            <a class="btn btn-primary"
                               routerLink="/agregar-info-clinica">
                                <i class="fa fa-hospital-o"></i> 
                                Ingresar datos de su clinica
                            </a>
                        </div>
                    </div>

                </div>

                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
                          <th>Id</th>
                          <th>Nombre Clinica</th>
                          <th>Direccion</th>
                          <th>Teléfono</th>
                          <th>Email</th>
                          <th>Acciones</th>
                        </tr>
                      </thead>
                      <tbody>
                        <!-- Asegúrate de que infoClinica está definido antes de intentar acceder a sus propiedades -->
                        <tr *ngIf="infoClinica">
                          <td>{{ infoClinica.id }}</td>
                          <td>{{ infoClinica.nombreClinica }}</td>
                          <td>{{ infoClinica.direccion }}</td>
                          <td>{{ infoClinica.telefono }}</td>
                          <td>{{ infoClinica.email }}</td>
                          <td>
                            <div class="icon-container icon-delete">
                              <a class="cursor"
                                data-toggle="tooltip" 
                                data-original-title="Borrar"
                                (click)="borrarInfoClinica( infoClinica.id )"> 
                                <i class="fa fa-close text-danger"></i> 
                              </a>
                            </div>

                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                
           
            </div>
        </div>
    </div>

</div>

.cursor {
    cursor: pointer;
}import { Component, OnInit } from '@angular/core';
import { InfoclinicaService } from '../services/infoclinica.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-info-clinica',
  templateUrl: './info-clinica.component.html',
  styleUrls: ['./info-clinica.component.scss']
})
export class InfoClinicaComponent implements OnInit {

  infoClinica: any;


  constructor(private InfoclinicaService: InfoclinicaService){}


  ngOnInit(): void {
    this.cargarInfoClinica();
  }

  cargarInfoClinica() {
    this.InfoclinicaService.cargarInfoClinica()
      .subscribe((response: any) => {
      
      
        this.infoClinica = response.Info[0];
        console.log(this.infoClinica);

      });
  }

  borrarInfoClinica( id: number ) {

    Swal.fire({
      title: '¿Borrar médico?',
      text: `Esta a punto de borrar la clinica, esta seguro?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.InfoclinicaService.borrarInfoClinica( id )
          .subscribe( resp => {
            
            this.cargarInfoClinica();
            Swal.fire(
              'Informacion de clinica borrada',
              `La informacion de la clinica fue borrada exitosamente`,
              'success'
            );
            
          });

      }
    })

  }


  

}
<!-- clinic-form.component.html -->
<div class="container mt-5">
    <h2>Registro de Clínica</h2>
    <form [formGroup]="clinicForm" (ngSubmit)="crearInfoClinica()">
        <div class="form-group mb-3">
            <label for="nombreClinica">Nombre de la Clínica</label>
            <input type="text" class="form-control" id="nombreClinica" formControlName="nombreClinica" placeholder="Ingrese el nombre de la clínica">
            <div *ngIf="clinicForm.get('nombreClinica')?.touched && clinicForm.get('nombreClinica')?.errors?.['required']">
                <small class="text-danger">El nombre de la clínica es requerido.</small>
            </div>
        </div>
        
        
        <div class="form-group mb-3">
            <label for="direccion">Dirección</label>
            <input type="text" class="form-control" id="direccion" formControlName="direccion" placeholder="Ingrese la dirección">
            <div *ngIf="clinicForm.get('direccion')?.touched && clinicForm.get('direccion')?.errors?.['required']">
                <small class="text-danger">La dirección es requerida.</small>
            </div>
        </div>
        <div class="form-group mb-3">
            <label for="telefono">Teléfono</label>
            <input type="tel" class="form-control" id="telefono" formControlName="telefono" placeholder="Ingrese el teléfono">
            <div *ngIf="clinicForm.get('telefono')?.touched && clinicForm.get('telefono')?.errors?.['required']">
                <small class="text-danger">El teléfono es requerido.</small>
            </div>
            <div *ngIf="clinicForm.get('telefono')?.touched && clinicForm.get('telefono')?.errors?.['pattern']">
                <small class="text-danger">El teléfono debe tener 10 dígitos.</small>
            </div>
        </div>

        <div class="form-group mb-3">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" formControlName="email" placeholder="Ingrese el email">
            <div *ngIf="clinicForm.get('email')?.touched && clinicForm.get('email')?.errors?.['required']">
                <small class="text-danger">El email es requerido.</small>
            </div>
            <div *ngIf="clinicForm.get('email')?.touched && clinicForm.get('email')?.errors?.['email']">
                <small class="text-danger">Debe ser un email válido.</small>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Registrar Clínica</button>
    </form>
</div>


import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import Swal from 'sweetalert2';
import { InfoclinicaService } from '../../services/infoclinica.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-agregar-info-clinica',
  templateUrl: './agregar-info-clinica.component.html',
  styleUrls: ['./agregar-info-clinica.component.scss']
})
export class AgregarInfoClinicaComponent {

  clinicForm: FormGroup;

  constructor(private formBuilder: FormBuilder, private InfoclinicaService: InfoclinicaService, private router: Router) {
    this.clinicForm = this.formBuilder.group({
        nombreClinica: ['', Validators.required],
        direccion: ['', Validators.required],
        telefono: ['', [Validators.required, Validators.pattern("\\d{10}")]], // Validación para número de teléfono de 10 dígitos
        email: ['', [Validators.required, Validators.email]]
    });
}

crearInfoClinica() {
  const formData = this.clinicForm.value;
  console.log(formData);

  this.InfoclinicaService.crearInfoClinica(formData).subscribe(
    (respuesta:any) => {
       // Navegar al Dashboard ya que el registro fue EXITOSO!!
       
       Swal.fire('Mensaje', respuesta.msg, 'success');
  
    
  }, (err) => {
    Swal.fire('Error', err.error.msg, 'error'); //al incluir err.error.msg se Accede al mensaje de error incluido en el backenend en caso de que el correo ya este registrado
  } );
}

}
<!-- clinic-form.component.html -->
<div class="container mt-5">
    <h2>Registro de Clínica</h2>
    <form [formGroup]="clinicForm" (ngSubmit)="crearInfoClinica()">
        <div class="form-group mb-3">
            <label for="nombreClinica">Nombre de la Clínica</label>
            <input type="text" class="form-control" id="nombreClinica" formControlName="nombreClinica" placeholder="Ingrese el nombre de la clínica">
            <div *ngIf="clinicForm.get('nombreClinica')?.touched && clinicForm.get('nombreClinica')?.errors?.['required']">
                <small class="text-danger">El nombre de la clínica es requerido.</small>
            </div>
        </div>
        
        
        <div class="form-group mb-3">
            <label for="direccion">Dirección</label>
            <input type="text" class="form-control" id="direccion" formControlName="direccion" placeholder="Ingrese la dirección">
            <div *ngIf="clinicForm.get('direccion')?.touched && clinicForm.get('direccion')?.errors?.['required']">
                <small class="text-danger">La dirección es requerida.</small>
            </div>
        </div>
        <div class="form-group mb-3">
            <label for="telefono">Teléfono</label>
            <input type="tel" class="form-control" id="telefono" formControlName="telefono" placeholder="Ingrese el teléfono">
            <div *ngIf="clinicForm.get('telefono')?.touched && clinicForm.get('telefono')?.errors?.['required']">
                <small class="text-danger">El teléfono es requerido.</small>
            </div>
            <div *ngIf="clinicForm.get('telefono')?.touched && clinicForm.get('telefono')?.errors?.['pattern']">
                <small class="text-danger">El teléfono debe tener 10 dígitos.</small>
            </div>
        </div>

        <div class="form-group mb-3">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" formControlName="email" placeholder="Ingrese el email">
            <div *ngIf="clinicForm.get('email')?.touched && clinicForm.get('email')?.errors?.['required']">
                <small class="text-danger">El email es requerido.</small>
            </div>
            <div *ngIf="clinicForm.get('email')?.touched && clinicForm.get('email')?.errors?.['email']">
                <small class="text-danger">Debe ser un email válido.</small>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Registrar Clínica</button>
    </form>
</div>


import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import Swal from 'sweetalert2';
import { InfoclinicaService } from '../../services/infoclinica.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-agregar-info-clinica',
  templateUrl: './agregar-info-clinica.component.html',
  styleUrls: ['./agregar-info-clinica.component.scss']
})
export class AgregarInfoClinicaComponent {

  clinicForm: FormGroup;

  constructor(private formBuilder: FormBuilder, private InfoclinicaService: InfoclinicaService, private router: Router) {
    this.clinicForm = this.formBuilder.group({
        nombreClinica: ['', Validators.required],
        direccion: ['', Validators.required],
        telefono: ['', [Validators.required, Validators.pattern("\\d{10}")]], // Validación para número de teléfono de 10 dígitos
        email: ['', [Validators.required, Validators.email]]
    });
}

crearInfoClinica() {
  const formData = this.clinicForm.value;
  console.log(formData);

  this.InfoclinicaService.crearInfoClinica(formData).subscribe(
    (respuesta:any) => {
       // Navegar al Dashboard ya que el registro fue EXITOSO!!
       
       Swal.fire('Mensaje', respuesta.msg, 'success');
  
    
  }, (err) => {
    Swal.fire('Error', err.error.msg, 'error'); //al incluir err.error.msg se Accede al mensaje de error incluido en el backenend en caso de que el correo ya este registrado
  } );
}

}

<div class="container">
    <h1 class="title">Bienvenido al Sistema de Gestión de Citas Médicas</h1>
    <p class="introduction">
        A continuación, encontrará instrucciones detalladas para facilitar la gestión de su clínica. Por favor, siga estos pasos en el orden presentado para una experiencia eficiente.
    </p>
    <ol class="instruction-list">
        <li><strong>Registro de Pacientes:</strong> Registre a los pacientes en la sección "Gestionar Pacientes". Utilice el botón "Crear Usuarios" para completar el formulario, tenga en cuenta que los pacientes se pueden registrar en la aplicacio en el formulario de registro de paciente en la patalla de registro o registrarlos por su cuenta.</li>
        <li><strong>Creación de Tipos de Citas Médicas:</strong> Defina tipos de citas médicas (ej: cardiología, psicología), asignando duración y precio en la sección correspondiente.</li>
        <li><strong>Registro de Médicos:</strong> Un vez tenga tipos citas y especialidades medicas registradas, Registre a los médicos en "Gestionar Médicos". Haga clic en "Crear Médicos" y complete el formulario correspondiente, asignandole una especialidad medica a su medico.</li>   
        <li><strong>Creación de Horarios para Médicos:</strong> Una vez que les asigne especialidades medicas a lo medicos registrados en la aplicacion, puede crear horarios para estos medicos  en "Gestionar Horarios Médicos", seleccionando "Crear Horario Médico" y completando el formulario, asegurese de contar con los recursos suficientes  y disponer de salas disponibles para cada cita medica antes de registrar horarios a sus medicos.</li>    
        <li><strong>Programación de Citas Médicas:</strong> Programe citas médicas para los pacientes. Pueden ser compradas por los usuarios de la aplicación o registradas por usted mismo, en en el modulo de gestionar citas, tenga en cuenta que para agendar citas medicas debe tener pacientes registrados en la aplicacion, especialidades medicas registradas, especialistas medicos que puedan atender pacientes que requieran de dichas especialidades y haber definido los horarios  medicos en el aparatado de gestionar horarios como se explico anteriormente, todo esto con el fin de que el sistema tenga la informacion suficiente para poder buscar bloques de horarios disponibles en funcion de su especialidad medica y de la fecha seleccionada. </li>
        <li><strong>Importancia cambiar estados de citas medicas:</strong>En los sistemas de citas medicas existen 4 estados, pagado que es cuando un paciente pago una cita, no_pagado que es cuando un paciente fallo en la en la transaccion de compra de una cita, en_curso que es cuando la cita es registrada por el administrador y pagada en efectivo en la misma clinica, terminado cuando el paciente finaliza su cita medica, y no asistio que es cuando el paciente no asiste a su cita .</li>
        <li><strong>¿Como gestionar los estados?:</strong>Si el paciente esta en un estado en_curso o pagado el paciente no podra agendar otra cita medica hasta que su estado haya cambiado a terminado, es por este motivo que es de SUMA IMPORTANCIA cambiar el estado de un paciente  una vez que termine su cita para poder agendar otra, esto para tambien es importante para los historiales medicos, ya que los medicos solo podran redactar historiales para paciente que tenga una cita en_curso, pagada, o terminada  .</li>
    </ol>
</div>

import { Component } from '@angular/core';

@Component({
  selector: 'app-inicio',
  templateUrl: './inicio.component.html',
  styleUrls: ['./inicio.component.scss']
})
export class InicioComponent {

}
.container {
    max-width: 800px; 
    margin: auto; 
    padding: 20px;
    background-color: #f8f8f8;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.title {
    text-align: center;
    color: #333;
    font-size: 24px;
    margin-bottom: 16px;
    font-weight: bold; 
}

.introduction {
    font-size: 16px;
    color: #555;
    margin-bottom: 20px;
    font-style: italic; 
}

.instruction-list {
    list-style-type: none;
    padding: 0;
    max-width: 700px; 
    margin: auto; 
}

.instruction-list li {
    background-color: #fff;
    margin-bottom: 10px;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease; 
}

.instruction-list li:hover {
    transform: scale(1.05); 
}

.instruction-list li strong {
    color: #007bff;
    font-size: 18px; 
}

.instruction-list li::before {
    content: '• ';
    color: #007bff;
    font-size: 20px;
    margin-right: 5px; 
}


.instruction-list li {
    border: 1px solid #ddd;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

<div class="container">
    <h1 class="title">Bienvenido al Sistema de Gestión de Citas Médicas</h1>
    <p class="introduction">
        A continuación, encontrará instrucciones detalladas para facilitar la gestión de su clínica. Por favor, siga estos pasos en el orden presentado para una experiencia eficiente.
    </p>
    <ol class="instruction-list">
        <li><strong>Registro de Pacientes:</strong> Registre a los pacientes en la sección "Gestionar Pacientes". Utilice el botón "Crear Usuarios" para completar el formulario, tenga en cuenta que los pacientes se pueden registrar en la aplicacio en el formulario de registro de paciente en la patalla de registro o registrarlos por su cuenta.</li>
        <li><strong>Creación de Tipos de Citas Médicas:</strong> Defina tipos de citas médicas (ej: cardiología, psicología), asignando duración y precio en la sección correspondiente.</li>
        <li><strong>Registro de Médicos:</strong> Un vez tenga tipos citas y especialidades medicas registradas, Registre a los médicos en "Gestionar Médicos". Haga clic en "Crear Médicos" y complete el formulario correspondiente, asignandole una especialidad medica a su medico.</li>   
        <li><strong>Creación de Horarios para Médicos:</strong> Una vez que les asigne especialidades medicas a lo medicos registrados en la aplicacion, puede crear horarios para estos medicos  en "Gestionar Horarios Médicos", seleccionando "Crear Horario Médico" y completando el formulario, asegurese de contar con los recursos suficientes  y disponer de salas disponibles para cada cita medica antes de registrar horarios a sus medicos.</li>    
        <li><strong>Programación de Citas Médicas:</strong> Programe citas médicas para los pacientes. Pueden ser compradas por los usuarios de la aplicación o registradas por usted mismo, en en el modulo de gestionar citas, tenga en cuenta que para agendar citas medicas debe tener pacientes registrados en la aplicacion, especialidades medicas registradas, especialistas medicos que puedan atender pacientes que requieran de dichas especialidades y haber definido los horarios  medicos en el aparatado de gestionar horarios como se explico anteriormente, todo esto con el fin de que el sistema tenga la informacion suficiente para poder buscar bloques de horarios disponibles en funcion de su especialidad medica y de la fecha seleccionada. </li>
        <li><strong>Importancia cambiar estados de citas medicas:</strong>En los sistemas de citas medicas existen 4 estados, pagado que es cuando un paciente pago una cita, no_pagado que es cuando un paciente fallo en la en la transaccion de compra de una cita, en_curso que es cuando la cita es registrada por el administrador y pagada en efectivo en la misma clinica, terminado cuando el paciente finaliza su cita medica, y no asistio que es cuando el paciente no asiste a su cita .</li>
        <li><strong>¿Como gestionar los estados?:</strong>Si el paciente esta en un estado en_curso o pagado el paciente no podra agendar otra cita medica hasta que su estado haya cambiado a terminado, es por este motivo que es de SUMA IMPORTANCIA cambiar el estado de un paciente  una vez que termine su cita para poder agendar otra, esto para tambien es importante para los historiales medicos, ya que los medicos solo podran redactar historiales para paciente que tenga una cita en_curso, pagada, o terminada  .</li>
    </ol>
</div>

.container {
    max-width: 800px; 
    margin: auto; 
    padding: 20px;
    background-color: #f8f8f8;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.title {
    text-align: center;
    color: #333;
    font-size: 24px;
    margin-bottom: 16px;
    font-weight: bold; 
}

.introduction {
    font-size: 16px;
    color: #555;
    margin-bottom: 20px;
    font-style: italic; 
}

.instruction-list {
    list-style-type: none;
    padding: 0;
    max-width: 700px; 
    margin: auto; 
}

.instruction-list li {
    background-color: #fff;
    margin-bottom: 10px;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease; 
}

.instruction-list li:hover {
    transform: scale(1.05); 
}

.instruction-list li strong {
    color: #007bff;
    font-size: 18px; 
}

.instruction-list li::before {
    content: '• ';
    color: #007bff;
    font-size: 20px;
    margin-right: 5px; 
}


.instruction-list li {
    border: 1px solid #ddd;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
import { Component } from '@angular/core';

@Component({
  selector: 'app-inicio',
  templateUrl: './inicio.component.html',
  styleUrls: ['./inicio.component.scss']
})
export class InicioComponent {

}
export interface Bloque {
    medicoNombre: string;
    hora_inicio: string;
    hora_fin: string;
    precio: number;
  }
  
  export interface MedicoResponse {
    ok: boolean;
    bloques: Bloque[];
  }
  interface CitaMedica {
    idCita: number;
    motivo: string;
    fecha: string;
    hora_inicio: string;
    hora_fin: string;
    estado: string;
    paciente: {
      nombre: string;
    };
    medico: {
      nombre: string;
    };
    tipoCita: {
      especialidad_medica: string;
    };
  }
  
  interface CitasResponse {
    ok: boolean;
    citas: CitaMedica[];
  }
  export interface CitaMedica {
    idCita: number;
    motivo: string;
    fecha: string;
    hora_inicio: string;
    hora_fin: string;
    estado: string;
    paciente: {
      nombre: string;
      apellidos: string;
    };
    medico: {
      nombre: string;
      apellidos: string;
    };
    tipoCita: {
      especialidad_medica: string;
    };
  }
  
  export interface CitasResponse {
    ok: boolean;
    citas: CitaMedica[];
    total?: number; // La propiedad total es opcional porque solo aparece en una de las respuestas
  }
  export interface CitasResponsex {
    ok?: boolean;  
    cita: CitaMedica;
}

export interface CitaMedica {
    idCita: number;
    motivo: string;
    fecha: string;
    hora_inicio: string;
    hora_fin: string;
    estado: string;
    rut_paciente: string;
    rut_medico: string;
    tipo_cita: string;  // Cambiado de 'especialidad_medica' a 'tipo_cita'
    idTipoCita: number;
    
}
export interface HorarioMedico {
    idHorario: number;
    diaSemana: string;
    horaInicio: string;
    horaFinalizacion: string;
    inicio_colacion?: string;
    fin_colacion?: string;
    duracionCitas: number;
    rut_medico: string;
    disponibilidad: boolean;
    fechaCreacion: string;
    medico: {
      nombre: string;
      apellidos: string,
      especialidad_medica: string;
      
    };
 
  }
 
  export interface HorarioResponse {
    total: number;
    horarios: HorarioMedico[];
  }export interface MedicoResponse {
  ok: boolean;
  total: number;
  medicos: Medico[];
}

export interface Medico {
  rut: string;
  nombre: string;
  apellidos: string;
  telefono: string;
  email: string;
  direccion: string;
  foto: string;
  nacionalidad: string;
  especialidad_medica: string;
  password: string;

}

  export interface Paciente {
  ok: boolean,
  rut: string;
  nombre: string;
  apellidos: string;
  email: string;
  fecha_nacimiento: string;
  telefono: string;
  direccion: string;
  rol: string;
  toral:number;
}

export interface UsuariosResponse {
  usuarios: Paciente[];
  total: number;
}
  export interface tipoCitaResponse {
    tipo_cita: Tipo_cita[];
    total: number;
  }
  
  export interface Tipo_cita {
    idTipo: number;
    tipo_cita: string;
    precio: number;
    especialidad_medica: string;
    duracion_cita: number;
    createdAt: string;
    updatedAt: string;
  }<div class="grid p-3">
    <div class="col-12 mt-5 md:col-6 md:col-offset-3 md:mt-8">
        <app-dashboard></app-dashboard>
        <router-outlet></router-outlet>
    </div>
  </div>
import { Component } from '@angular/core';
import { SidebarService } from 'src/app/shared/sidebar.service';

@Component({
  selector: 'app-layout-page2',
  templateUrl: './layout-page.component.html',
  styleUrls: ['./layout-page.component.scss']
})
export class LayoutPageComponent {
  
  constructor(private sidebarService: SidebarService){}

  ngOnInit(): void {

    this.sidebarService.cargarMenu();
  

  }

}
<div class="grid p-3">
    <div class="col-12 mt-5 md:col-6 md:col-offset-3 md:mt-8">
        <app-dashboard></app-dashboard>
        <router-outlet></router-outlet>
    </div>
  </div>
import { Component } from '@angular/core';
import { SidebarService } from 'src/app/shared/sidebar.service';

@Component({
  selector: 'app-layout-page2',
  templateUrl: './layout-page.component.html',
  styleUrls: ['./layout-page.component.scss']
})
export class LayoutPageComponent {
  
  constructor(private sidebarService: SidebarService){}

  ngOnInit(): void {

    this.sidebarService.cargarMenu();
  

  }

}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs';
import { environment } from 'src/environment/environment';


const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class BusquedasService {

  constructor( private http: HttpClient) { }

  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}

  buscar(tipo: 'medicos' | 'usuarios' | 'horario_medico' | 'tipo_cita' | 'cita_medica' | 'facturas'| 'cita_medico'| 'historiales', termino: string) {
    console.log('aqui esta los headers',this.headers);
    const url = `${base_url}/busqueda/coleccion/${tipo}/${termino}`;
    return this.http.get<any[]>(url, this.headers)
        .pipe(
            map((resp: any) => {
                switch (tipo) {
                    case 'medicos':
                        return resp.citas;
                    case 'usuarios':
                        return resp.citas;
                    case 'horario_medico':
                        return resp.citas;
                    case 'tipo_cita':
                        return resp.citas; 
                    case 'cita_medica':
                        return resp;
                        case 'facturas':
                          return resp; 
                          case 'cita_medico':
                            return resp; 
                            case 'historiales':
                            return resp; 
                    default:
                        return [];
                }
            })
        );
}

cargarMedicos() {
  //localhost:3000/api/usuarios?desde=0
  const url = `${ base_url }/busqueda_cita`;
  return this.http.get( url, this.headers)
     
      
}






}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from 'src/environment/environment';
import { CitaMedica, CitasResponse } from '../interface/cita_medica';
import { Observable } from 'rxjs';
import { CitasResponsex } from '../interface/cita_medicaResponse';
import { CitaMedicaF } from '../../../pacientes/pages/interfaces/payment'
const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class CitaMedicaService {

  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}
  constructor( private http: HttpClient) { }

  
  crearCitaMedica( formData: any ){    
    return this.http.post<any>(`${base_url}/cita_medica`,formData, this.headers)

  }

  crearCitaMedicaPaciente(formData: any, rutPaciente: string) {
    // Incluye el rutPaciente en el objeto formData
    const data = {
      ...formData,
      rutPaciente: rutPaciente 
    };

    console.log('AQUI ESTA LA DATA',data);
    
    // Ahora, envía solo data y las opciones (que incluyen los headers)
    return this.http.post<any>(`${base_url}/cita_medica/crearCitapaciente`, data, this.headers);
  }
  

  obtenerCitaMedicaPorId(  horarioId: number ):Observable<CitasResponse>{ //aca role no viene como parametro (viene email y nombre en this.perfilForm.value) pero aun asi funciona ya que role simplemente se ignora
    
    return this.http.get<CitasResponse>(`${ base_url }/cita_medica/${horarioId}`, this.headers) //Para actualizar los datos del usuario se necesita enviar al backend El id que se obtiene de un metodo get que me da el id del usuario logeado que es el mismo que esta intentando actualizar sus datos, la data que se quiere actualizar que es enviada por un formulario y los header con el token de acceso
     
  }

  obtenerCitamedicaFacturaPorId( idCita: number ){
    console.log('AQUI ESTA EL ID DE LA CITA QUE LLEGA AL METODO obtenerCitamedicaFacturaPorId',idCita);
    return this.http.get<any>(`${ base_url }/cita_medica/${idCita}`, this.headers) 
     
  }

  obtenerCitaMedicaPorIdParaMedicos(rutMedico: string, desde: number, limite: number = 5): Observable<CitasResponse> { 
    const url = `${ base_url }/cita_medica/medico/${rutMedico}?desde=${desde}&limite=${limite}`;
    console.log('URL de solicitud:', url);
    return this.http.get<CitasResponse>(url, this.headers); 
}

obtenerCitaMedicaPorIdParaPacientes(rutPaciente: string, desde: number, limite: number = 5): Observable<CitasResponse> { 
  const url = `${ base_url }/cita_medica/usuario/${rutPaciente}?desde=${desde}&limite=${limite}`;
  console.log('URL de solicitud:', url);
  return this.http.get<CitasResponse>(url, this.headers); 
}

  cargarCitaMedica(desde: number = 0) {
   
    const url = `${base_url}/cita_medica?desde=${desde}`;
    return this.http.get<CitasResponse>(url, this.headers);
  }

  borrarCitaMedica( id: number ){
    const url = `${ base_url }/cita_medica/${ id }`;
    return this.http.delete( url, this.headers );
  }

  actualizarCita(id: number, data: any): Observable<any> {
    const url = `${ base_url }/cita_medica/${ id }`;
    return this.http.put(url, data, this.headers);
  }

}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from 'src/environment/environment';

const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class FacturaService {

  get token(): string {
    return localStorage.getItem('token') || '';
  }
  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}

  constructor(private http: HttpClient) { }

  cargarAllFactura( desde: number ) {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/mercadoPago/factura?desde=${ desde }`;
    return this.http.get( url, this.headers)
       
        
  }
  obtenerFacturaPorId(  id : string ){ 
    
    console.log('aqui llega el id',id);
    return this.http.get(`${ base_url }/mercadoPago/factura/${id}`, this.headers) 
     
  }

  borrarFactura( id: number ){
    console.log(id);
    const url = `${ base_url }/factura/${ id }`;
    return this.http.delete( url, this.headers );
  }

}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { HorarioMedico, HorarioResponse } from '../interface/horarioMedico';
import { Observable, tap } from 'rxjs';
import { environment } from 'src/environment/environment';
import { BloquesResponse } from 'src/app/pacientes/pages/interfaces/busqueda-medicos';

const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class HorarioMedicoService {

  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}



  constructor( private http: HttpClient) { }

  crearHorario( formData: HorarioMedico  ){    
    return this.http.post<HorarioMedico>(`${base_url}/horario_medico`,formData, this.headers)

  }

  obtenerHorarioPorId(  horarioId: number ){ 
    
    return this.http.get(`${ base_url }/horario_medico/${horarioId}`, this.headers) 
     
  }

  cargarHorario(desde: number = 0) {
    const url = `${base_url}/horario_medico?desde=${desde}`;
    return this.http.get<HorarioResponse>(url, this.headers);
  }

  borrarHorario( id: number ){
    console.log(id);
    const url = `${ base_url }/horario_medico/${ id }`;
    return this.http.delete( url, this.headers );
  }

  editarHorario(horario: HorarioMedico): Observable<any> {
    return this.http.put(`${ base_url }/horario_medico/${horario.idHorario}`, horario, this.headers);
  }

  buscarHorarioDisponible(formData:any): Observable<BloquesResponse> {
    console.log('ESTE ES EL FORMDATA',formData);
    const url = `${base_url}/busqueda_cita`;
    return this.http.post<BloquesResponse>(url, formData);
}



}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { tap } from 'rxjs';
import { environment } from 'src/environment/environment';

const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class InfoclinicaService {
  get token(): string {
    return localStorage.getItem('token') || '';
  }
  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}

  constructor(private http: HttpClient) { }



  crearInfoClinica( formData: any  ){
    
    return this.http.post(`${base_url}/horario_clinica/Infoclinica`,formData, this.headers)
      
  }

  cargarInfoClinica() {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/horario_clinica/Infoclinica`;
    return this.http.get( url, this.headers)      
  }

  borrarInfoClinica( id: number ){
    console.log('AQUI ESTA EL ID DE LA CLINICA',id);
    const url = `${ base_url }/horario_clinica/Infoclinica/${ id }`;
    return this.http.delete( url, this.headers );
  }

  

}
import { Injectable } from '@angular/core';
import { Medico, MedicoResponse } from '../interface/medicos'
import { HttpClient } from '@angular/common/http';
import { Observable, map, pipe, tap } from 'rxjs';
import { environment } from 'src/environment/environment';
import { Router } from '@angular/router';

const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})

export class MedicoService {

  get token(): string {
    return localStorage.getItem('token') || '';
  }
  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}



  constructor( private http: HttpClient) { }

  crearMedico( formData: Medico  ): Observable<Medico>{
    console.log('creando medico')    
    return this.http.post(`${base_url}/medicos`,formData, this.headers)
        .pipe(
            tap( (resp:any) => { 
             
              
            })
        )
  }

  cargarMedicos(desde: number = 0 ):Observable<MedicoResponse> {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/medicos?desde=${ desde }`;
    return this.http.get<MedicoResponse>( url, this.headers)      
  }

  cargarAllmedicos( ):Observable<MedicoResponse> {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/medicos/all`;
    return this.http.get<MedicoResponse>( url, this.headers)
       
        
  }

  cargarmedicosEspecialidad( ) {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/medicos/Especialidades`;
    return this.http.get( url, this.headers)
       
        
  }

  borrarMedico( id: string ){

    const url = `${ base_url }/medicos/${ id }`;
    return this.http.delete( url, this.headers );
  }

  obtenerMedicoPorId(  medicoId:string ){ 
    
    console.log(medicoId);
    return this.http.put(`${ base_url }/medicos/${medicoId}`, this.headers) 
     
  }

  editarMedico(medico: Medico): Observable<any> {
    return this.http.put(`${ base_url }/medicos/${medico.rut}`, medico, this.headers);
  }


}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from 'src/environment/environment';
import { Medico } from '../interface/medicos';
import { Observable } from 'rxjs';
import { Tipo_cita, tipoCitaResponse } from '../interface/tipoCita';
import { HorarioMedico } from '../interface/horarioMedico';

const base_url = environment.base_url;

  


@Injectable({
  providedIn: 'root'
})
export class TipoCitaService {

  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}


  constructor( private http: HttpClient) { }

  cargaTipocita( desde: number = 0 ) {
    const url = `${ base_url }/tipo_cita?desde=${ desde }`;
    return this.http.get<tipoCitaResponse>( url, this.headers)   
  }

  
  crearTipoCita(formData: Tipo_cita): Observable<tipoCitaResponse> {
    return this.http.post<tipoCitaResponse>(`${base_url}/tipo_cita`, formData, this.headers);
  }

  borrarTipoCita( id: number ){
    console.log(id);
    const url = `${ base_url }/tipo_cita/${ id }`;
    return this.http.delete( url, this.headers );
  }

  cargaEspecialidades( ) {
    const url = `${ base_url }/tipo_cita/especialidades`;
    return this.http.get<any>( url, this.headers)   
  }

  obtenerTipoCitaId(  tipoCitaId:string ){ 
  
    return this.http.get(`${ base_url }/tipo_cita/${tipoCitaId}`, this.headers) 
     
  }

  
  editarTipoCita(TipoCita: any): Observable<any> {
    console.log('AQUI ESTA EL ID TIPO CITA',TipoCita.idTipo);
    return this.http.put(`${ base_url }/tipo_cita/${TipoCita.idTipo}`, TipoCita, this.headers);
  }
  

  /*
      crearTipoCita(formData: Tipo_cita): Observable<tipoCitaResponse> {
    const url = `${base_url}/tipo_cita`; // Reemplaza con la URL correcta
    return this.http.post<tipoCitaResponse>(url, formData);
  }
  */
}
import { Injectable, OnInit } from '@angular/core';
import { Paciente, UsuariosResponse } from '../interface/paciente';
import { environment } from 'src/environment/environment';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

interface DeleteResponse {
  msg: string;
}

const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})

export class PacienteService  {

  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}


  constructor( private http: HttpClient) { }


  cargarPacientes( desde:number=0):Observable<UsuariosResponse> {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/usuarios?desde=${ desde }`;
    return this.http.get<UsuariosResponse>( url, this.headers)      
  }

  cargarAllPacientes():Observable<UsuariosResponse> {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/usuarios/all`;
    return this.http.get<UsuariosResponse>( url, this.headers)      
  }

  cargarAllPacientesEnCurso(rut_medico:string):Observable<UsuariosResponse> {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/usuarios/allCurso/${ rut_medico }`;
    return this.http.get<UsuariosResponse>( url, this.headers)      
  }
  
  cargarAllPacientesEnCursoTerminado(rut_medico:string):Observable<UsuariosResponse> {
    //localhost:3000/api/usuarios?desde=0
    const url = `${ base_url }/usuarios/allCursoTerminado/${ rut_medico }`;
    return this.http.get<UsuariosResponse>( url, this.headers)      
  }

  borrarPaciente( id: string ){
    console.log(id);
    const url = `${ base_url }/usuarios/${ id }`;
    return this.http.delete<DeleteResponse>( url, this.headers );
  }

  crearPaciente( formData: Paciente  ){    
    return this.http.post<Paciente>(`${base_url}/usuarios`,formData,this.headers)

  }

  guardarUsuario(paciente: Paciente){
    console.log(paciente);
    return this.http.put(`${ base_url }/usuarios/${paciente.rut}`, paciente, this.headers);
  }

  
  editarUsuario(usuario: any): Observable<any> {
    return this.http.put(`${ base_url }/usuarios/${usuario.rut}`, usuario, this.headers);
  }

  obtenerUsuarioPorId(  usuarioId:string ){ //aca role no viene como parametro (viene email y nombre en this.perfilForm.value) pero aun asi funciona ya que role simplemente se ignora
    
    console.log(usuarioId);
    return this.http.put(`${ base_url }/usuarios/${usuarioId}`, this.headers) //Para actualizar los datos del usuario se necesita enviar al backend El id que se obtiene de un metodo get que me da el id del usuario logeado que es el mismo que esta intentando actualizar sus datos, la data que se quiere actualizar que es enviada por un formulario y los header con el token de acceso
     
  }

  

}
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { LoginComponent } from './pages/login/login.component';
import { RegisterComponent } from './pages/register/register.component';
import { PasswordComponent } from './pages/password/password.component';


const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent,
    children: [
      { path: 'login', component: LoginComponent },
      { path: 'register', component: RegisterComponent },
      { path: 'recuperarPassword', component: PasswordComponent },
      { path: '**', redirectTo: 'login' },
    ],
  },
];



@NgModule({
  imports: [ RouterModule.forChild( routes ) ],
  exports: [ RouterModule ],
})
export class AuthRoutingModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { AuthRoutingModule } from './auth-routing.module';
import { MaterialModule } from '../material/material.module';

import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { LoginComponent } from './pages/login/login.component';

import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RegisterComponent } from './pages/register/register.component';
import Swal from 'sweetalert2';
import { PasswordComponent } from './pages/password/password.component';





@NgModule({
  declarations: [
    LayoutPageComponent,
    LoginComponent,
    RegisterComponent,
    PasswordComponent
  ],
  imports: [
    CommonModule,
    AuthRoutingModule,
    MaterialModule,
    FormsModule,
    ReactiveFormsModule,
   
  ]
})
export class AuthModule { }import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { LoginComponent } from './pages/login/login.component';
import { RegisterComponent } from './pages/register/register.component';
import { PasswordComponent } from './pages/password/password.component';


const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent,
    children: [
      { path: 'login', component: LoginComponent },
      { path: 'register', component: RegisterComponent },
      { path: 'recuperarPassword', component: PasswordComponent },
      { path: '**', redirectTo: 'login' },
    ],
  },
];



@NgModule({
  imports: [ RouterModule.forChild( routes ) ],
  exports: [ RouterModule ],
})
export class AuthRoutingModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { AuthRoutingModule } from './auth-routing.module';
import { MaterialModule } from '../material/material.module';

import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { LoginComponent } from './pages/login/login.component';

import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { RegisterComponent } from './pages/register/register.component';
import Swal from 'sweetalert2';
import { PasswordComponent } from './pages/password/password.component';





@NgModule({
  declarations: [
    LayoutPageComponent,
    LoginComponent,
    RegisterComponent,
    PasswordComponent
  ],
  imports: [
    CommonModule,
    AuthRoutingModule,
    MaterialModule,
    FormsModule,
    ReactiveFormsModule,
   
  ]
})
export class AuthModule { }import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})
export class AdminGuard implements CanActivate {

  constructor( private AuthService: AuthService,
               private router: Router ) {}

  canActivate(
    
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): boolean {
      console.log('OLAAAAAAAAA');
      if (this.AuthService.usuario?.rol === 'ADMIN_ROLE') {
        console.log('aqui esta el rol del usuario',this.AuthService.usuario?.rol )
        return true;
      } else {
        this.router.navigateByUrl('/auth/login');
        return false;
      }

      // return (this.usuarioService.role === 'ADMIN_ROLE') ? true : false;

  }
  
}
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, CanLoad, Route, UrlSegment, UrlTree } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { tap } from 'rxjs/operators';
import { Observable } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate, CanLoad {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(): Observable<boolean> | boolean {
    console.log('🛡️ AuthGuard - canActivate iniciado');
    return this.authService.validarToken().pipe(
      tap((valid) => {
        console.log('🛡️ Resultado de validación de token:', valid);
        if (!valid) {
          console.log('🛡️ Redireccionando a /auth porque el token no es válido');
          this.router.navigate(['/auth']);
        } else {
          console.log('🛡️ Token válido, permitiendo navegación');
          // Verificar explícitamente qué tipo de usuario está autenticado
          if (this.authService.usuario) {
            console.log('🛡️ Usuario autenticado:', this.authService.usuario);
          } else if (this.authService.medico) {
            console.log('🛡️ Médico autenticado:', this.authService.medico);
          } else {
            console.log('🛡️ ALERTA: No hay usuario ni médico autenticado a pesar de token válido');
          }
        }
      })
    );
  }
  
  canLoad(): Observable<boolean> | boolean {
    console.log('🛡️ AuthGuard - canLoad iniciado');
    return this.authService.validarToken().pipe(
      tap((valid) => {
        console.log('🛡️ Resultado de validación de token (canLoad):', valid);
        if (!valid) {
          console.log('🛡️ Redireccionando a /auth porque el token no es válido (canLoad)');
          this.router.navigate(['/auth']);
        }
      })
    );
  }
}import { ActivatedRouteSnapshot, CanActivate, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})

export class medicGuard implements CanActivate {

  constructor( private AuthService: AuthService,
               private router: Router ) {}

  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): boolean {
      console.log('CanActivate is being executed en medicos');
    
      if (this.AuthService.medico?.rol === 'MEDICO_ROLE') {
        console.log('AQUI ESTA EL ROL DEL MEDICO',this.AuthService.medico.rol )
        return true;
      } else {
        this.router.navigateByUrl('/auth/login');
        return false;
      }

      // return (this.usuarioService.role === 'ADMIN_ROLE') ? true : false;

  }
  
}
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, CanActivateFn, Router, RouterStateSnapshot } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({
  providedIn: 'root'
})

export class patientGuard implements CanActivate {

  constructor( private AuthService: AuthService,
               private router: Router ) {}

  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): boolean {

    
      if (this.AuthService.usuario?.rol === 'USER_ROLE') {
        console.log('AQUI ESTA EL ROL DEL USUARIO',this.AuthService.usuario.rol )
        return true;
      } else {
        this.router.navigateByUrl('/auth/login');
        return false;
      }

      // return (this.usuarioService.role === 'ADMIN_ROLE') ? true : false;

  }
  
}

export interface LoginForm {
    password: string;
    email: string ;
    remember: boolean;
}
export interface RegisterForm {
    rut: string;
    nombre: string;
    apellidos: string;
    email: string;
    password: string;
    fecha_nacimiento: string;
    telefono: string;
    direccion: string;
  }
<div class="grid p-3" style="min-height: 100vh; overflow-y: auto;">
    <div class="col-12 mt-5 md:col-6 md:col-offset-3 md:mt-8">
        <router-outlet></router-outlet>
    </div>
</div>import { Component } from '@angular/core';

@Component({
  selector: 'app-layout-page',
  templateUrl: './layout-page.component.html',
  styleUrls: ['./layout-page.component.scss']
})
export class LayoutPageComponent {

}
:host {
    display: block;
    min-height: 100vh;
  }
  
  .grid {
    min-height: 100vh;
  }
<div class="grid p-3" style="min-height: 100vh; overflow-y: auto;">
    <div class="col-12 mt-5 md:col-6 md:col-offset-3 md:mt-8">
        <router-outlet></router-outlet>
    </div>
</div>:host {
    display: block;
    min-height: 100vh;
  }
  
  .grid {
    min-height: 100vh;
  }import { Component } from '@angular/core';

@Component({
  selector: 'app-layout-page',
  templateUrl: './layout-page.component.html',
  styleUrls: ['./layout-page.component.scss']
})
export class LayoutPageComponent {

}
<form [formGroup]="miFormulario" (ngSubmit)="login()">
  <div class="flex flex-column">
    <span class="text-lg mb-4">Login</span>

    <mat-form-field>
      <mat-label>Email</mat-label>
      <input type="text" matInput formControlName="email" placeholder="email de usuario">
    </mat-form-field>

    <mat-form-field>
      <mat-label>Contraseña</mat-label>
      <input type="password" matInput formControlName="password" placeholder="Contraseña">
    </mat-form-field>

    <button mat-button mat-flat-button color="primary" type="submit">
      <mat-icon>save</mat-icon>
      Ingresar
    </button>

    <div class="flex justify-content-end mt-5">
      <a routerLink="/auth/register">Crear cuenta</a>
    </div>
    <div class="flex justify-content-end mt-1">
      <a routerLink="/auth/recuperarPassword">¿Olvidaste contraseña?</a>
    </div>
  </div>
</form>
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {
 
  miFormulario: FormGroup = this.fb.group({
    email: ['', [Validators.required, Validators.email]],
    password: ['', [Validators.required, Validators.minLength(6)]]
  });

  constructor(
    private fb: FormBuilder, 
    private router: Router, 
    private authService: AuthService
  ) { }

  ngOnInit(): void {
    // Inicialización si es necesaria
  }

  login() {
    console.log('📝 Iniciando proceso de login en componente');
    if (this.miFormulario.invalid) {
      console.log('📝 Formulario inválido, marcando como touched');
      this.miFormulario.markAllAsTouched();
      return;
    }
    
    const { email, password } = this.miFormulario.value;
    console.log('📝 Intentando login con email:', email);
    
    this.authService.login(email, password).subscribe(
      (resp: any) => {
        console.log('📝 Respuesta de login recibida:', resp);
        
        // Verificar si existe userOrMedico en la respuesta
        if (!resp.userOrMedico) {
          console.error('📝 Error: userOrMedico no está definido en la respuesta');
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Formato de respuesta incorrecto. Contacte al administrador.'
          });
          return;
        }
        
        // Obtener el rol del usuario (intentar de ambas ubicaciones)
        const rol = resp.userOrMedico.rol || resp.rol;
        
        console.log('📝 Rol del usuario obtenido:', rol);
        console.log('📝 Tipo de dato del rol:', typeof rol);
        
        switch (rol) {
          case 'ADMIN_ROLE':
            console.log('📝 Redireccionando a admin');
            this.router.navigateByUrl('/inicio-instrucciones');
            break;
          case 'USER_ROLE':
            console.log('📝 Redireccionando a usuario');
            this.router.navigateByUrl('/inicio-paciente');
            break;
          case 'MEDICO_ROLE':
            console.log('📝 Redireccionando a médico');
            this.router.navigateByUrl('/agregar-historial');
            break;
          default:
            console.error('📝 Rol no reconocido:', rol);
            Swal.fire({
              icon: 'warning',
              title: 'Advertencia',
              text: 'Rol de usuario no reconocido'
            });
        }
      },
      error => {
        console.error('📝 Error en login:', error);
        // Resto del código de manejo de errores
      }
    );
  }
}// Estilos para la pantalla de login
.login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #f5f7fa;
    padding: 20px;
  }
  
  .login-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    width: 100%;
    max-width: 400px;
    padding: 32px;
    animation: fadeIn 0.5s ease-in-out;
  }
  
  .logo-section {
    img {
      max-height: 60px;
      margin-bottom: 10px;
    }
    
    h1 {
      font-size: 24px;
      font-weight: 600;
      color: #2d3748;
    }
    
    p {
      font-size: 14px;
      color: #718096;
    }
  }
  
  .login-form {
    .form-title {
      font-size: 20px;
      font-weight: 600;
      color: #2d3748;
      text-align: center;
    }
    
    mat-form-field {
      width: 100%;
    }
    
    .small-icon {
      font-size: 16px;
      margin-right: 4px;
      vertical-align: middle;
    }
  }
  
  .login-button {
    border-radius: 6px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    
    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
  }
  
  .links-section {
    a {
      color: #4a5568;
      text-decoration: none;
      font-size: 14px;
      transition: color 0.3s ease;
      display: flex;
      align-items: center;
      
      &:hover {
        color: #3f51b5;
      }
    }
    
    .create-account-link {
      color: #3f51b5;
    }
    
    .forgot-password-link {
      color: #64748b;
    }
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  // Ajustes para pantallas pequeñas
  @media (max-width: 480px) {
    .login-card {
      padding: 24px;
    }
    
    .links-section {
      flex-direction: column;
      align-items: center;
      
      a {
        margin-bottom: 8px;
      }
    }
  }<form [formGroup]="miFormulario" (ngSubmit)="login()">
  <div class="flex flex-column">
    <span class="text-lg mb-4">Login</span>

    <mat-form-field>
      <mat-label>Email</mat-label>
      <input type="text" matInput formControlName="email" placeholder="email de usuario">
    </mat-form-field>

    <mat-form-field>
      <mat-label>Contraseña</mat-label>
      <input type="password" matInput formControlName="password" placeholder="Contraseña">
    </mat-form-field>

    <button mat-button mat-flat-button color="primary" type="submit">
      <mat-icon>save</mat-icon>
      Ingresar
    </button>

    <div class="flex justify-content-end mt-5">
      <a routerLink="/auth/register">Crear cuenta</a>
    </div>
    <div class="flex justify-content-end mt-1">
      <a routerLink="/auth/recuperarPassword">¿Olvidaste contraseña?</a>
    </div>
  </div>
</form>
// Estilos para la pantalla de login
.login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background-color: #f5f7fa;
    padding: 20px;
  }
  
  .login-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
    width: 100%;
    max-width: 400px;
    padding: 32px;
    animation: fadeIn 0.5s ease-in-out;
  }
  
  .logo-section {
    img {
      max-height: 60px;
      margin-bottom: 10px;
    }
    
    h1 {
      font-size: 24px;
      font-weight: 600;
      color: #2d3748;
    }
    
    p {
      font-size: 14px;
      color: #718096;
    }
  }
  
  .login-form {
    .form-title {
      font-size: 20px;
      font-weight: 600;
      color: #2d3748;
      text-align: center;
    }
    
    mat-form-field {
      width: 100%;
    }
    
    .small-icon {
      font-size: 16px;
      margin-right: 4px;
      vertical-align: middle;
    }
  }
  
  .login-button {
    border-radius: 6px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    
    &:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
  }
  
  .links-section {
    a {
      color: #4a5568;
      text-decoration: none;
      font-size: 14px;
      transition: color 0.3s ease;
      display: flex;
      align-items: center;
      
      &:hover {
        color: #3f51b5;
      }
    }
    
    .create-account-link {
      color: #3f51b5;
    }
    
    .forgot-password-link {
      color: #64748b;
    }
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  // Ajustes para pantallas pequeñas
  @media (max-width: 480px) {
    .login-card {
      padding: 24px;
    }
    
    .links-section {
      flex-direction: column;
      align-items: center;
      
      a {
        margin-bottom: 8px;
      }
    }
  }import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../../services/auth.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {
 
  miFormulario: FormGroup = this.fb.group({
    email: ['', [Validators.required, Validators.email]],
    password: ['', [Validators.required, Validators.minLength(6)]]
  });

  constructor(
    private fb: FormBuilder, 
    private router: Router, 
    private authService: AuthService
  ) { }

  ngOnInit(): void {
    // Inicialización si es necesaria
  }

  login() {
    console.log('📝 Iniciando proceso de login en componente');
    if (this.miFormulario.invalid) {
      console.log('📝 Formulario inválido, marcando como touched');
      this.miFormulario.markAllAsTouched();
      return;
    }
    
    const { email, password } = this.miFormulario.value;
    console.log('📝 Intentando login con email:', email);
    
    this.authService.login(email, password).subscribe(
      (resp: any) => {
        console.log('📝 Respuesta de login recibida:', resp);
        
        // Verificar si existe userOrMedico en la respuesta
        if (!resp.userOrMedico) {
          console.error('📝 Error: userOrMedico no está definido en la respuesta');
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Formato de respuesta incorrecto. Contacte al administrador.'
          });
          return;
        }
        
        // Obtener el rol del usuario (intentar de ambas ubicaciones)
        const rol = resp.userOrMedico.rol || resp.rol;
        
        console.log('📝 Rol del usuario obtenido:', rol);
        console.log('📝 Tipo de dato del rol:', typeof rol);
        
        switch (rol) {
          case 'ADMIN_ROLE':
            console.log('📝 Redireccionando a admin');
            this.router.navigateByUrl('/inicio-instrucciones');
            break;
          case 'USER_ROLE':
            console.log('📝 Redireccionando a usuario');
            this.router.navigateByUrl('/inicio-paciente');
            break;
          case 'MEDICO_ROLE':
            console.log('📝 Redireccionando a médico');
            this.router.navigateByUrl('/agregar-historial');
            break;
          default:
            console.error('📝 Rol no reconocido:', rol);
            Swal.fire({
              icon: 'warning',
              title: 'Advertencia',
              text: 'Rol de usuario no reconocido'
            });
        }
      },
      error => {
        console.error('📝 Error en login:', error);
        // Resto del código de manejo de errores
      }
    );
  }
}<form [formGroup]="recoveryForm" (ngSubmit)="recuperarPassword()">
  <div class="flex flex-column">
    <span class="text-lg mb-4">Recuperar contraseña</span>

    <mat-form-field>
      <mat-label>Ingrese su primer nombre</mat-label>
      <input type="text" matInput formControlName="nombre" placeholder="nombre">
    </mat-form-field>

    <mat-form-field>
      <mat-label>Ingrese el Email con el que se registro en la aplicacion</mat-label>
      <input type="email" matInput formControlName="email" placeholder="Email">
    </mat-form-field>

    <button mat-button mat-flat-button color="primary" type="submit" [disabled]="!recoveryForm.valid">
      <mat-icon>save</mat-icon>
      Recuperar contraseña
    </button>

    <div class="flex justify-content-end mt-5">
      <a routerLink="/auth/register">¿No se ha registrado?</a>
      <a routerLink="/auth/login">Ir a login</a>
    </div>
  </div>
</form>

  
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-password',
  templateUrl: './password.component.html',
  styleUrls: ['./password.component.scss']
})
export class PasswordComponent {
  

  recoveryForm: FormGroup;

  constructor(private fb: FormBuilder, private authService: AuthService) {
    this.recoveryForm = this.fb.group({
      nombre: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]]
    });
  }

  ngOnInit(): void {
  }

  recuperarPassword(){
    console.log(this.recoveryForm.value);
    const {email, nombre} = this.recoveryForm.value;
    console.log(email);
    this.authService.recuperarPassword(nombre, email).subscribe(ok =>{
      if(ok === true) {
        console.log(ok);
        Swal.fire('Recuperación de Contraseña', `Se ha enviado un correo a la dirección ${email} `, 'success');
      } else {
        Swal.fire('Error', ok, 'error');
      }
    });
  }
}
.right-align {
    display: block;
    text-align: right;
  }
  <form [formGroup]="recoveryForm" (ngSubmit)="recuperarPassword()">
  <div class="flex flex-column">
    <span class="text-lg mb-4">Recuperar contraseña</span>

    <mat-form-field>
      <mat-label>Ingrese su primer nombre</mat-label>
      <input type="text" matInput formControlName="nombre" placeholder="nombre">
    </mat-form-field>

    <mat-form-field>
      <mat-label>Ingrese el Email con el que se registro en la aplicacion</mat-label>
      <input type="email" matInput formControlName="email" placeholder="Email">
    </mat-form-field>

    <button mat-button mat-flat-button color="primary" type="submit" [disabled]="!recoveryForm.valid">
      <mat-icon>save</mat-icon>
      Recuperar contraseña
    </button>

    <div class="flex justify-content-end mt-5">
      <a routerLink="/auth/register">¿No se ha registrado?</a>
      <a routerLink="/auth/login">Ir a login</a>
    </div>
  </div>
</form>

  
.right-align {
    display: block;
    text-align: right;
  }
  import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-password',
  templateUrl: './password.component.html',
  styleUrls: ['./password.component.scss']
})
export class PasswordComponent {
  

  recoveryForm: FormGroup;

  constructor(private fb: FormBuilder, private authService: AuthService) {
    this.recoveryForm = this.fb.group({
      nombre: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]]
    });
  }

  ngOnInit(): void {
  }

  recuperarPassword(){
    console.log(this.recoveryForm.value);
    const {email, nombre} = this.recoveryForm.value;
    console.log(email);
    this.authService.recuperarPassword(nombre, email).subscribe(ok =>{
      if(ok === true) {
        console.log(ok);
        Swal.fire('Recuperación de Contraseña', `Se ha enviado un correo a la dirección ${email} `, 'success');
      } else {
        Swal.fire('Error', ok, 'error');
      }
    });
  }
}
<form [formGroup]="miFormulario" (ngSubmit)="registrar()" class="registration-form">
  <div class="form-container">
    <div class="form-header">
      <mat-icon class="header-icon">person_add</mat-icon>
      <h1 class="form-title">Registro de Usuario</h1>
      <p class="form-subtitle">Complete todos los campos para crear su cuenta</p>
    </div>

    <mat-divider class="section-divider"></mat-divider>

    <div class="form-section">
      <h2 class="section-title">Información Personal</h2>
      <div class="form-row">
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Nombre</mat-label>
            <input type="text" matInput formControlName="nombre" placeholder="Ingrese su nombre">
            <mat-icon matSuffix>person</mat-icon>
            <mat-error *ngIf="miFormulario?.get('nombre')?.invalid && miFormulario?.get('nombre')?.touched">
              El nombre es requerido
            </mat-error>
          </mat-form-field>
        </div>
        
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Apellidos</mat-label>
            <input type="text" matInput formControlName="apellidos" placeholder="Ingrese sus apellidos">
            <mat-icon matSuffix>people</mat-icon>
            <mat-error *ngIf="miFormulario?.get('apellidos')?.invalid && miFormulario?.get('apellidos')?.touched">
              Los apellidos son requeridos
            </mat-error>
          </mat-form-field>
        </div>
      </div>

      <div class="form-row">
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>RUT</mat-label>
            <input type="text" matInput formControlName="rut" placeholder="Ej: 12345678-9">
            <mat-icon matSuffix>badge</mat-icon>
            <mat-error *ngIf="miFormulario?.get('rut')?.errors?.['rutInvalid'] && miFormulario?.get('rut')?.touched">
              El RUT no es válido
            </mat-error>
            <mat-hint>Formato: 12345678-9</mat-hint>
          </mat-form-field>
        </div>
        
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Fecha de Nacimiento</mat-label>
            <input type="date" matInput formControlName="fecha_nacimiento">
            <mat-icon matSuffix>calendar_today</mat-icon>
          </mat-form-field>
        </div>
      </div>
    </div>

    <mat-divider class="section-divider"></mat-divider>

    <div class="form-section">
      <h2 class="section-title">Información de Contacto</h2>
      <div class="form-row">
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Email</mat-label>
            <input type="email" matInput formControlName="email" placeholder="ejemplo@correo.com">
            <mat-icon matSuffix>email</mat-icon>
            <mat-error *ngIf="miFormulario?.get('email')?.invalid && miFormulario?.get('email')?.touched">
              {{ miFormulario.get('email')?.errors?.['email'] ? 'Email no válido' : 'El Email es requerido' }}
            </mat-error>
          </mat-form-field>
        </div>
        
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Teléfono</mat-label>
            <input type="text" matInput formControlName="telefono" placeholder="+56 9 XXXX-XXXX">
            <mat-icon matSuffix>phone</mat-icon>
            <mat-error *ngIf="miFormulario?.get('telefono')?.errors?.['telefonoInvalido'] && miFormulario?.get('telefono')?.touched">
              El número debe tener formato +56 9 XXXX-XXXX
            </mat-error>
            <mat-hint>Formato: +56 9 XXXX-XXXX</mat-hint>
          </mat-form-field>
        </div>
      </div>

      <div class="form-row">
        <div class="form-field full-row">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Dirección</mat-label>
            <input type="text" matInput formControlName="direccion" placeholder="Ingrese su dirección completa">
            <mat-icon matSuffix>home</mat-icon>
            <mat-error *ngIf="miFormulario?.get('direccion')?.invalid && miFormulario?.get('direccion')?.touched">
              La dirección es requerida
            </mat-error>
          </mat-form-field>
        </div>
      </div>
    </div>

    <mat-divider class="section-divider"></mat-divider>

    <div class="form-section">
      <h2 class="section-title">Seguridad</h2>
      <div class="form-row">
        <div class="form-field full-row">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Contraseña</mat-label>
            <input type="password" matInput formControlName="password" placeholder="Ingrese una contraseña segura">
            <mat-icon matSuffix>lock</mat-icon>
            <mat-error *ngIf="miFormulario?.get('password')?.errors?.['passwordStrength'] && miFormulario?.get('password')?.touched">
              La contraseña debe tener al menos una mayúscula, un número y un símbolo (.,'!#$%^&*()_+-)
            </mat-error>
            <mat-hint>Incluya mayúsculas, números y símbolos</mat-hint>
          </mat-form-field>
        </div>
      </div>

      <div class="password-requirements" *ngIf="miFormulario?.get('password')?.touched">
        <div class="requirement" [class.fulfilled]="hasUpperCase()">
          <mat-icon>{{ hasUpperCase() ? 'check_circle' : 'cancel' }}</mat-icon>
          <span>Al menos una letra mayúscula</span>
        </div>
        <div class="requirement" [class.fulfilled]="hasNumber()">
          <mat-icon>{{ hasNumber() ? 'check_circle' : 'cancel' }}</mat-icon>
          <span>Al menos un número</span>
        </div>
        <div class="requirement" [class.fulfilled]="hasSpecialChar()">
          <mat-icon>{{ hasSpecialChar() ? 'check_circle' : 'cancel' }}</mat-icon>
          <span>Al menos un símbolo especial</span>
        </div>
        <div class="requirement" [class.fulfilled]="hasMinLength()">
          <mat-icon>{{ hasMinLength() ? 'check_circle' : 'cancel' }}</mat-icon>
          <span>Mínimo 6 caracteres</span>
        </div>
      </div>
    </div>

    <div class="form-actions">
      <button mat-flat-button type="button" routerLink="/auth/login" class="secondary-button">
        <mat-icon>arrow_back</mat-icon>
        Volver
      </button>
      <button mat-flat-button color="primary" type="submit" class="submit-button" [disabled]="miFormulario.invalid">
        <mat-icon>how_to_reg</mat-icon>
        Registrar
      </button>
    </div>
  </div>
</form>import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { rutValidator } from 'src/app/shared/Validators/rut-validator';
import { phoneValidator } from 'src/app/shared/Validators/phone-validator';
import { passwordStrengthValidator } from 'src/app/shared/Validators/password-strength-validator';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent implements OnInit {
  miFormulario: FormGroup;
  
  constructor(private fb: FormBuilder, private AuthService: AuthService, private router: Router) {
    this.miFormulario = this.fb.group({
      rut: ['', [Validators.required, rutValidator()]],
      nombre: ['', Validators.required],
      apellidos: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6), passwordStrengthValidator()]],
      fecha_nacimiento: ['', [Validators.required]],
      telefono: ['', [Validators.required, phoneValidator()]],
      direccion: ['', Validators.required]
    });
  }
  
  ngOnInit(): void {
  }
  
  // Métodos para verificar requisitos de contraseña individualmente
  hasUpperCase(): boolean {
    const value = this.miFormulario.get('password')?.value;
    return !!value && /[A-Z]+/.test(value);
  }
  
  hasNumber(): boolean {
    const value = this.miFormulario.get('password')?.value;
    return !!value && /[0-9]+/.test(value);
  }
  
  hasSpecialChar(): boolean {
    const value = this.miFormulario.get('password')?.value;
    return !!value && /[.,'!@#$%^&*()_+-]+/.test(value);
  }
  
  hasMinLength(): boolean {
    const value = this.miFormulario.get('password')?.value;
    return !!value && value.length >= 6;
  }
  
  validarMayorDeEdad(edadMinima: number): ValidatorFn {
    return (control: AbstractControl): {[key: string]: any} | null => {
      const valor = control.value;
      const hoy = new Date();
      const fechaNacimiento = new Date(valor);
      let edad = hoy.getFullYear() - fechaNacimiento.getFullYear();
      const m = hoy.getMonth() - fechaNacimiento.getMonth();
 
      if (m < 0 || (m === 0 && hoy.getDate() < fechaNacimiento.getDate())) {
        edad--;
      }
 
      return edad >= edadMinima ? null : {'menorDeEdad': {value: control.value}};
    };
  }
  
  registrar() {
    if (this.miFormulario.invalid) {
      this.miFormulario.markAllAsTouched();
      
      // Mostrar mensaje de formulario incompleto
      Swal.fire({
        icon: 'warning',
        title: 'Formulario incompleto',
        text: 'Por favor, complete todos los campos requeridos correctamente.',
        confirmButtonText: 'Entendido'
      });
      return;
    }
 
    const formData = this.miFormulario.value;
 
    this.AuthService.crearUsuario(formData).subscribe(
      (respuesta) => {
        Swal.fire({
          icon: 'success',
          title: '¡Registro completado!',
          text: 'Te has registrado exitosamente, ya puedes ingresar a tu cuenta.',
          confirmButtonText: 'Aceptar'
        }).then((result) => {
          if (result.isConfirmed) {
            this.router.navigateByUrl('/');
          }
        });
      },
      (err) => {
        if (err.error.msg === 'El correo ya está registrado') {
          Swal.fire('Error', 'El correo electrónico ya está en uso. Por favor, intenta con otro.', 'error');
        } else if (err.error.msg === 'El teléfono ya está registrado') {
          Swal.fire('Error', 'El número de teléfono ya está en uso. Por favor, intenta con otro.', 'error');
        } else {
          Swal.fire('Error', 'Ha ocurrido un error durante el registro. Por favor, inténtalo de nuevo.', 'error');
        }
      }
    );
  }
}/* Estilos para el formulario de registro */
.registration-form {
    max-width: 800px;
    margin: 2rem auto;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .form-container {
    padding: 2rem;
  }
  
  /* Cabecera del formulario */
  .form-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .header-icon {
    font-size: 3rem;
    height: 3rem;
    width: 3rem;
    color: #3f51b5;
    margin-bottom: 1rem;
  }
  
  .form-title {
    font-size: 1.8rem;
    font-weight: 500;
    margin: 0 0 0.5rem 0;
    color: #333;
  }
  
  .form-subtitle {
    color: #666;
    margin: 0;
  }
  
  /* Secciones del formulario */
  .form-section {
    margin: 1.5rem 0;
  }
  
  .section-title {
    font-size: 1.2rem;
    font-weight: 500;
    color: #3f51b5;
    margin-bottom: 1rem;
  }
  
  .section-divider {
    margin: 1.5rem 0;
  }
  
  /* Filas y campos del formulario */
  .form-row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -0.75rem;
  }
  
  .form-field {
    flex: 1 1 calc(50% - 1.5rem);
    margin: 0 0.75rem 1rem;
    min-width: 250px;
  }
  
  .full-row {
    flex-basis: calc(100% - 1.5rem);
  }
  
  .full-width {
    width: 100%;
  }
  
  /* Estilos para los requerimientos de contraseña */
  .password-requirements {
    background-color: #f5f5f5;
    border-radius: 4px;
    padding: 1rem;
    margin-top: 0.5rem;
  }
  
  .requirement {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
    color: #f44336;
  }
  
  .requirement mat-icon {
    margin-right: 0.5rem;
    font-size: 1.2rem;
    height: 1.2rem;
    width: 1.2rem;
  }
  
  .requirement.fulfilled {
    color: #4caf50;
  }
  
  /* Botones */
  .form-actions {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
  }
  
  .submit-button {
    padding: 0 2rem;
    height: 3rem;
  }
  
  .secondary-button {
    background-color: #f5f5f5;
    color: #666;
  }
  
  /* Estilos para mat-form-field */
  ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {
    color: #dadce0;
  }
  
  ::ng-deep .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {
    color: #3f51b5;
  }
  
  ::ng-deep .mat-form-field-appearance-outline.mat-form-field-invalid.mat-form-field-invalid .mat-form-field-outline-thick {
    color: #f44336;
    opacity: 0.8;
  }
  
  ::ng-deep .mat-form-field-subscript-wrapper {
    overflow: visible;
  }
  
  ::ng-deep .mat-error {
    font-size: 0.75rem;
    margin-top: 0.25rem;
  }
  
  ::ng-deep .mat-hint {
    font-size: 0.75rem;
  }
  
  /* Responsive */
  @media (max-width: 600px) {
    .form-container {
      padding: 1.5rem;
    }
    
    .form-field {
      flex-basis: calc(100% - 1.5rem);
    }
    
    .form-actions {
      flex-direction: column-reverse;
      gap: 1rem;
    }
    
    .submit-button, .secondary-button {
      width: 100%;
    }
  }

  .registration-form {
    max-width: 800px;
    margin: 2rem auto;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    /* Quita o ajusta esta línea */
    /* min-height: calc(100vh - 4rem); */
    /* Cambia auto por visible */
    overflow-y: visible;
  }<form [formGroup]="miFormulario" (ngSubmit)="registrar()" class="registration-form">
  <div class="form-container">
    <div class="form-header">
      <mat-icon class="header-icon">person_add</mat-icon>
      <h1 class="form-title">Registro de Usuario</h1>
      <p class="form-subtitle">Complete todos los campos para crear su cuenta</p>
    </div>

    <mat-divider class="section-divider"></mat-divider>

    <div class="form-section">
      <h2 class="section-title">Información Personal</h2>
      <div class="form-row">
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Nombre</mat-label>
            <input type="text" matInput formControlName="nombre" placeholder="Ingrese su nombre">
            <mat-icon matSuffix>person</mat-icon>
            <mat-error *ngIf="miFormulario?.get('nombre')?.invalid && miFormulario?.get('nombre')?.touched">
              El nombre es requerido
            </mat-error>
          </mat-form-field>
        </div>
        
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Apellidos</mat-label>
            <input type="text" matInput formControlName="apellidos" placeholder="Ingrese sus apellidos">
            <mat-icon matSuffix>people</mat-icon>
            <mat-error *ngIf="miFormulario?.get('apellidos')?.invalid && miFormulario?.get('apellidos')?.touched">
              Los apellidos son requeridos
            </mat-error>
          </mat-form-field>
        </div>
      </div>

      <div class="form-row">
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>RUT</mat-label>
            <input type="text" matInput formControlName="rut" placeholder="Ej: 12345678-9">
            <mat-icon matSuffix>badge</mat-icon>
            <mat-error *ngIf="miFormulario?.get('rut')?.errors?.['rutInvalid'] && miFormulario?.get('rut')?.touched">
              El RUT no es válido
            </mat-error>
            <mat-hint>Formato: 12345678-9</mat-hint>
          </mat-form-field>
        </div>
        
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Fecha de Nacimiento</mat-label>
            <input type="date" matInput formControlName="fecha_nacimiento">
            <mat-icon matSuffix>calendar_today</mat-icon>
          </mat-form-field>
        </div>
      </div>
    </div>

    <mat-divider class="section-divider"></mat-divider>

    <div class="form-section">
      <h2 class="section-title">Información de Contacto</h2>
      <div class="form-row">
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Email</mat-label>
            <input type="email" matInput formControlName="email" placeholder="ejemplo@correo.com">
            <mat-icon matSuffix>email</mat-icon>
            <mat-error *ngIf="miFormulario?.get('email')?.invalid && miFormulario?.get('email')?.touched">
              {{ miFormulario.get('email')?.errors?.['email'] ? 'Email no válido' : 'El Email es requerido' }}
            </mat-error>
          </mat-form-field>
        </div>
        
        <div class="form-field">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Teléfono</mat-label>
            <input type="text" matInput formControlName="telefono" placeholder="+56 9 XXXX-XXXX">
            <mat-icon matSuffix>phone</mat-icon>
            <mat-error *ngIf="miFormulario?.get('telefono')?.errors?.['telefonoInvalido'] && miFormulario?.get('telefono')?.touched">
              El número debe tener formato +56 9 XXXX-XXXX
            </mat-error>
            <mat-hint>Formato: +56 9 XXXX-XXXX</mat-hint>
          </mat-form-field>
        </div>
      </div>

      <div class="form-row">
        <div class="form-field full-row">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Dirección</mat-label>
            <input type="text" matInput formControlName="direccion" placeholder="Ingrese su dirección completa">
            <mat-icon matSuffix>home</mat-icon>
            <mat-error *ngIf="miFormulario?.get('direccion')?.invalid && miFormulario?.get('direccion')?.touched">
              La dirección es requerida
            </mat-error>
          </mat-form-field>
        </div>
      </div>
    </div>

    <mat-divider class="section-divider"></mat-divider>

    <div class="form-section">
      <h2 class="section-title">Seguridad</h2>
      <div class="form-row">
        <div class="form-field full-row">
          <mat-form-field appearance="outline" class="full-width">
            <mat-label>Contraseña</mat-label>
            <input type="password" matInput formControlName="password" placeholder="Ingrese una contraseña segura">
            <mat-icon matSuffix>lock</mat-icon>
            <mat-error *ngIf="miFormulario?.get('password')?.errors?.['passwordStrength'] && miFormulario?.get('password')?.touched">
              La contraseña debe tener al menos una mayúscula, un número y un símbolo (.,'!#$%^&*()_+-)
            </mat-error>
            <mat-hint>Incluya mayúsculas, números y símbolos</mat-hint>
          </mat-form-field>
        </div>
      </div>

      <div class="password-requirements" *ngIf="miFormulario?.get('password')?.touched">
        <div class="requirement" [class.fulfilled]="hasUpperCase()">
          <mat-icon>{{ hasUpperCase() ? 'check_circle' : 'cancel' }}</mat-icon>
          <span>Al menos una letra mayúscula</span>
        </div>
        <div class="requirement" [class.fulfilled]="hasNumber()">
          <mat-icon>{{ hasNumber() ? 'check_circle' : 'cancel' }}</mat-icon>
          <span>Al menos un número</span>
        </div>
        <div class="requirement" [class.fulfilled]="hasSpecialChar()">
          <mat-icon>{{ hasSpecialChar() ? 'check_circle' : 'cancel' }}</mat-icon>
          <span>Al menos un símbolo especial</span>
        </div>
        <div class="requirement" [class.fulfilled]="hasMinLength()">
          <mat-icon>{{ hasMinLength() ? 'check_circle' : 'cancel' }}</mat-icon>
          <span>Mínimo 6 caracteres</span>
        </div>
      </div>
    </div>

    <div class="form-actions">
      <button mat-flat-button type="button" routerLink="/auth/login" class="secondary-button">
        <mat-icon>arrow_back</mat-icon>
        Volver
      </button>
      <button mat-flat-button color="primary" type="submit" class="submit-button" [disabled]="miFormulario.invalid">
        <mat-icon>how_to_reg</mat-icon>
        Registrar
      </button>
    </div>
  </div>
</form>/* Estilos para el formulario de registro */
.registration-form {
    max-width: 800px;
    margin: 2rem auto;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .form-container {
    padding: 2rem;
  }
  
  /* Cabecera del formulario */
  .form-header {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .header-icon {
    font-size: 3rem;
    height: 3rem;
    width: 3rem;
    color: #3f51b5;
    margin-bottom: 1rem;
  }
  
  .form-title {
    font-size: 1.8rem;
    font-weight: 500;
    margin: 0 0 0.5rem 0;
    color: #333;
  }
  
  .form-subtitle {
    color: #666;
    margin: 0;
  }
  
  /* Secciones del formulario */
  .form-section {
    margin: 1.5rem 0;
  }
  
  .section-title {
    font-size: 1.2rem;
    font-weight: 500;
    color: #3f51b5;
    margin-bottom: 1rem;
  }
  
  .section-divider {
    margin: 1.5rem 0;
  }
  
  /* Filas y campos del formulario */
  .form-row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -0.75rem;
  }
  
  .form-field {
    flex: 1 1 calc(50% - 1.5rem);
    margin: 0 0.75rem 1rem;
    min-width: 250px;
  }
  
  .full-row {
    flex-basis: calc(100% - 1.5rem);
  }
  
  .full-width {
    width: 100%;
  }
  
  /* Estilos para los requerimientos de contraseña */
  .password-requirements {
    background-color: #f5f5f5;
    border-radius: 4px;
    padding: 1rem;
    margin-top: 0.5rem;
  }
  
  .requirement {
    display: flex;
    align-items: center;
    margin-bottom: 0.5rem;
    color: #f44336;
  }
  
  .requirement mat-icon {
    margin-right: 0.5rem;
    font-size: 1.2rem;
    height: 1.2rem;
    width: 1.2rem;
  }
  
  .requirement.fulfilled {
    color: #4caf50;
  }
  
  /* Botones */
  .form-actions {
    display: flex;
    justify-content: space-between;
    margin-top: 2rem;
  }
  
  .submit-button {
    padding: 0 2rem;
    height: 3rem;
  }
  
  .secondary-button {
    background-color: #f5f5f5;
    color: #666;
  }
  
  /* Estilos para mat-form-field */
  ::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {
    color: #dadce0;
  }
  
  ::ng-deep .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {
    color: #3f51b5;
  }
  
  ::ng-deep .mat-form-field-appearance-outline.mat-form-field-invalid.mat-form-field-invalid .mat-form-field-outline-thick {
    color: #f44336;
    opacity: 0.8;
  }
  
  ::ng-deep .mat-form-field-subscript-wrapper {
    overflow: visible;
  }
  
  ::ng-deep .mat-error {
    font-size: 0.75rem;
    margin-top: 0.25rem;
  }
  
  ::ng-deep .mat-hint {
    font-size: 0.75rem;
  }
  
  /* Responsive */
  @media (max-width: 600px) {
    .form-container {
      padding: 1.5rem;
    }
    
    .form-field {
      flex-basis: calc(100% - 1.5rem);
    }
    
    .form-actions {
      flex-direction: column-reverse;
      gap: 1rem;
    }
    
    .submit-button, .secondary-button {
      width: 100%;
    }
  }

  .registration-form {
    max-width: 800px;
    margin: 2rem auto;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    /* Quita o ajusta esta línea */
    /* min-height: calc(100vh - 4rem); */
    /* Cambia auto por visible */
    overflow-y: visible;
  }import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
import { rutValidator } from 'src/app/shared/Validators/rut-validator';
import { phoneValidator } from 'src/app/shared/Validators/phone-validator';
import { passwordStrengthValidator } from 'src/app/shared/Validators/password-strength-validator';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent implements OnInit {
  miFormulario: FormGroup;
  
  constructor(private fb: FormBuilder, private AuthService: AuthService, private router: Router) {
    this.miFormulario = this.fb.group({
      rut: ['', [Validators.required, rutValidator()]],
      nombre: ['', Validators.required],
      apellidos: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6), passwordStrengthValidator()]],
      fecha_nacimiento: ['', [Validators.required]],
      telefono: ['', [Validators.required, phoneValidator()]],
      direccion: ['', Validators.required]
    });
  }
  
  ngOnInit(): void {
  }
  
  // Métodos para verificar requisitos de contraseña individualmente
  hasUpperCase(): boolean {
    const value = this.miFormulario.get('password')?.value;
    return !!value && /[A-Z]+/.test(value);
  }
  
  hasNumber(): boolean {
    const value = this.miFormulario.get('password')?.value;
    return !!value && /[0-9]+/.test(value);
  }
  
  hasSpecialChar(): boolean {
    const value = this.miFormulario.get('password')?.value;
    return !!value && /[.,'!@#$%^&*()_+-]+/.test(value);
  }
  
  hasMinLength(): boolean {
    const value = this.miFormulario.get('password')?.value;
    return !!value && value.length >= 6;
  }
  
  validarMayorDeEdad(edadMinima: number): ValidatorFn {
    return (control: AbstractControl): {[key: string]: any} | null => {
      const valor = control.value;
      const hoy = new Date();
      const fechaNacimiento = new Date(valor);
      let edad = hoy.getFullYear() - fechaNacimiento.getFullYear();
      const m = hoy.getMonth() - fechaNacimiento.getMonth();
 
      if (m < 0 || (m === 0 && hoy.getDate() < fechaNacimiento.getDate())) {
        edad--;
      }
 
      return edad >= edadMinima ? null : {'menorDeEdad': {value: control.value}};
    };
  }
  
  registrar() {
    if (this.miFormulario.invalid) {
      this.miFormulario.markAllAsTouched();
      
      // Mostrar mensaje de formulario incompleto
      Swal.fire({
        icon: 'warning',
        title: 'Formulario incompleto',
        text: 'Por favor, complete todos los campos requeridos correctamente.',
        confirmButtonText: 'Entendido'
      });
      return;
    }
 
    const formData = this.miFormulario.value;
 
    this.AuthService.crearUsuario(formData).subscribe(
      (respuesta) => {
        Swal.fire({
          icon: 'success',
          title: '¡Registro completado!',
          text: 'Te has registrado exitosamente, ya puedes ingresar a tu cuenta.',
          confirmButtonText: 'Aceptar'
        }).then((result) => {
          if (result.isConfirmed) {
            this.router.navigateByUrl('/');
          }
        });
      },
      (err) => {
        if (err.error.msg === 'El correo ya está registrado') {
          Swal.fire('Error', 'El correo electrónico ya está en uso. Por favor, intenta con otro.', 'error');
        } else if (err.error.msg === 'El teléfono ya está registrado') {
          Swal.fire('Error', 'El número de teléfono ya está en uso. Por favor, intenta con otro.', 'error');
        } else {
          Swal.fire('Error', 'Ha ocurrido un error durante el registro. Por favor, inténtalo de nuevo.', 'error');
        }
      }
    );
  }
}import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, catchError, throwError, map, of, tap } from 'rxjs';
import { environment } from 'src/environment/environment';
import { Usuario } from 'src/app/models/usuario';
import { RegisterForm } from '../interfaces/register-form.register';
import { Paciente } from 'src/app/admin/pages/interface/paciente';
import { Medico } from 'src/app/models/medico';
import { InfoClinica } from 'src/app/models/infoClinica';

const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  public usuario!: Usuario;
  public medico!: Medico;
  public infoClinica!: InfoClinica;

  constructor(private http: HttpClient) {
    this.validarToken()
  }

  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
        'x-token': this.token //ESTE ES EL GET TOKEN
      }
    }
  }
  
  guardarLocalStorage(token: string, menu: any) {
    localStorage.setItem('token', token);
    localStorage.setItem('menu', JSON.stringify(menu)); //El localStorage solo guarda string por lo tanto hay que convertir el menu (porque es un arreglo de objetos)
  }
  
  login(email: string, password: string) {
    console.log('🔑 Iniciando login con email:', email);
    const body = { email, password };
    return this.http.post(`${base_url}/login`, body).pipe(
      tap((resp: any) => {
        console.log('🔑 Respuesta completa de login:', resp);
        console.log('🔑 userOrMedico:', resp.userOrMedico);
        console.log('🔑 Rol en respuesta:', resp.userOrMedico?.rol || resp.rol);
        console.log('🔑 Menú recibido:', resp.menu);
        this.guardarLocalStorage(resp.token, resp.menu);
      }),
      catchError(error => {
        console.error('🔑 Error en login:', error);
        return throwError(() => error);
      })
    );
  }

  logout() {
    localStorage.removeItem('token');
    localStorage.removeItem('menu'); 
  }

  crearUsuario(formData: RegisterForm): Observable<RegisterForm> {
    console.log('Creando usuario con datos:', formData);    
    return this.http.post<RegisterForm>(`${base_url}/usuarios`, formData)
      .pipe(
        tap((resp: any) => {
          console.log('Respuesta de registro exitosa:', resp);
        }),
        catchError(error => {
          console.error('Error en registro de usuario:', error);
          // Extraer el mensaje específico de error si está disponible
          if (error.error && error.error.msg) {
            console.error('Mensaje del servidor:', error.error.msg);
            return throwError(() => new Error(error.error.msg));
          }
          return throwError(() => error);
        })
      );
  }

  validarToken(): Observable<boolean> {
    console.log('⭐ Iniciando validación del token...');
    const token = localStorage.getItem('token');
    console.log('⭐ Token actual:', token ? 'Existe' : 'No existe');
    
    const options = {
      headers: new HttpHeaders({
        'Authorization': `Bearer ${token}`
      })
    };
  
    return this.http.post(`${base_url}/login/revalidarToken`, {}, options).pipe(
      map((resp: any) => {
        console.log('⭐ Respuesta completa de revalidación:', resp);
        this.guardarLocalStorage(resp.token, resp.menu); 
        
        if (!resp.userOrMedico) {
          console.error('❌ Error: userOrMedico no está definido en la respuesta');
          return false;
        }
        
        // Obtener el rol de cualquiera de las dos fuentes posibles
        const rolUsuario = resp.userOrMedico.rol || resp.rol;
        console.log('⭐ Rol obtenido en validarToken:', rolUsuario);
        console.log('⭐ Tipo de dato de rol:', typeof rolUsuario);
        
        // Obtener datos del usuario
        const { rut, nombre, apellidos } = resp.userOrMedico;
        console.log('⭐ Datos extraídos de userOrMedico:', { rut, nombre, apellidos });
        
        // Comprueba si existe información de la clínica antes de crear una instancia
        if (resp.infoClinica) {
          const { nombreClinica, direccion, telefono, email } = resp.infoClinica;
          this.infoClinica = new InfoClinica(nombreClinica, direccion, telefono, email);
          console.log('⭐ infoClinica creada:', this.infoClinica);
        } else {
          console.log('⭐ No hay datos de infoClinica');
        }
  
        // Comprobamos el rol para determinar si instanciamos un Usuario o un Medico
        if (rolUsuario === 'MEDICO_ROLE') {
          console.log('⭐ Creando instancia de médico con datos:', { nombre, apellidos, rolUsuario, rut });
          this.medico = new Medico(nombre, apellidos, rolUsuario, rut);
          console.log('⭐ Médico autenticado:', this.medico);
          // Asegúrate de que usuario sea null/undefined para evitar confusiones
       
          console.log('⭐ Variable usuario limpiada:', this.usuario);
        } else { 
          console.log('⭐ Creando instancia de usuario con datos:', { nombre, apellidos, rolUsuario, rut });
          this.usuario = new Usuario(nombre, apellidos, rolUsuario, rut);
          console.log('⭐ Usuario autenticado:', this.usuario);
          // Asegúrate de que medico sea null/undefined para evitar confusiones

          console.log('⭐ Variable medico limpiada:', this.medico);
        }
  
        return true;
      }),
      catchError((error) => {
        console.error('❌ Error en validación de token:', error);
        if (error.status) {
          console.error('❌ Estado HTTP:', error.status);
        }
        if (error.error) {
          console.error('❌ Mensaje de error:', error.error);
        }
        return of(false);
      })
    );
  }

  recuperarPassword(nombre: string, email: string) {
    const url = `${base_url}/login/RecuperarPassword`;
    const body = { nombre, email };

    return this.http.post<Paciente>(url, body).pipe(
      map((resp: Paciente) => {
        return resp.ok;
      }),
      catchError(err => of(err.error.msg))
    );
  }

  cambiarPassword(rut: string, password: string, newPassword: string) {
    if (localStorage.getItem('token')) {
      const url = `${base_url}/usuarios/cambiarPassword`;
      const headers = new HttpHeaders({
        'authorization': `Bearer ${localStorage.getItem('token')}`
      });
      const options = { headers: headers }
      const body = { rut, password, newPassword }
      
      return this.http.post<any>(url, body, options).pipe(
        map((resp: any) => {
          return resp.ok;
        }),
        catchError(err => of(err.error.msg))
      );
    } else {
      return of(false);
    }
  }

  cambiarPasswordMedico(rut: string, password: string, newPassword: string) {
    if (localStorage.getItem('token')) {
      const url = `${base_url}/medicos/cambiarPassword`;
      const headers = new HttpHeaders({
        'authorization': `Bearer ${localStorage.getItem('token')}`
      });
      const options = { headers: headers }
      const body = { rut, password, newPassword }
      
      return this.http.post<any>(url, body, options).pipe(
        map((resp: any) => {
          return resp.ok;
        }),
        catchError(err => of(err.error.msg))
      );
    } else {
      return of(false);
    }
  }
}import { NgModule } from '@angular/core';

import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatChipsModule } from '@angular/material/chips';
import { MatDialogModule } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatToolbarModule } from '@angular/material/toolbar';

@NgModule({
  exports: [
    MatAutocompleteModule,
    MatButtonModule,
    MatCardModule,
    MatChipsModule,
    MatDialogModule,
    MatFormFieldModule,
    MatGridListModule,
    MatIconModule,
    MatInputModule,
    MatListModule,
    MatProgressSpinnerModule,
    MatSelectModule,
    MatSidenavModule,
    MatSnackBarModule,
    MatToolbarModule,
  ]
})
export class MaterialModule { }
import { NgModule } from '@angular/core';

import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatChipsModule } from '@angular/material/chips';
import { MatDialogModule } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatListModule } from '@angular/material/list';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSelectModule } from '@angular/material/select';
import { MatSidenavModule } from '@angular/material/sidenav';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatToolbarModule } from '@angular/material/toolbar';

@NgModule({
  exports: [
    MatAutocompleteModule,
    MatButtonModule,
    MatCardModule,
    MatChipsModule,
    MatDialogModule,
    MatFormFieldModule,
    MatGridListModule,
    MatIconModule,
    MatInputModule,
    MatListModule,
    MatProgressSpinnerModule,
    MatSelectModule,
    MatSidenavModule,
    MatSnackBarModule,
    MatToolbarModule,
  ]
})
export class MaterialModule { }
export interface Medico {
    nombre: string;
    apellidos: string;
}

export interface Historial {
    id_historial: number;
    diagnostico: string;
    medicamento: string;
    notas: string;
    fecha_consulta: string;
    archivo: string;
    createdAt: string;
    updatedAt: string;
    rut_medico: string; 
    rut_paciente: string; 
    medico: Medico; 
}

export interface HistorialResponse {
    historiales: Historial[];
    total: number;
}
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LayoutPageComponent } from './layout-page/layout-page.component';
import { RouterModule, Routes } from '@angular/router';
import { GestionarHistorialesComponent } from './gestionar-historiales/gestionar-historiales.component';
import { HistorialComponent } from './historial/historial.component';
import { AuthGuard } from '../auth/guards/auth.guard';
import { VerCitasMedicasComponent } from './ver-citas-medicas/ver-citas-medicas.component';
import { medicGuard } from '../auth/guards/medic.guard';
import { CambiarPasswordMedicoComponent } from './cambiar-password-medico/cambiar-password-medico.component';



const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent, canActivate: [AuthGuard],
    children: [    
      { path: 'gestionar-historiales', component: GestionarHistorialesComponent, canActivate: [AuthGuard, medicGuard] },
      { path: 'agregar-historial', component: HistorialComponent, canActivate: [AuthGuard, medicGuard] },
      { path: 'editar-historial/:id', component: HistorialComponent, canActivate: [AuthGuard, medicGuard] },
      { path: 'cambiar-password-medicos', component: CambiarPasswordMedicoComponent, canActivate: [AuthGuard,medicGuard], },
      { path: 'ver-citas', component:VerCitasMedicasComponent, canActivate: [AuthGuard,medicGuard], },
      { path: 'agregar-historial', component: HistorialComponent, canActivate: [AuthGuard,medicGuard], },
     
      { path: '**', redirectTo: 'gestionar-historiales' },
    ],
  },
];

@NgModule({
  imports: [ RouterModule.forChild( routes ) ],
  exports: [ RouterModule ],
})
export class MedicosRoutingModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { MaterialModule } from '../material/material.module';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { MedicosRoutingModule } from './medicos-routing.module';
import { LayoutPageComponent } from './layout-page/layout-page.component';
import { HistorialComponent } from './historial/historial.component';
import { GestionarHistorialesComponent } from './gestionar-historiales/gestionar-historiales.component';
import { RouterModule } from '@angular/router';
import { SharedModule } from "../shared/shared.module";
import { VerCitasMedicasComponent } from './ver-citas-medicas/ver-citas-medicas.component';
import { CambiarPasswordMedicoComponent } from './cambiar-password-medico/cambiar-password-medico.component';






@NgModule({
    declarations: [
        LayoutPageComponent,
        HistorialComponent,
        GestionarHistorialesComponent,
        VerCitasMedicasComponent,
        CambiarPasswordMedicoComponent,

    ],
    imports: [
        CommonModule,
        MaterialModule,
        FormsModule,
        ReactiveFormsModule,
        MedicosRoutingModule,
        RouterModule,
        SharedModule
    ]
})
export class MedicosModule { }
export interface Usuario {
    rut: string;
    nombre: string;
    apellidos: string;
    email: string;
    fecha_nacimiento: string;
    telefono: string;
    direccion: string;
}

export interface UsuariosResponse {
    usuarios: Usuario[];
}import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LayoutPageComponent } from './layout-page/layout-page.component';
import { RouterModule, Routes } from '@angular/router';
import { GestionarHistorialesComponent } from './gestionar-historiales/gestionar-historiales.component';
import { HistorialComponent } from './historial/historial.component';
import { AuthGuard } from '../auth/guards/auth.guard';
import { VerCitasMedicasComponent } from './ver-citas-medicas/ver-citas-medicas.component';
import { medicGuard } from '../auth/guards/medic.guard';
import { CambiarPasswordMedicoComponent } from './cambiar-password-medico/cambiar-password-medico.component';



const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent, canActivate: [AuthGuard],
    children: [    
      { path: 'gestionar-historiales', component: GestionarHistorialesComponent, canActivate: [AuthGuard, medicGuard] },
      { path: 'agregar-historial', component: HistorialComponent, canActivate: [AuthGuard, medicGuard] },
      { path: 'editar-historial/:id', component: HistorialComponent, canActivate: [AuthGuard, medicGuard] },
      { path: 'cambiar-password-medicos', component: CambiarPasswordMedicoComponent, canActivate: [AuthGuard,medicGuard], },
      { path: 'ver-citas', component:VerCitasMedicasComponent, canActivate: [AuthGuard,medicGuard], },
      { path: 'agregar-historial', component: HistorialComponent, canActivate: [AuthGuard,medicGuard], },
     
      { path: '**', redirectTo: 'gestionar-historiales' },
    ],
  },
];

@NgModule({
  imports: [ RouterModule.forChild( routes ) ],
  exports: [ RouterModule ],
})
export class MedicosRoutingModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { MaterialModule } from '../material/material.module';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { MedicosRoutingModule } from './medicos-routing.module';
import { LayoutPageComponent } from './layout-page/layout-page.component';
import { HistorialComponent } from './historial/historial.component';
import { GestionarHistorialesComponent } from './gestionar-historiales/gestionar-historiales.component';
import { RouterModule } from '@angular/router';
import { SharedModule } from "../shared/shared.module";
import { VerCitasMedicasComponent } from './ver-citas-medicas/ver-citas-medicas.component';
import { CambiarPasswordMedicoComponent } from './cambiar-password-medico/cambiar-password-medico.component';






@NgModule({
    declarations: [
        LayoutPageComponent,
        HistorialComponent,
        GestionarHistorialesComponent,
        VerCitasMedicasComponent,
        CambiarPasswordMedicoComponent,

    ],
    imports: [
        CommonModule,
        MaterialModule,
        FormsModule,
        ReactiveFormsModule,
        MedicosRoutingModule,
        RouterModule,
        SharedModule
    ]
})
export class MedicosModule { }
<form *ngIf="miFormulario != null" [formGroup]="miFormulario" (ngSubmit)="cambiarPassword()" class="password-form">
    <mat-card class="password-card">
      <mat-card-header class="password-header">
        <div class="title-container">
          <mat-icon class="lock-icon">lock_reset</mat-icon>
          <mat-card-title class="password-title">Cambiar Contraseña</mat-card-title>
        </div>
      </mat-card-header>
      
      <mat-card-content class="password-content">
        <div class="input-container">
          <mat-form-field appearance="outline" class="password-field">
            <mat-label>Contraseña Actual</mat-label>
            <input 
              matInput 
              [type]="mostrarPassword ? 'text' : 'password'"
              formControlName="password"
              autocomplete="current-password">
            <button 
              mat-icon-button 
              matSuffix
              (click)="togglePasswordVisibility()"
              type="button"
              class="visibility-btn">
              <mat-icon>{{mostrarPassword ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="miFormulario.get('password')?.errors?.['required']">La contraseña actual es requerida</mat-error>
            <mat-error *ngIf="miFormulario.get('password')?.errors?.['minlength']">Mínimo 6 caracteres</mat-error>
          </mat-form-field>
        </div>
        
        <div class="input-container">
          <mat-form-field appearance="outline" class="password-field">
            <mat-label>Nueva Contraseña</mat-label>
            <input 
              matInput 
              [type]="mostrarNuevaPassword ? 'text' : 'password'"
              formControlName="newPassword"
              autocomplete="new-password">
            <button 
              mat-icon-button 
              matSuffix
              (click)="mostrarNuevaPassword = !mostrarNuevaPassword"
              type="button"
              class="visibility-btn">
              <mat-icon>{{mostrarNuevaPassword ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="miFormulario.get('newPassword')?.errors?.['required']">La nueva contraseña es requerida</mat-error>
            <mat-error *ngIf="miFormulario.get('newPassword')?.errors?.['minlength']">Mínimo 6 caracteres</mat-error>
          </mat-form-field>
        </div>
        
        <div class="input-container">
          <mat-form-field appearance="outline" class="password-field">
            <mat-label>Confirmar Nueva Contraseña</mat-label>
            <input 
              matInput 
              [type]="mostrarConfirmacionPassword ? 'text' : 'password'"
              formControlName="newPasswordConfirm"
              autocomplete="new-password">
            <button 
              mat-icon-button 
              matSuffix
              (click)="mostrarConfirmacionPassword = !mostrarConfirmacionPassword"
              type="button"
              class="visibility-btn">
              <mat-icon>{{mostrarConfirmacionPassword ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="miFormulario.get('newPasswordConfirm')?.errors?.['required']">La confirmación es requerida</mat-error>
            <mat-error *ngIf="miFormulario.get('newPasswordConfirm')?.errors?.['noIguales']">Las contraseñas no coinciden</mat-error>
          </mat-form-field>
        </div>
      </mat-card-content>
      
      <mat-card-actions class="password-actions">
        <button 
          mat-raised-button
          color="primary"
          type="submit"
          class="submit-btn"
          [disabled]="miFormulario.invalid">
          <mat-icon class="icon-btn">key</mat-icon>
          Actualizar Contraseña
        </button>
      </mat-card-actions>
    </mat-card>
  </form>import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from 'src/app/auth/services/auth.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-cambiar-password-medico',
  templateUrl: './cambiar-password-medico.component.html',
  styleUrls: ['./cambiar-password-medico.component.scss']
})
export class CambiarPasswordMedicoComponent implements OnInit {
  public mostrarPassword: boolean = false;
  public mostrarNuevaPassword: boolean = false;
  public mostrarConfirmacionPassword: boolean = false;
  public miFormulario: FormGroup;
 
  constructor(private fb: FormBuilder, private authService: AuthService) {
    this.miFormulario = this.fb.group({
      password: ['', [Validators.required, Validators.minLength(6)]],
      newPassword: ['', [Validators.required, Validators.minLength(6)]],
      newPasswordConfirm: ['', Validators.required]
    }, {
      validators: this.passwordsIguales('newPassword', 'newPasswordConfirm')
    });
  }

  ngOnInit(): void {
    // Inicialización adicional si es necesaria
  }
  
  togglePasswordVisibility(): void {
    this.mostrarPassword = !this.mostrarPassword;
  }
  
  passwordsIguales(campo1: string, campo2: string) {
    return (formGroup: FormGroup) => {
      const pass1Control = formGroup.get(campo1);
      const pass2Control = formGroup.get(campo2);
      
      if (pass1Control?.value === pass2Control?.value) {
        pass2Control?.setErrors(null);
      } else {
        pass2Control?.setErrors({ noIguales: true });
      }
    };
  }
  
  cambiarPassword(): void {
    if (this.miFormulario.invalid) {
      this.miFormulario.markAllAsTouched();
      return;
    }
    
    const { password, newPassword, newPasswordConfirm } = this.miFormulario.value;
 
    if (newPassword === newPasswordConfirm) {
      // Mostrar un loader mientras se procesa
      Swal.fire({
        title: 'Procesando',
        text: 'Actualizando contraseña...',
        icon: 'info',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      this.authService.cambiarPasswordMedico(this.authService.medico.rut, password, newPassword)
        .subscribe({
          next: (ok) => {
            if (ok === true) {
              Swal.fire({
                title: 'Éxito',
                text: 'Ha actualizado correctamente la contraseña',
                icon: 'success',
                confirmButtonText: 'Aceptar',
                confirmButtonColor: '#1976d2'
              }).then(() => {
                this.miFormulario.reset();
              });
            } else {
              Swal.fire({
                title: 'Error',
                text: 'No se pudo actualizar la contraseña',
                icon: 'error',
                confirmButtonText: 'Intentar nuevamente',
                confirmButtonColor: '#1976d2'
              });
            }
          },
          error: (err) => {
            console.error(err);
            Swal.fire({
              title: 'Error',
              text: 'Ha ocurrido un error en el servidor',
              icon: 'error',
              confirmButtonText: 'Aceptar',
              confirmButtonColor: '#1976d2'
            });
          }
        });
    } else {
      Swal.fire({
        title: 'Error',
        text: 'Las contraseñas nuevas no son iguales',
        icon: 'error',
        confirmButtonText: 'Aceptar',
        confirmButtonColor: '#1976d2'
      });
    }
  }
}.password-form {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding: 2rem;
    
    .password-card {
      width: 100%;
      max-width: 450px;
      border-radius: 16px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
      overflow: hidden;
      background-color: #ffffff;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      
      &:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
      }
    }
  
    .password-header {
      background: linear-gradient(135deg, #2196f3, #1976d2);
      padding: 1.5rem;
      display: flex;
      justify-content: center;
      border-radius: 16px 16px 0 0;
      margin: 0;
      
      .title-container {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .lock-icon {
        font-size: 28px;
        height: 28px;
        width: 28px;
        margin-right: 12px;
        color: white;
      }
      
      .password-title {
        color: white;
        font-size: 1.6rem;
        font-weight: 500;
        margin: 0;
        line-height: 1.3;
      }
    }
  
    .password-content {
      padding: 2rem;
      background-color: #ffffff;
    }
  
    .input-container {
      margin-bottom: 1.25rem;
      
      &:last-child {
        margin-bottom: 0;
      }
    }
  
    .password-field {
      width: 100%;
      
      &.mat-form-field-appearance-outline {
        .mat-form-field-outline {
          color: #e0e0e0;
        }
        
        &.mat-focused {
          .mat-form-field-outline {
            color: #2196f3;
          }
        }
      }
      
      .mat-form-field-infix {
        padding: 0.6em 0;
      }
      
      .mat-form-field-label {
        color: #757575;
      }
      
      .mat-input-element {
        font-size: 1rem;
        color: #333333;
      }
      
      .mat-form-field-subscript-wrapper {
        padding: 0 1em;
      }
    }
  
    .visibility-btn {
      color: #757575;
      transition: all 0.2s ease;
      
      &:hover {
        color: #2196f3;
        background-color: rgba(33, 150, 243, 0.08);
      }
      
      .mat-icon {
        font-size: 1.2rem;
      }
    }
  
    .password-actions {
      display: flex;
      justify-content: center;
      padding: 1rem 2rem 2rem;
      margin: 0;
    }
  
    .submit-btn {
      padding: 0.8rem 2.5rem;
      font-size: 1rem;
      font-weight: 500;
      border-radius: 30px;
      transition: all 0.3s ease;
      min-width: 220px;
      letter-spacing: 0.3px;
      
      .icon-btn {
        margin-right: 10px;
        font-size: 1.2rem;
        vertical-align: middle;
      }
      
      &:not([disabled]) {
        background: linear-gradient(135deg, #2196f3, #1976d2);
        box-shadow: 0 4px 10px rgba(33, 150, 243, 0.3);
        
        &:hover {
          box-shadow: 0 6px 15px rgba(33, 150, 243, 0.4);
          transform: translateY(-2px);
        }
        
        &:active {
          box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);
          transform: translateY(0);
        }
      }
      
      &[disabled] {
        background-color: #f5f5f5;
        color: #bdbdbd;
      }
    }
  
    @media (max-width: 600px) {
      padding: 1rem;
      
      .password-card {
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      }
      
      .password-header {
        padding: 1.5rem;
        
        .lock-icon {
          font-size: 24px;
          height: 24px;
          width: 24px;
        }
        
        .password-title {
          font-size: 1.4rem;
        }
      }
      
      .password-content {
        padding: 1.5rem;
      }
      
      .submit-btn {
        width: 100%;
        min-width: auto;
        padding: 0.7rem 1.5rem;
      }
    }
  }<form *ngIf="miFormulario != null" [formGroup]="miFormulario" (ngSubmit)="cambiarPassword()" class="password-form">
    <mat-card class="password-card">
      <mat-card-header class="password-header">
        <div class="title-container">
          <mat-icon class="lock-icon">lock_reset</mat-icon>
          <mat-card-title class="password-title">Cambiar Contraseña</mat-card-title>
        </div>
      </mat-card-header>
      
      <mat-card-content class="password-content">
        <div class="input-container">
          <mat-form-field appearance="outline" class="password-field">
            <mat-label>Contraseña Actual</mat-label>
            <input 
              matInput 
              [type]="mostrarPassword ? 'text' : 'password'"
              formControlName="password"
              autocomplete="current-password">
            <button 
              mat-icon-button 
              matSuffix
              (click)="togglePasswordVisibility()"
              type="button"
              class="visibility-btn">
              <mat-icon>{{mostrarPassword ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="miFormulario.get('password')?.errors?.['required']">La contraseña actual es requerida</mat-error>
            <mat-error *ngIf="miFormulario.get('password')?.errors?.['minlength']">Mínimo 6 caracteres</mat-error>
          </mat-form-field>
        </div>
        
        <div class="input-container">
          <mat-form-field appearance="outline" class="password-field">
            <mat-label>Nueva Contraseña</mat-label>
            <input 
              matInput 
              [type]="mostrarNuevaPassword ? 'text' : 'password'"
              formControlName="newPassword"
              autocomplete="new-password">
            <button 
              mat-icon-button 
              matSuffix
              (click)="mostrarNuevaPassword = !mostrarNuevaPassword"
              type="button"
              class="visibility-btn">
              <mat-icon>{{mostrarNuevaPassword ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="miFormulario.get('newPassword')?.errors?.['required']">La nueva contraseña es requerida</mat-error>
            <mat-error *ngIf="miFormulario.get('newPassword')?.errors?.['minlength']">Mínimo 6 caracteres</mat-error>
          </mat-form-field>
        </div>
        
        <div class="input-container">
          <mat-form-field appearance="outline" class="password-field">
            <mat-label>Confirmar Nueva Contraseña</mat-label>
            <input 
              matInput 
              [type]="mostrarConfirmacionPassword ? 'text' : 'password'"
              formControlName="newPasswordConfirm"
              autocomplete="new-password">
            <button 
              mat-icon-button 
              matSuffix
              (click)="mostrarConfirmacionPassword = !mostrarConfirmacionPassword"
              type="button"
              class="visibility-btn">
              <mat-icon>{{mostrarConfirmacionPassword ? 'visibility_off' : 'visibility'}}</mat-icon>
            </button>
            <mat-error *ngIf="miFormulario.get('newPasswordConfirm')?.errors?.['required']">La confirmación es requerida</mat-error>
            <mat-error *ngIf="miFormulario.get('newPasswordConfirm')?.errors?.['noIguales']">Las contraseñas no coinciden</mat-error>
          </mat-form-field>
        </div>
      </mat-card-content>
      
      <mat-card-actions class="password-actions">
        <button 
          mat-raised-button
          color="primary"
          type="submit"
          class="submit-btn"
          [disabled]="miFormulario.invalid">
          <mat-icon class="icon-btn">key</mat-icon>
          Actualizar Contraseña
        </button>
      </mat-card-actions>
    </mat-card>
  </form>.password-form {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding: 2rem;
    
    .password-card {
      width: 100%;
      max-width: 450px;
      border-radius: 16px;
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
      overflow: hidden;
      background-color: #ffffff;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      
      &:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
      }
    }
  
    .password-header {
      background: linear-gradient(135deg, #2196f3, #1976d2);
      padding: 1.5rem;
      display: flex;
      justify-content: center;
      border-radius: 16px 16px 0 0;
      margin: 0;
      
      .title-container {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .lock-icon {
        font-size: 28px;
        height: 28px;
        width: 28px;
        margin-right: 12px;
        color: white;
      }
      
      .password-title {
        color: white;
        font-size: 1.6rem;
        font-weight: 500;
        margin: 0;
        line-height: 1.3;
      }
    }
  
    .password-content {
      padding: 2rem;
      background-color: #ffffff;
    }
  
    .input-container {
      margin-bottom: 1.25rem;
      
      &:last-child {
        margin-bottom: 0;
      }
    }
  
    .password-field {
      width: 100%;
      
      &.mat-form-field-appearance-outline {
        .mat-form-field-outline {
          color: #e0e0e0;
        }
        
        &.mat-focused {
          .mat-form-field-outline {
            color: #2196f3;
          }
        }
      }
      
      .mat-form-field-infix {
        padding: 0.6em 0;
      }
      
      .mat-form-field-label {
        color: #757575;
      }
      
      .mat-input-element {
        font-size: 1rem;
        color: #333333;
      }
      
      .mat-form-field-subscript-wrapper {
        padding: 0 1em;
      }
    }
  
    .visibility-btn {
      color: #757575;
      transition: all 0.2s ease;
      
      &:hover {
        color: #2196f3;
        background-color: rgba(33, 150, 243, 0.08);
      }
      
      .mat-icon {
        font-size: 1.2rem;
      }
    }
  
    .password-actions {
      display: flex;
      justify-content: center;
      padding: 1rem 2rem 2rem;
      margin: 0;
    }
  
    .submit-btn {
      padding: 0.8rem 2.5rem;
      font-size: 1rem;
      font-weight: 500;
      border-radius: 30px;
      transition: all 0.3s ease;
      min-width: 220px;
      letter-spacing: 0.3px;
      
      .icon-btn {
        margin-right: 10px;
        font-size: 1.2rem;
        vertical-align: middle;
      }
      
      &:not([disabled]) {
        background: linear-gradient(135deg, #2196f3, #1976d2);
        box-shadow: 0 4px 10px rgba(33, 150, 243, 0.3);
        
        &:hover {
          box-shadow: 0 6px 15px rgba(33, 150, 243, 0.4);
          transform: translateY(-2px);
        }
        
        &:active {
          box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);
          transform: translateY(0);
        }
      }
      
      &[disabled] {
        background-color: #f5f5f5;
        color: #bdbdbd;
      }
    }
  
    @media (max-width: 600px) {
      padding: 1rem;
      
      .password-card {
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      }
      
      .password-header {
        padding: 1.5rem;
        
        .lock-icon {
          font-size: 24px;
          height: 24px;
          width: 24px;
        }
        
        .password-title {
          font-size: 1.4rem;
        }
      }
      
      .password-content {
        padding: 1.5rem;
      }
      
      .submit-btn {
        width: 100%;
        min-width: auto;
        padding: 0.7rem 1.5rem;
      }
    }
  }import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from 'src/app/auth/services/auth.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-cambiar-password-medico',
  templateUrl: './cambiar-password-medico.component.html',
  styleUrls: ['./cambiar-password-medico.component.scss']
})
export class CambiarPasswordMedicoComponent implements OnInit {
  public mostrarPassword: boolean = false;
  public mostrarNuevaPassword: boolean = false;
  public mostrarConfirmacionPassword: boolean = false;
  public miFormulario: FormGroup;
 
  constructor(private fb: FormBuilder, private authService: AuthService) {
    this.miFormulario = this.fb.group({
      password: ['', [Validators.required, Validators.minLength(6)]],
      newPassword: ['', [Validators.required, Validators.minLength(6)]],
      newPasswordConfirm: ['', Validators.required]
    }, {
      validators: this.passwordsIguales('newPassword', 'newPasswordConfirm')
    });
  }

  ngOnInit(): void {
    // Inicialización adicional si es necesaria
  }
  
  togglePasswordVisibility(): void {
    this.mostrarPassword = !this.mostrarPassword;
  }
  
  passwordsIguales(campo1: string, campo2: string) {
    return (formGroup: FormGroup) => {
      const pass1Control = formGroup.get(campo1);
      const pass2Control = formGroup.get(campo2);
      
      if (pass1Control?.value === pass2Control?.value) {
        pass2Control?.setErrors(null);
      } else {
        pass2Control?.setErrors({ noIguales: true });
      }
    };
  }
  
  cambiarPassword(): void {
    if (this.miFormulario.invalid) {
      this.miFormulario.markAllAsTouched();
      return;
    }
    
    const { password, newPassword, newPasswordConfirm } = this.miFormulario.value;
 
    if (newPassword === newPasswordConfirm) {
      // Mostrar un loader mientras se procesa
      Swal.fire({
        title: 'Procesando',
        text: 'Actualizando contraseña...',
        icon: 'info',
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });
      
      this.authService.cambiarPasswordMedico(this.authService.medico.rut, password, newPassword)
        .subscribe({
          next: (ok) => {
            if (ok === true) {
              Swal.fire({
                title: 'Éxito',
                text: 'Ha actualizado correctamente la contraseña',
                icon: 'success',
                confirmButtonText: 'Aceptar',
                confirmButtonColor: '#1976d2'
              }).then(() => {
                this.miFormulario.reset();
              });
            } else {
              Swal.fire({
                title: 'Error',
                text: 'No se pudo actualizar la contraseña',
                icon: 'error',
                confirmButtonText: 'Intentar nuevamente',
                confirmButtonColor: '#1976d2'
              });
            }
          },
          error: (err) => {
            console.error(err);
            Swal.fire({
              title: 'Error',
              text: 'Ha ocurrido un error en el servidor',
              icon: 'error',
              confirmButtonText: 'Aceptar',
              confirmButtonColor: '#1976d2'
            });
          }
        });
    } else {
      Swal.fire({
        title: 'Error',
        text: 'Las contraseñas nuevas no son iguales',
        icon: 'error',
        confirmButtonText: 'Aceptar',
        confirmButtonColor: '#1976d2'
      });
    }
  }
}<div class="row animated fadeIn fast">
    <div class="col-12">
        <div class="card">
            <div class="card-body">

                <input type="text"
                        class="form-control"
                        placeholder="Buscar historial..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )"/> 

            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
      <div class="col">
        <!-- Contenido principal aquí -->
      </div>
      <div class="col-auto">
        <a routerLink="/agregar-historial" class="btn btn-primary">Agregar historial</a>
      </div>
    </div>
  </div>

<div class="row animated fadeIn fast"> <!--SI NO ESTA CARGADO-->
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Historiales medicos escritos </h4>
                <h6 class="card-subtitle">Historiales registrados en mi aplicacion ({{this.totalHistoriales}})</h6>
                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
         
                          <th>ID </th>
                          <th>Diagnostico</th>
                          <th>Medicamento</th>
                          <th>notas</th>
                          <th>Fecha de consulta</th>
                          <th>Paciente</th>
                          <th>Acciones</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr *ngFor="let historial of historiales">
                          <td>{{historial.id_historial}}</td>
                          <td>{{historial.diagnostico}}</td>
                          <td>{{historial.medicamento}}</td>
                          <td>{{historial.notas}}</td>                  
                          <td>{{ historial.fecha_consulta | date: 'MMM d, y' }}</td>

                          <td>{{historial.paciente.nombre}} {{historial.paciente.apellidos}}</td>
                          

                          <td>
                            <div class="icon-container d-flex">
                              <a class="cursor mr-2"
                                 data-toggle="tooltip" 
                                 data-original-title="Editar"
                                 (click)="editarHistorial( historial )"> 
                                <i class="fa fa-pencil text-primary"></i> 
                              </a>
                              <a class="cursor"
                                 data-toggle="tooltip" 
                                 data-original-title="Borrar"
                                 (click)="borrarHistorial( historial )"> 
                                <i class="fa fa-close text-danger"></i> 
                              </a>
                            </div>
                          </td>
                          
                
                
                
                        </tr>
                      </tbody>
                    </table>
                  </div>
                <!--ESTA CONDICION SE HACE PARA QUE CUANDO SE TECLEA EN LA BARRA DE BUSQUEDA Y SE CARGAN LOS RESULTADOS DE BUSQUEDA DESAPARESCAN LOS BOTONES SIGUIENTES Y ANTERIOR EN LA PANTALLA-->
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                  <app-paginator 
                  [totalItems]="totalHistoriales" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>

            
            </div>
        </div>
    </div>

</div>

import { Component } from '@angular/core';
import { Historial, HistorialResponse } from '../historial';
import { HistorialService } from '../services/historial.service';
import { AuthService } from 'src/app/auth/services/auth.service';
import Swal from 'sweetalert2';
import { Router } from '@angular/router';
import { BusquedasService } from '../../admin/pages/services/busquedas.service';

@Component({
  selector: 'app-gestionar-historiales',
  templateUrl: './gestionar-historiales.component.html',
  styleUrls: ['./gestionar-historiales.component.scss']
})
export class GestionarHistorialesComponent {
  
  public historiales: any[] = [];
  historialMedico: Historial[] = []; 
  public desde: number = 0;
  public totalHistoriales: number = 0;

  constructor(private HistorialService: HistorialService, private authservice: AuthService, private router: Router, private BusquedasService: BusquedasService){}

  ngOnInit() {
    if (this.authservice.medico && this.authservice.medico.rut) { 
        const rutMedico = this.authservice.medico.rut;
        this.cargarHistorialMedico(rutMedico);
    } else {
        console.error("RUT del medico no definido o medico no autenticado");
    }
}

buscar(termino: string): void {
  console.log(termino);
  if (termino.length === 0) {
      this.cargarHistorialMedico(this.authservice.medico.rut); // Recargar todos los pacientes si la búsqueda está vacía
      return;
  }

  this.BusquedasService.buscar('historiales', termino)
  .subscribe(resp => {
    
    this.historiales = resp.citas; // Asignar los resultados de la búsqueda
    
  });           
}

cambiarPagina( valor: number ) { 
  this.desde +=valor;

  if( this.desde < 0){ 
    this.desde = 0;
  } else if( this.desde >= this.totalHistoriales ){ 
    this.desde -= valor;
  }
  this.cargarHistorialMedico(this.authservice.medico.rut);
}

cargarHistorialMedico(rut: string): void {
    this.HistorialService.obtenerHistorialPorIdMedico(rut, this.desde).subscribe(
      (resp: any) => {
      
        this.historiales = resp.historiales;
        console.log('aqui el arreglo de historiales',this.historiales);
        this.totalHistoriales = resp.total;
 
      },
      (err) => {
        console.error('Error al cargar historiales:', err);
      }
    );
  }

  editarHistorial(historial: any) {
    console.log('este historial',historial);
    this.router.navigate(['/editar-historial', historial.id_historial]);
  }

  borrarHistorial( historial: any ) {

    Swal.fire({
      title: '¿Borrar Historial?',
      text: `Esta a punto de borrar el historial numero ${ historial.id_historial }, ¿Esta seguro que desea borrarlo?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.HistorialService.borrarHistorial( historial.id_historial )
          .subscribe( resp => {
            
            this.cargarHistorialMedico(this.authservice.medico.rut);
            Swal.fire(
              'Historial borrado',
              `El historial ${ historial.id_historial } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

  }
}
.icon-container .fa {
    cursor: pointer;
}
<div class="row animated fadeIn fast">
    <div class="col-12">
        <div class="card">
            <div class="card-body">

                <input type="text"
                        class="form-control"
                        placeholder="Buscar historial..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )"/> 

            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row">
      <div class="col">
        <!-- Contenido principal aquí -->
      </div>
      <div class="col-auto">
        <a routerLink="/agregar-historial" class="btn btn-primary">Agregar historial</a>
      </div>
    </div>
  </div>

<div class="row animated fadeIn fast"> <!--SI NO ESTA CARGADO-->
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Historiales medicos escritos </h4>
                <h6 class="card-subtitle">Historiales registrados en mi aplicacion ({{this.totalHistoriales}})</h6>
                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
         
                          <th>ID </th>
                          <th>Diagnostico</th>
                          <th>Medicamento</th>
                          <th>notas</th>
                          <th>Fecha de consulta</th>
                          <th>Paciente</th>
                          <th>Acciones</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr *ngFor="let historial of historiales">
                          <td>{{historial.id_historial}}</td>
                          <td>{{historial.diagnostico}}</td>
                          <td>{{historial.medicamento}}</td>
                          <td>{{historial.notas}}</td>                  
                          <td>{{ historial.fecha_consulta | date: 'MMM d, y' }}</td>

                          <td>{{historial.paciente.nombre}} {{historial.paciente.apellidos}}</td>
                          

                          <td>
                            <div class="icon-container d-flex">
                              <a class="cursor mr-2"
                                 data-toggle="tooltip" 
                                 data-original-title="Editar"
                                 (click)="editarHistorial( historial )"> 
                                <i class="fa fa-pencil text-primary"></i> 
                              </a>
                              <a class="cursor"
                                 data-toggle="tooltip" 
                                 data-original-title="Borrar"
                                 (click)="borrarHistorial( historial )"> 
                                <i class="fa fa-close text-danger"></i> 
                              </a>
                            </div>
                          </td>
                          
                
                
                
                        </tr>
                      </tbody>
                    </table>
                  </div>
                <!--ESTA CONDICION SE HACE PARA QUE CUANDO SE TECLEA EN LA BARRA DE BUSQUEDA Y SE CARGAN LOS RESULTADOS DE BUSQUEDA DESAPARESCAN LOS BOTONES SIGUIENTES Y ANTERIOR EN LA PANTALLA-->
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                  <app-paginator 
                  [totalItems]="totalHistoriales" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>

            
            </div>
        </div>
    </div>

</div>

.icon-container .fa {
    cursor: pointer;
}
import { Component } from '@angular/core';
import { Historial, HistorialResponse } from '../historial';
import { HistorialService } from '../services/historial.service';
import { AuthService } from 'src/app/auth/services/auth.service';
import Swal from 'sweetalert2';
import { Router } from '@angular/router';
import { BusquedasService } from '../../admin/pages/services/busquedas.service';

@Component({
  selector: 'app-gestionar-historiales',
  templateUrl: './gestionar-historiales.component.html',
  styleUrls: ['./gestionar-historiales.component.scss']
})
export class GestionarHistorialesComponent {
  
  public historiales: any[] = [];
  historialMedico: Historial[] = []; 
  public desde: number = 0;
  public totalHistoriales: number = 0;

  constructor(private HistorialService: HistorialService, private authservice: AuthService, private router: Router, private BusquedasService: BusquedasService){}

  ngOnInit() {
    if (this.authservice.medico && this.authservice.medico.rut) { 
        const rutMedico = this.authservice.medico.rut;
        this.cargarHistorialMedico(rutMedico);
    } else {
        console.error("RUT del medico no definido o medico no autenticado");
    }
}

buscar(termino: string): void {
  console.log(termino);
  if (termino.length === 0) {
      this.cargarHistorialMedico(this.authservice.medico.rut); // Recargar todos los pacientes si la búsqueda está vacía
      return;
  }

  this.BusquedasService.buscar('historiales', termino)
  .subscribe(resp => {
    
    this.historiales = resp.citas; // Asignar los resultados de la búsqueda
    
  });           
}

cambiarPagina( valor: number ) { 
  this.desde +=valor;

  if( this.desde < 0){ 
    this.desde = 0;
  } else if( this.desde >= this.totalHistoriales ){ 
    this.desde -= valor;
  }
  this.cargarHistorialMedico(this.authservice.medico.rut);
}

cargarHistorialMedico(rut: string): void {
    this.HistorialService.obtenerHistorialPorIdMedico(rut, this.desde).subscribe(
      (resp: any) => {
      
        this.historiales = resp.historiales;
        console.log('aqui el arreglo de historiales',this.historiales);
        this.totalHistoriales = resp.total;
 
      },
      (err) => {
        console.error('Error al cargar historiales:', err);
      }
    );
  }

  editarHistorial(historial: any) {
    console.log('este historial',historial);
    this.router.navigate(['/editar-historial', historial.id_historial]);
  }

  borrarHistorial( historial: any ) {

    Swal.fire({
      title: '¿Borrar Historial?',
      text: `Esta a punto de borrar el historial numero ${ historial.id_historial }, ¿Esta seguro que desea borrarlo?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Si, borrarlo'
    }).then((result) => {
      if (result.value) {
        
        this.HistorialService.borrarHistorial( historial.id_historial )
          .subscribe( resp => {
            
            this.cargarHistorialMedico(this.authservice.medico.rut);
            Swal.fire(
              'Historial borrado',
              `El historial ${ historial.id_historial } fue eliminado correctamente`,
              'success'
            );
            
          });

      }
    })

  }
}
<div class="container mt-5">
  <h2 class="text-center mb-4">
    {{ isEditMode ? 'Editar Historial Médico' : 'Redactar Historial Médico' }}
  </h2>
  <form [formGroup]="historialMedicoForm" (ngSubmit)="onSubmit()">
    <div class="mb-3">
      <label for="paciente" class="form-label">Paciente:</label>
      <select class="form-control" id="paciente" formControlName="rut_paciente">
        <option value="" disabled>Seleccionar paciente</option>
        <option *ngFor="let paciente of pacientes" [value]="paciente.rut">
          {{ paciente.nombre }} {{ paciente.apellidos }}
        </option>
      </select>
      <div *ngIf="formularioIntentadoEnviar && historialMedicoForm.get('rut_paciente')?.hasError('required')" class="text-danger">
        Se debe seleccionar un paciente.
      </div>
    </div>

    <div class="mb-3">
      <label for="medico" class="form-label">Médico:</label>
      <select class="form-control" id="medico" formControlName="rut_medico">
        <option [value]="AuthService.medico.rut">
          {{ AuthService.medico.nombre }} {{ AuthService.medico.apellidos }}
        </option>
      </select>
    </div>

    <div class="mb-3">
      <label for="diagnostico" class="form-label">Diagnóstico:</label>
      <input type="text" class="form-control" id="diagnostico" formControlName="diagnostico">
      <div *ngIf="formularioIntentadoEnviar && historialMedicoForm.get('diagnostico')?.hasError('required')" class="text-danger">
        El diagnóstico es requerido.
      </div>
    </div>

    <div class="mb-3">
      <label for="medicamento" class="form-label">Medicamento:</label>
      <input type="text" class="form-control" id="medicamento" formControlName="medicamento">
    </div>

    <div class="mb-3">
      <label for="notas" class="form-label">Notas:</label>
      <textarea class="form-control" id="notas" formControlName="notas"></textarea>
    </div>

    <div class="mb-3">
      <label for="fecha_consulta" class="form-label">Fecha de Consulta:</label>
      <input type="date" class="form-control" id="fecha_consulta" formControlName="fecha_consulta">
      <div *ngIf="formularioIntentadoEnviar && historialMedicoForm.get('fecha_consulta')?.hasError('required')" class="text-danger">
        La fecha de consulta es requerida.
      </div>
    </div>

    <button type="submit" class="btn btn-primary">
      {{ isEditMode ? 'Guardar Cambios' : 'Guardar Historial' }}
    </button>
  </form>
</div>
// historial.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { HistorialService } from '../services/historial.service';
import { AuthService } from '../../auth/services/auth.service';
import { PacienteService } from 'src/app/admin/pages/services/usuario.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-historial',
  templateUrl: './historial.component.html',
  styleUrls: ['./historial.component.scss']
})
export class HistorialComponent implements OnInit {
  historialMedicoForm: FormGroup;
  isEditMode: boolean = false;
  historialId: number | null = null;
  formularioIntentadoEnviar: boolean = false;
  // Agrega la propiedad para guardar los pacientes
  pacientes: any[] = [];

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private historialService: HistorialService,
    public AuthService: AuthService,
    private pacienteService: PacienteService  // Inyecta el servicio de pacientes
  ) {
    // Crea el formulario con sus validaciones
    this.historialMedicoForm = this.fb.group({
      id_historial_medico: [''],
      diagnostico: ['', Validators.required],
      medicamento: [''],
      notas: [''],
      fecha_consulta: [new Date().toISOString().split('T')[0], Validators.required],
      rut_paciente: ['', Validators.required],
      rut_medico: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    const rut_medico = this.AuthService.medico.rut;
    this.pacienteService.cargarAllPacientesEnCurso(rut_medico).subscribe(
      (data: any) => {
        this.pacientes = data.usuarios; // Asumiendo que la respuesta tiene la propiedad "usuarios"
      },
      error => {
        console.error('Error al cargar pacientes:', error);
      }
    );
  
    const idParam = this.route.snapshot.paramMap.get('id');
    console.log("aqui el idParam",idParam);
    if (idParam) {
      this.isEditMode = true;
      this.historialId = +idParam;
      this.historialService.getHistorialPorId(this.historialId).subscribe(
        (response: any) => {
          this.historialMedicoForm.patchValue({
            id_historial_medico: response.id_historial,
            diagnostico: response.diagnostico,
            medicamento: response.medicamento,
            notas: response.notas,
            fecha_consulta: response.fecha_consulta,
            rut_paciente: response.rut_paciente,
            rut_medico: response.rut_medico
          });
        },
        error => {
          console.error('Error al cargar el historial:', error);
        }
      );
    } else {
      this.isEditMode = false;
      this.historialMedicoForm.patchValue({
        rut_medico: this.AuthService.medico.rut
      });
    }
  }
  

  onSubmit(): void {
    this.formularioIntentadoEnviar = true;
    if (this.historialMedicoForm.invalid) {
      return;
    }
    const historialData = this.historialMedicoForm.value;
  
    if (this.isEditMode) {
      this.historialService.editarHistorial(historialData).subscribe(
        response => {
          Swal.fire('Éxito', 'Historial editado exitosamente', 'success');
          this.router.navigate(['/gestionar-historiales']);
        },
        error => {
          Swal.fire('Error', 'Hubo un error al editar el historial', 'error');
        }
      );
    } else {
      // Remover la propiedad "id_historial_medico" para no enviarla vacía
      delete historialData.id_historial_medico;
      this.historialService.crearHistorial(historialData).subscribe(
        response => {
          console.log("response del historial creado");
          Swal.fire('Éxito', 'Historial creado exitosamente', 'success');
          this.router.navigate(['/gestionar-historiales']);
        },
        error => {
          Swal.fire('Error', 'Hubo un error al crear el historial', 'error');
        }
      );
    }
  }
  
}
<div class="container mt-5">
  <h2 class="text-center mb-4">
    {{ isEditMode ? 'Editar Historial Médico' : 'Redactar Historial Médico' }}
  </h2>
  <form [formGroup]="historialMedicoForm" (ngSubmit)="onSubmit()">
    <div class="mb-3">
      <label for="paciente" class="form-label">Paciente:</label>
      <select class="form-control" id="paciente" formControlName="rut_paciente">
        <option value="" disabled>Seleccionar paciente</option>
        <option *ngFor="let paciente of pacientes" [value]="paciente.rut">
          {{ paciente.nombre }} {{ paciente.apellidos }}
        </option>
      </select>
      <div *ngIf="formularioIntentadoEnviar && historialMedicoForm.get('rut_paciente')?.hasError('required')" class="text-danger">
        Se debe seleccionar un paciente.
      </div>
    </div>

    <div class="mb-3">
      <label for="medico" class="form-label">Médico:</label>
      <select class="form-control" id="medico" formControlName="rut_medico">
        <option [value]="AuthService.medico.rut">
          {{ AuthService.medico.nombre }} {{ AuthService.medico.apellidos }}
        </option>
      </select>
    </div>

    <div class="mb-3">
      <label for="diagnostico" class="form-label">Diagnóstico:</label>
      <input type="text" class="form-control" id="diagnostico" formControlName="diagnostico">
      <div *ngIf="formularioIntentadoEnviar && historialMedicoForm.get('diagnostico')?.hasError('required')" class="text-danger">
        El diagnóstico es requerido.
      </div>
    </div>

    <div class="mb-3">
      <label for="medicamento" class="form-label">Medicamento:</label>
      <input type="text" class="form-control" id="medicamento" formControlName="medicamento">
    </div>

    <div class="mb-3">
      <label for="notas" class="form-label">Notas:</label>
      <textarea class="form-control" id="notas" formControlName="notas"></textarea>
    </div>

    <div class="mb-3">
      <label for="fecha_consulta" class="form-label">Fecha de Consulta:</label>
      <input type="date" class="form-control" id="fecha_consulta" formControlName="fecha_consulta">
      <div *ngIf="formularioIntentadoEnviar && historialMedicoForm.get('fecha_consulta')?.hasError('required')" class="text-danger">
        La fecha de consulta es requerida.
      </div>
    </div>

    <button type="submit" class="btn btn-primary">
      {{ isEditMode ? 'Guardar Cambios' : 'Guardar Historial' }}
    </button>
  </form>
</div>
// historial.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { HistorialService } from '../services/historial.service';
import { AuthService } from '../../auth/services/auth.service';
import { PacienteService } from 'src/app/admin/pages/services/usuario.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-historial',
  templateUrl: './historial.component.html',
  styleUrls: ['./historial.component.scss']
})
export class HistorialComponent implements OnInit {
  historialMedicoForm: FormGroup;
  isEditMode: boolean = false;
  historialId: number | null = null;
  formularioIntentadoEnviar: boolean = false;
  // Agrega la propiedad para guardar los pacientes
  pacientes: any[] = [];

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private historialService: HistorialService,
    public AuthService: AuthService,
    private pacienteService: PacienteService  // Inyecta el servicio de pacientes
  ) {
    // Crea el formulario con sus validaciones
    this.historialMedicoForm = this.fb.group({
      id_historial_medico: [''],
      diagnostico: ['', Validators.required],
      medicamento: [''],
      notas: [''],
      fecha_consulta: [new Date().toISOString().split('T')[0], Validators.required],
      rut_paciente: ['', Validators.required],
      rut_medico: ['', Validators.required]
    });
  }

  ngOnInit(): void {
    const rut_medico = this.AuthService.medico.rut;
    this.pacienteService.cargarAllPacientesEnCurso(rut_medico).subscribe(
      (data: any) => {
        this.pacientes = data.usuarios; // Asumiendo que la respuesta tiene la propiedad "usuarios"
      },
      error => {
        console.error('Error al cargar pacientes:', error);
      }
    );
  
    const idParam = this.route.snapshot.paramMap.get('id');
    console.log("aqui el idParam",idParam);
    if (idParam) {
      this.isEditMode = true;
      this.historialId = +idParam;
      this.historialService.getHistorialPorId(this.historialId).subscribe(
        (response: any) => {
          this.historialMedicoForm.patchValue({
            id_historial_medico: response.id_historial,
            diagnostico: response.diagnostico,
            medicamento: response.medicamento,
            notas: response.notas,
            fecha_consulta: response.fecha_consulta,
            rut_paciente: response.rut_paciente,
            rut_medico: response.rut_medico
          });
        },
        error => {
          console.error('Error al cargar el historial:', error);
        }
      );
    } else {
      this.isEditMode = false;
      this.historialMedicoForm.patchValue({
        rut_medico: this.AuthService.medico.rut
      });
    }
  }
  

  onSubmit(): void {
    this.formularioIntentadoEnviar = true;
    if (this.historialMedicoForm.invalid) {
      return;
    }
    const historialData = this.historialMedicoForm.value;
  
    if (this.isEditMode) {
      this.historialService.editarHistorial(historialData).subscribe(
        response => {
          Swal.fire('Éxito', 'Historial editado exitosamente', 'success');
          this.router.navigate(['/gestionar-historiales']);
        },
        error => {
          Swal.fire('Error', 'Hubo un error al editar el historial', 'error');
        }
      );
    } else {
      // Remover la propiedad "id_historial_medico" para no enviarla vacía
      delete historialData.id_historial_medico;
      this.historialService.crearHistorial(historialData).subscribe(
        response => {
          console.log("response del historial creado");
          Swal.fire('Éxito', 'Historial creado exitosamente', 'success');
          this.router.navigate(['/gestionar-historiales']);
        },
        error => {
          Swal.fire('Error', 'Hubo un error al crear el historial', 'error');
        }
      );
    }
  }
  
}

<div class="grid p-3">
    <div class="col-12 mt-5 md:col-6 md:col-offset-3 md:mt-8">
        <app-dashboard></app-dashboard>
        <router-outlet></router-outlet>
    </div>
  </div>import { Component } from '@angular/core';
import { SidebarService } from 'src/app/shared/sidebar.service';

@Component({
  selector: 'app-layout-page',
  templateUrl: './layout-page.component.html',
  styleUrls: ['./layout-page.component.scss']
})
export class LayoutPageComponent {

  constructor(private sidebarService: SidebarService){}

  ngOnInit(): void {

    this.sidebarService.cargarMenu();
  

  }

}

<div class="grid p-3">
    <div class="col-12 mt-5 md:col-6 md:col-offset-3 md:mt-8">
        <app-dashboard></app-dashboard>
        <router-outlet></router-outlet>
    </div>
  </div>import { Component } from '@angular/core';
import { SidebarService } from 'src/app/shared/sidebar.service';

@Component({
  selector: 'app-layout-page',
  templateUrl: './layout-page.component.html',
  styleUrls: ['./layout-page.component.scss']
})
export class LayoutPageComponent {

  constructor(private sidebarService: SidebarService){}

  ngOnInit(): void {

    this.sidebarService.cargarMenu();
  

  }

}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from 'src/environment/environment';
import { Historial, HistorialResponse } from '../historial';
import { Observable } from 'rxjs';

const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class HistorialService {

  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}


  constructor( private http: HttpClient) { }

  cargarHistorial(desde: number = 0):Observable<HistorialResponse> {
    const url = `${base_url}/historial`;
    return this.http.get<HistorialResponse>(url, this.headers);
  }

  crearHistorial(historial: Historial) {
    const url = `${base_url}/historial`; 
    return this.http.post(url, historial, this.headers);
  }

  obtenerHistorialPorId(rutPaciente: string, desde: number, limite: number = 5): Observable<HistorialResponse> { 
    const url = `${ base_url }/historial/${rutPaciente}?desde=${desde}&limite=${limite}`;
    return this.http.get<HistorialResponse>(url, this.headers); 
}
obtenerHistorialPorIdMedico(rutMedico: string, desde: number, limite: number = 5): Observable<any> { 
  const url = `${ base_url }/historial/medico/${rutMedico}?desde=${desde}&limite=${limite}`;
  return this.http.get<any>(url, this.headers); 
}

getHistorialPorId(historialId: number): Observable<any> { 
  const url = `${ base_url }/historial/porIdHistorial/${historialId}`;
  return this.http.get<any>(url, this.headers); 
}

editarHistorial(historialEditado: any): Observable<any> {
  return this.http.put(`${ base_url }/historial/${historialEditado.id_historial_medico}`, historialEditado, this.headers);
}

borrarHistorial( id: string ){
  const url = `${ base_url }/historial/${ id }`;
  return this.http.delete( url, this.headers );
}

}
<div class="row animated fadeIn fast">
    <div class="col-12">
        <div class="card">
            <div class="card-body">

                <input type="text"
                        class="form-control"
                        placeholder="Buscar Citas..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )"/> <!--CUANDO SE PRESIONE UNA TECLA BUSQUE EL TERMINO KEYUP ES PARA VER LAS LETRAS QUE SE ESCRIBEN EN TIEMPO REAL MIENTRAS SE EPREISONA UNA LETRA-->

            </div>
        </div>
    </div>
</div>


<div class="row animated fadeIn fast"> <!--SI NO ESTA CARGADO-->
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Total de Citas: ({{totalCitas}}) </h4>
                <h6 class="card-subtitle">Citas medicas</h6>
                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
         
                          <th> ID </th>
                          <th>Motivo</th>
                          <th>Fecha</th>
                          <th>Hora inicio</th>
                          <th>Hora Fin</th>
                          <th>Nombre</th>
                          <th>Apellidos</th>
                          <th>Estado cita</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr *ngFor="let cita of citasMedicas">
                          <td>{{ cita.idCita }}</td>
                          <td>{{ cita.motivo }}</td>
                          <td>{{ cita.fecha | date: 'mediumDate' }}</td>
                          <td>{{ cita.hora_inicio }}</td>
                          <td>{{ cita.hora_fin }}</td>
                          <td>{{ cita.paciente.nombre }}</td>
                          <td>{{ cita.paciente.apellidos}}</td>
                          
                          <select class="form-control" [(ngModel)]="cita.estado" (change)="cambioEstado(cita)">
                            <option value="en_curso">En Curso</option>
                            <option value="terminado">Terminado</option>               
                            <option value="pagado">Pagado</option>
                  
                        
                        </select>

                        </tr>
                      </tbody>
                      
                    </table>
                  </div>
                <!--ESTA CONDICION SE HACE PARA QUE CUANDO SE TECLEA EN LA BARRA DE BUSQUEDA Y SE CARGAN LOS RESULTADOS DE BUSQUEDA DESAPARESCAN LOS BOTONES SIGUIENTES Y ANTERIOR EN LA PANTALLA-->
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                  <app-paginator 
                  [totalItems]="totalCitas" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
            
            </div>
        </div>
    </div>

</div>


import { Component, OnInit } from '@angular/core';
import { CitaMedicaService } from '../../admin/pages/services/cita-medica.service';
import { AuthService } from '../../auth/services/auth.service';
import { BusquedaMedicoService } from '../../pacientes/services/busqueda-medico.service';
import { BusquedasService } from 'src/app/admin/pages/services/busquedas.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-ver-citas-medicas',
  templateUrl: './ver-citas-medicas.component.html',
  styleUrls: ['./ver-citas-medicas.component.scss']
})
export class VerCitasMedicasComponent implements OnInit {

  citasMedicas: any[] = []; 
  public desde: number = 0;
  public totalCitas: number = 0;

  constructor(private CitaMedicaService: CitaMedicaService, public authService: AuthService, private BusquedaMedicoService: BusquedasService){}

  ngOnInit() {
    if (this.authService.medico && this.authService.medico.rut) { 
        const rutMedico = this.authService.medico.rut;
        console.log('AQUI ESTA EL RUT DEL MEDICO', rutMedico );
        this.cargarCitasMedicas(rutMedico, 0);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }
}

cambioEstado(cita: any) {
  this.CitaMedicaService.actualizarCita(cita.idCita, { estado: cita.estado })
    .subscribe(response => {
      console.log('Cita actualizada:', response);
      Swal.fire({
        icon: 'success',
        title: '¡Hecho!',
        text: 'Cita actualizada correctamente.',
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'Aceptar'
      });
    }, error => {
      console.error('Error al actualizar cita:', error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Hubo un error al actualizar la cita.',
        confirmButtonColor: '#d33',
        confirmButtonText: 'Intentar de nuevo'
      });
    });
}

cargarCitasMedicas(rutMedico: string, desde: number) {
  this.CitaMedicaService.obtenerCitaMedicaPorIdParaMedicos(rutMedico, desde)
  .subscribe((response: any) => {
    console.log('AQUI ESTA LAS CITAS',response);
    this.citasMedicas = response.citas;
  
    this.totalCitas = response.total;
    console.log('AQUI ESTA EL TOTAL DE CITAS',this.totalCitas);
    console.log('AQUI ESTA LAS CITAS EN EL ARREGLO',this.citasMedicas);
   

  }, error => {
    console.error("Error al obtener el historial médico:", error);
  });
}

buscar(termino: string) {
  console.log(termino);
  if (termino.length === 0) {
    this.cargarCitasMedicas(this.authService.medico.rut, this.desde);
    return;
  }

  
  this.BusquedaMedicoService.buscar('cita_medico', termino)
    .subscribe((response: any) => {
      console.log('aqui la respuesta',response)
      this.citasMedicas = response.citas;
      
    });
}

cambiarPagina(valor: number) {
  console.log("Valor actual de 'desde':", this.desde);
  this.desde += valor;

  if (this.desde < 0) {
    this.desde = 0;
  } else if (this.desde >= this.totalCitas) {
    this.desde -= valor;
  }

  console.log("Nuevo valor de 'desde':", this.desde);
  this.cargarCitasMedicas(this.authService.medico.rut, this.desde);
}

}
.modern-search {
    width: 100%;
    padding: 1rem 1.5rem;
    border: 2px solid #e0e0e0;
    border-radius: 30px;
    font-size: 1rem;
    transition: all 0.3s ease;
    
    &:focus {
        outline: none;
        border-color: #3498db;
        box-shadow: 0 0 12px rgba(52, 152, 219, 0.2);
    }
}

.medical-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0 0.5rem;
    
    thead {
        th {
            background: #f8f9fa;
            color: #2c3e50;
            padding: 1rem;
            border-bottom: 2px solid #3498db;
        }
    }
    
    tbody tr {
        background: white;
        transition: transform 0.2s ease;
        
        &:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
        }
        
        td {
            padding: 1rem;
            vertical-align: middle;
        }
    }
}

.estado-container {
    position: relative;
    
    .estado-select {
        appearance: none;
        width: 100%;
        padding: 0.8rem 2rem 0.8rem 1rem;
        border: none;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
        
        &.en-curso {
            background: #fff3e0;
            color: #ef6c00;
        }
        
        &.terminado {
            background: #e8f5e9;
            color: #2e7d32;
        }
        
        &.pagado {
            background: #e3f2fd;
            color: #1565c0;
        }
        
        &:hover {
            filter: brightness(0.95);
        }
        
        &:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.3);
        }
    }
    
    .select-arrow {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid currentColor;
        pointer-events: none;
    }
}

.time-badge {
    background: #f8f9fa;
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    font-size: 0.9rem;
}

.time-separator {
    margin: 0 0.5rem;
    color: #b0bec5;
}

.badge-count {
    background: #3498db;
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    font-size: 0.9rem;
    margin-left: 0.5rem;
}

.medical-paginator {
    margin-top: 2rem;
    border-top: 2px solid #f1f1f1;
    padding-top: 1.5rem;
}<div class="row animated fadeIn fast">
    <div class="col-12">
        <div class="card">
            <div class="card-body">

                <input type="text"
                        class="form-control"
                        placeholder="Buscar Citas..."
                        #txtTermino
                        (keyup)="buscar( txtTermino.value )"/> <!--CUANDO SE PRESIONE UNA TECLA BUSQUE EL TERMINO KEYUP ES PARA VER LAS LETRAS QUE SE ESCRIBEN EN TIEMPO REAL MIENTRAS SE EPREISONA UNA LETRA-->

            </div>
        </div>
    </div>
</div>


<div class="row animated fadeIn fast"> <!--SI NO ESTA CARGADO-->
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Total de Citas: ({{totalCitas}}) </h4>
                <h6 class="card-subtitle">Citas medicas</h6>
                <div class="table-responsive">
                    <table class="table table-bordered">
                      <thead>
                        <tr>
         
                          <th> ID </th>
                          <th>Motivo</th>
                          <th>Fecha</th>
                          <th>Hora inicio</th>
                          <th>Hora Fin</th>
                          <th>Nombre</th>
                          <th>Apellidos</th>
                          <th>Estado cita</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr *ngFor="let cita of citasMedicas">
                          <td>{{ cita.idCita }}</td>
                          <td>{{ cita.motivo }}</td>
                          <td>{{ cita.fecha | date: 'mediumDate' }}</td>
                          <td>{{ cita.hora_inicio }}</td>
                          <td>{{ cita.hora_fin }}</td>
                          <td>{{ cita.paciente.nombre }}</td>
                          <td>{{ cita.paciente.apellidos}}</td>
                          
                          <select class="form-control" [(ngModel)]="cita.estado" (change)="cambioEstado(cita)">
                            <option value="en_curso">En Curso</option>
                            <option value="terminado">Terminado</option>               
                            <option value="pagado">Pagado</option>
                  
                        
                        </select>

                        </tr>
                      </tbody>
                      
                    </table>
                  </div>
                <!--ESTA CONDICION SE HACE PARA QUE CUANDO SE TECLEA EN LA BARRA DE BUSQUEDA Y SE CARGAN LOS RESULTADOS DE BUSQUEDA DESAPARESCAN LOS BOTONES SIGUIENTES Y ANTERIOR EN LA PANTALLA-->
                <div *ngIf="txtTermino.value.length === 0"> <!--SI EL TERMINO ES IGUAL A 0 LOS BOTONES SIGUIENTE Y ANTERIOR SE VAN A MOSTRAR CASO CONTRARIO VAN A DESAPARECER-->
                  <app-paginator 
                  [totalItems]="totalCitas" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
                </app-paginator>
              </div>
            
            </div>
        </div>
    </div>

</div>


.modern-search {
    width: 100%;
    padding: 1rem 1.5rem;
    border: 2px solid #e0e0e0;
    border-radius: 30px;
    font-size: 1rem;
    transition: all 0.3s ease;
    
    &:focus {
        outline: none;
        border-color: #3498db;
        box-shadow: 0 0 12px rgba(52, 152, 219, 0.2);
    }
}

.medical-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0 0.5rem;
    
    thead {
        th {
            background: #f8f9fa;
            color: #2c3e50;
            padding: 1rem;
            border-bottom: 2px solid #3498db;
        }
    }
    
    tbody tr {
        background: white;
        transition: transform 0.2s ease;
        
        &:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
        }
        
        td {
            padding: 1rem;
            vertical-align: middle;
        }
    }
}

.estado-container {
    position: relative;
    
    .estado-select {
        appearance: none;
        width: 100%;
        padding: 0.8rem 2rem 0.8rem 1rem;
        border: none;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
        
        &.en-curso {
            background: #fff3e0;
            color: #ef6c00;
        }
        
        &.terminado {
            background: #e8f5e9;
            color: #2e7d32;
        }
        
        &.pagado {
            background: #e3f2fd;
            color: #1565c0;
        }
        
        &:hover {
            filter: brightness(0.95);
        }
        
        &:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.3);
        }
    }
    
    .select-arrow {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid currentColor;
        pointer-events: none;
    }
}

.time-badge {
    background: #f8f9fa;
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    font-size: 0.9rem;
}

.time-separator {
    margin: 0 0.5rem;
    color: #b0bec5;
}

.badge-count {
    background: #3498db;
    color: white;
    padding: 0.3rem 0.8rem;
    border-radius: 15px;
    font-size: 0.9rem;
    margin-left: 0.5rem;
}

.medical-paginator {
    margin-top: 2rem;
    border-top: 2px solid #f1f1f1;
    padding-top: 1.5rem;
}import { Component, OnInit } from '@angular/core';
import { CitaMedicaService } from '../../admin/pages/services/cita-medica.service';
import { AuthService } from '../../auth/services/auth.service';
import { BusquedaMedicoService } from '../../pacientes/services/busqueda-medico.service';
import { BusquedasService } from 'src/app/admin/pages/services/busquedas.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-ver-citas-medicas',
  templateUrl: './ver-citas-medicas.component.html',
  styleUrls: ['./ver-citas-medicas.component.scss']
})
export class VerCitasMedicasComponent implements OnInit {

  citasMedicas: any[] = []; 
  public desde: number = 0;
  public totalCitas: number = 0;

  constructor(private CitaMedicaService: CitaMedicaService, public authService: AuthService, private BusquedaMedicoService: BusquedasService){}

  ngOnInit() {
    if (this.authService.medico && this.authService.medico.rut) { 
        const rutMedico = this.authService.medico.rut;
        console.log('AQUI ESTA EL RUT DEL MEDICO', rutMedico );
        this.cargarCitasMedicas(rutMedico, 0);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }
}

cambioEstado(cita: any) {
  this.CitaMedicaService.actualizarCita(cita.idCita, { estado: cita.estado })
    .subscribe(response => {
      console.log('Cita actualizada:', response);
      Swal.fire({
        icon: 'success',
        title: '¡Hecho!',
        text: 'Cita actualizada correctamente.',
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'Aceptar'
      });
    }, error => {
      console.error('Error al actualizar cita:', error);
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Hubo un error al actualizar la cita.',
        confirmButtonColor: '#d33',
        confirmButtonText: 'Intentar de nuevo'
      });
    });
}

cargarCitasMedicas(rutMedico: string, desde: number) {
  this.CitaMedicaService.obtenerCitaMedicaPorIdParaMedicos(rutMedico, desde)
  .subscribe((response: any) => {
    console.log('AQUI ESTA LAS CITAS',response);
    this.citasMedicas = response.citas;
  
    this.totalCitas = response.total;
    console.log('AQUI ESTA EL TOTAL DE CITAS',this.totalCitas);
    console.log('AQUI ESTA LAS CITAS EN EL ARREGLO',this.citasMedicas);
   

  }, error => {
    console.error("Error al obtener el historial médico:", error);
  });
}

buscar(termino: string) {
  console.log(termino);
  if (termino.length === 0) {
    this.cargarCitasMedicas(this.authService.medico.rut, this.desde);
    return;
  }

  
  this.BusquedaMedicoService.buscar('cita_medico', termino)
    .subscribe((response: any) => {
      console.log('aqui la respuesta',response)
      this.citasMedicas = response.citas;
      
    });
}

cambiarPagina(valor: number) {
  console.log("Valor actual de 'desde':", this.desde);
  this.desde += valor;

  if (this.desde < 0) {
    this.desde = 0;
  } else if (this.desde >= this.totalCitas) {
    this.desde -= valor;
  }

  console.log("Nuevo valor de 'desde':", this.desde);
  this.cargarCitasMedicas(this.authService.medico.rut, this.desde);
}

}
export class InfoClinica {
    public nombreClinica: string;
    public direccion: string;
    public telefono: string;
    public email: string;

    constructor(nombreClinica: string, direccion: string, telefono: string, email: string) {
        this.nombreClinica = nombreClinica;
        this.direccion = direccion;
        this.telefono = telefono;
        this.email = email;
    }
}
export class Medico {
    public nombre: string;
    public apellidos: string;
    public rol: string;
    public rut: string;
  
    constructor(nombre: string, apellidos: string, rol: string, rut: string) {
      this.nombre = nombre;
      this.apellidos = apellidos;
      this.rol = rol;
      this.rut = rut;
    }
  }
  import { environment } from "src/environment/environment";

const base_url = environment.base_url;

/*
    export interface Paciente {
    rut: string;
    nombre: string;
    apellidos: string;
    email: string;
    password: string;
    fecha_nacimiento: string;
    telefono: string;
    direccion: string;
  }
  

*/
export class Usuario {

    constructor( 
        public nombre: string,
        public apellidos: string,
  
        public rol: 'ADMIN_ROLE' | 'USER_ROLE',
        public rut: string,
     ) {}




/*
     get imagenUrl(){ //UNA FUNCION QUE RETORNA LA DIRECCION DE LA IMAGEN DEL USUARIO EN BASE A SI ESTA EXISTE O NO (SI EL USUARIO TIENE UNA IMAGEN O NO) PARA PODER MOSTRARLA EN EL SIDEBAR, EN EL HEADERS ETC

        if( !this.img ){
            return `${ base_url }/upload/usuarios/no-image`; //SI NO TIENE IMAGEN
        } else if( this.img.includes('https') ){ //SI TIENE UNA IMAGEN DE GOOGLE
            return this.img;
        } else if ( this.img ) {
            return `${ base_url }/upload/usuarios/${ this.img }`; //SI TIENE UNA IMAGEN
        } else {
            return `${ base_url }/upload/usuarios/no-image`;
        }
      
     }
*/
}import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { AgendarCitaComponent } from './pages/agendar-cita/agendar-cita.component';
import { FormularioCitaComponent } from './pages/formulario-cita/formulario-cita.component';
import { RouterModule, Routes } from '@angular/router';
import { BusquedaMedicoComponent } from './pages/busqueda-medico/busqueda-medico.component';
import { HistorialPacienteComponent } from './pages/Historial-medico/historial-paciente/historial-paciente.component';
import { AuthGuard } from '../auth/guards/auth.guard';
import { PaymentSuccessComponent } from './pages/payment-success/payment-success.component';
import { PaymentFailureComponent } from './pages/payment-failure/payment-failure.component';
import { patientGuard } from '../auth/guards/patient.guard';
import { CambiarPasswordComponent } from './pages/cambiar-password/cambiar-password.component';
import { VerCitasPacienteComponent } from './pages/ver-citas-paciente/ver-citas-paciente.component';
import { InicioPacienteComponent } from './pages/inicio-paciente/inicio-paciente.component';
import { VerHistorialMedicoPacienteComponent } from './pages/Historial-medico/ver-historial-medico-paciente/ver-historial-medico-paciente.component';


const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent, canActivate: [AuthGuard],
    children: [
      { path: 'inicio-paciente', component: InicioPacienteComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'Agendar-cita', component: AgendarCitaComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'formulario-cita', component: FormularioCitaComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'cambiar-password', component: CambiarPasswordComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'busqueda-medico', component: BusquedaMedicoComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'ver-cita-paciente', component: VerCitasPacienteComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'historial', component: HistorialPacienteComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'ver-historial-paciente/:id', component: VerHistorialMedicoPacienteComponent, canActivate: [AuthGuard,patientGuard] },

      { path: 'payment-success', component: PaymentSuccessComponent,canActivate: [AuthGuard, patientGuard] },

      { path: 'payment-failure', component: PaymentFailureComponent, canActivate: [AuthGuard, patientGuard]},
    ]
  }
];


@NgModule({
  imports: [ RouterModule.forChild( routes ) ],
  exports: [ RouterModule ],
})
export class PacientesRoutingModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AgendarCitaComponent } from './pages/agendar-cita/agendar-cita.component';
import { FormularioCitaComponent } from './pages/formulario-cita/formulario-cita.component';

import { PacientesRoutingModule } from './pacientes-routing.module';
import { MaterialModule } from '../material/material.module';
import { SharedModule } from '../shared/shared.module';
import { RouterModule } from '@angular/router';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { BusquedaMedicoComponent } from './pages/busqueda-medico/busqueda-medico.component';
import { HistorialPacienteComponent } from './pages/Historial-medico/historial-paciente/historial-paciente.component';
import { PaymentSuccessComponent } from './pages/payment-success/payment-success.component';
import { PaymentFailureComponent } from './pages/payment-failure/payment-failure.component';
import { FullCalendarModule } from '@fullcalendar/angular';
import { CambiarPasswordComponent } from './pages/cambiar-password/cambiar-password.component';
import { VerCitasPacienteComponent } from './pages/ver-citas-paciente/ver-citas-paciente.component';
import { InicioPacienteComponent } from './pages/inicio-paciente/inicio-paciente.component';
import { VerHistorialMedicoPacienteComponent } from './pages/Historial-medico/ver-historial-medico-paciente/ver-historial-medico-paciente.component'; 


@NgModule({
  declarations: [
    AgendarCitaComponent,
    FormularioCitaComponent,
    LayoutPageComponent,
    BusquedaMedicoComponent,
    HistorialPacienteComponent,
    PaymentSuccessComponent,
    PaymentFailureComponent,
    CambiarPasswordComponent,
    VerCitasPacienteComponent,
    InicioPacienteComponent,
    VerHistorialMedicoPacienteComponent
 


  ],
  imports: [
    CommonModule,
    PacientesRoutingModule,
    MaterialModule,
    SharedModule,
    RouterModule,
    FormsModule,
    ReactiveFormsModule,
    FullCalendarModule,
  ]
})
export class PacientesModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { AgendarCitaComponent } from './pages/agendar-cita/agendar-cita.component';
import { FormularioCitaComponent } from './pages/formulario-cita/formulario-cita.component';
import { RouterModule, Routes } from '@angular/router';
import { BusquedaMedicoComponent } from './pages/busqueda-medico/busqueda-medico.component';
import { HistorialPacienteComponent } from './pages/Historial-medico/historial-paciente/historial-paciente.component';
import { AuthGuard } from '../auth/guards/auth.guard';
import { PaymentSuccessComponent } from './pages/payment-success/payment-success.component';
import { PaymentFailureComponent } from './pages/payment-failure/payment-failure.component';
import { patientGuard } from '../auth/guards/patient.guard';
import { CambiarPasswordComponent } from './pages/cambiar-password/cambiar-password.component';
import { VerCitasPacienteComponent } from './pages/ver-citas-paciente/ver-citas-paciente.component';
import { InicioPacienteComponent } from './pages/inicio-paciente/inicio-paciente.component';
import { VerHistorialMedicoPacienteComponent } from './pages/Historial-medico/ver-historial-medico-paciente/ver-historial-medico-paciente.component';


const routes: Routes = [
  {
    path: '',
    component: LayoutPageComponent, canActivate: [AuthGuard],
    children: [
      { path: 'inicio-paciente', component: InicioPacienteComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'Agendar-cita', component: AgendarCitaComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'formulario-cita', component: FormularioCitaComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'cambiar-password', component: CambiarPasswordComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'busqueda-medico', component: BusquedaMedicoComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'ver-cita-paciente', component: VerCitasPacienteComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'historial', component: HistorialPacienteComponent, canActivate: [AuthGuard, patientGuard] },

      { path: 'ver-historial-paciente/:id', component: VerHistorialMedicoPacienteComponent, canActivate: [AuthGuard,patientGuard] },

      { path: 'payment-success', component: PaymentSuccessComponent,canActivate: [AuthGuard, patientGuard] },

      { path: 'payment-failure', component: PaymentFailureComponent, canActivate: [AuthGuard, patientGuard]},
    ]
  }
];


@NgModule({
  imports: [ RouterModule.forChild( routes ) ],
  exports: [ RouterModule ],
})
export class PacientesRoutingModule { }
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AgendarCitaComponent } from './pages/agendar-cita/agendar-cita.component';
import { FormularioCitaComponent } from './pages/formulario-cita/formulario-cita.component';

import { PacientesRoutingModule } from './pacientes-routing.module';
import { MaterialModule } from '../material/material.module';
import { SharedModule } from '../shared/shared.module';
import { RouterModule } from '@angular/router';
import { LayoutPageComponent } from './pages/layout-page/layout-page.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { BusquedaMedicoComponent } from './pages/busqueda-medico/busqueda-medico.component';
import { HistorialPacienteComponent } from './pages/Historial-medico/historial-paciente/historial-paciente.component';
import { PaymentSuccessComponent } from './pages/payment-success/payment-success.component';
import { PaymentFailureComponent } from './pages/payment-failure/payment-failure.component';
import { FullCalendarModule } from '@fullcalendar/angular';
import { CambiarPasswordComponent } from './pages/cambiar-password/cambiar-password.component';
import { VerCitasPacienteComponent } from './pages/ver-citas-paciente/ver-citas-paciente.component';
import { InicioPacienteComponent } from './pages/inicio-paciente/inicio-paciente.component';
import { VerHistorialMedicoPacienteComponent } from './pages/Historial-medico/ver-historial-medico-paciente/ver-historial-medico-paciente.component'; 


@NgModule({
  declarations: [
    AgendarCitaComponent,
    FormularioCitaComponent,
    LayoutPageComponent,
    BusquedaMedicoComponent,
    HistorialPacienteComponent,
    PaymentSuccessComponent,
    PaymentFailureComponent,
    CambiarPasswordComponent,
    VerCitasPacienteComponent,
    InicioPacienteComponent,
    VerHistorialMedicoPacienteComponent
 


  ],
  imports: [
    CommonModule,
    PacientesRoutingModule,
    MaterialModule,
    SharedModule,
    RouterModule,
    FormsModule,
    ReactiveFormsModule,
    FullCalendarModule,
  ]
})
export class PacientesModule { }
<!-- HTML: agendar-cita.component.html -->
<div class="appointment-container">
    <div class="hero-section">
      <div class="hero-content">
        <h1 class="main-title">Servicios Médicos</h1>
        <p class="subtitle">Agenda tu cita médica y recibe atención de calidad</p>
        <button class="cta-button" routerLink="/formulario-cita">
          <i class="fas fa-calendar-plus"></i> Agendar Cita Médica
        </button>
      </div>
    </div>
  
    <div class="info-grid">
      <!-- Sección de horarios de la clínica -->
      <div class="schedule-section">
        <div class="section-header">
          <h2 class="section-title">Horario de Atención</h2>
          <div class="section-divider"></div>
        </div>
        
        <div class="schedule-cards">
          <div *ngFor="let horario of horarioClinicas" 
               class="schedule-card" 
               [ngClass]="{'schedule-open': horario.estado === 'abierto', 
                           'schedule-closed': horario.estado === 'cerrado'}">
            <div class="day-badge">{{ horario.dia.charAt(0).toUpperCase() + horario.dia.slice(1) }}</div>
            <div class="time-display">
              <ng-container *ngIf="horario.estado === 'abierto'">
                <i class="fas fa-clock"></i>
                <span>{{ horario.horarioApertura }} - {{ horario.horarioCierre }}</span>
              </ng-container>
              <ng-container *ngIf="horario.estado === 'cerrado'">
                <i class="fas fa-door-closed"></i>
                <span>Cerrado</span>
              </ng-container>
            </div>
          </div>
        </div>
      </div>
  
      <!-- Sección de información de la clínica -->
      <div class="clinic-info-section" *ngIf="infoClinica">
        <div class="section-header">
          <h2 class="section-title">Información de Contacto</h2>
          <div class="section-divider"></div>
        </div>
        
        <div class="clinic-info-card">
          <div class="clinic-logo">
            <i class="fas fa-hospital-user"></i>
          </div>
          
          <div class="clinic-details">
            <div class="info-item">
              <i class="fas fa-hospital"></i>
              <div>
                <label>Nombre</label>
                <p>{{ infoClinica.nombreClinica }}</p>
              </div>
            </div>
            
            <div class="info-item">
              <i class="fas fa-map-marker-alt"></i>
              <div>
                <label>Dirección</label>
                <p>{{ infoClinica.direccion }}</p>
              </div>
            </div>
            
            <div class="info-item">
              <i class="fas fa-phone-alt"></i>
              <div>
                <label>Teléfono</label>
                <p>{{ infoClinica.telefono }}</p>
              </div>
            </div>
            
            <div class="info-item">
              <i class="fas fa-envelope"></i>
              <div>
                <label>Email</label>
                <p>{{ infoClinica.email }}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>import { Component, OnInit } from '@angular/core';
import { TipoCitaService } from 'src/app/admin/pages/services/tipo-cita.service';
import { HorarioClinicaService } from '../../services/horario-clinica.service';
import { Horario, HorarioClinicaResponse } from '../interfaces/horario_clinicas';
import dayGridPlugin from '@fullcalendar/daygrid';

import { Router } from '@angular/router';
import { CalendarOptions } from 'fullcalendar';
import { InfoClinica } from 'src/app/models/infoClinica';
import { AuthService } from '../../../auth/services/auth.service';
@Component({
  selector: 'app-agendar-cita',
  templateUrl: './agendar-cita.component.html',
  styleUrls: ['./agendar-cita.component.scss']
})
export class AgendarCitaComponent implements OnInit{

  horarioClinicas: Horario [] = [];
  calendarOptions: CalendarOptions;
  public infoClinica!: InfoClinica;

  constructor(private TipoCitaService: TipoCitaService, private HorarioClinicaService: HorarioClinicaService, private router: Router, private AuthService: AuthService){
    this.calendarOptions = {
      plugins: [dayGridPlugin],
      initialView: 'dayGridMonth',
      dateClick: this.handleDateClick.bind(this),
  }
  }

      ngOnInit(): void {
        this.infoClinica = this.AuthService.infoClinica;
        
        this.HorarioClinicaService.cargarHorarioClinica()
    .subscribe((resp: HorarioClinicaResponse) => { 

        this.horarioClinicas = resp.horariosClinica;
    });

  }
  handleDateClick(arg:any) {
    // ... tu código para manejar el clic en la fecha ...
  }

}
.appointment-container {
    font-family: 'Roboto', 'Segoe UI', Arial, sans-serif;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  /* Hero Section */
  .hero-section {
    background: linear-gradient(135deg, #4e73df 0%, #36b9cc 100%);
    border-radius: 10px;
    padding: 3rem 2rem;
    margin-bottom: 2.5rem;
    color: white;
    text-align: center;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }
  
  .main-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    letter-spacing: 0.5px;
  }
  
  .subtitle {
    font-size: 1.2rem;
    margin-bottom: 2rem;
    opacity: 0.9;
  }
  
  .cta-button {
    background-color: white;
    color: #4e73df;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    font-weight: 600;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
  }
  
  .cta-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.2);
  }
  
  .cta-button i {
    margin-right: 8px;
  }
  
  /* Grid Layout */
  .info-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  @media (min-width: 768px) {
    .info-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  /* Section Headers */
  .section-header {
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .section-title {
    color: #2c3e50;
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }
  
  .section-divider {
    height: 4px;
    width: 60px;
    background: linear-gradient(90deg, #4e73df, #36b9cc);
    margin: 0 auto;
    border-radius: 2px;
  }
  
  /* Schedule Cards */
  .schedule-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
    gap: 1rem;
  }
  
  .schedule-card {
    background: white;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .schedule-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
  }
  
  .day-badge {
    padding: 0.8rem;
    text-align: center;
    font-weight: 600;
    font-size: 1.1rem;
    letter-spacing: 0.5px;
  }
  
  .time-display {
    padding: 0.8rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-size: 0.9rem;
  }
  
  .schedule-open .day-badge {
    background-color: #4e73df;
    color: white;
  }
  
  .schedule-closed .day-badge {
    background-color: #e74a3b;
    color: white;
  }
  
  .schedule-open .time-display {
    color: #2c3e50;
    background-color: #f8f9fc;
  }
  
  .schedule-closed .time-display {
    color: #e74a3b;
    background-color: #fff5f5;
  }
  
  /* Clinic Info Card */
  .clinic-info-card {
    background: white;
    border-radius: 10px;
    box-shadow: 0 3px 15px rgba(0, 0, 0, 0.08);
    overflow: hidden;
  }
  
  .clinic-logo {
    background: linear-gradient(135deg, #4e73df 0%, #36b9cc 100%);
    padding: 2rem;
    text-align: center;
  }
  
  .clinic-logo i {
    font-size: 3rem;
    color: white;
  }
  
  .clinic-details {
    padding: 2rem;
  }
  
  .info-item {
    display: flex;
    align-items: flex-start;
    margin-bottom: 1.5rem;
  }
  
  .info-item:last-child {
    margin-bottom: 0;
  }
  
  .info-item i {
    font-size: 1.2rem;
    color: #4e73df;
    margin-right: 1rem;
    margin-top: 3px;
  }
  
  .info-item label {
    display: block;
    font-size: 0.85rem;
    color: #6c757d;
    margin-bottom: 0.3rem;
  }
  
  .info-item p {
    margin: 0;
    color: #2c3e50;
    font-weight: 500;
  }<!-- HTML: agendar-cita.component.html -->
<div class="appointment-container">
    <div class="hero-section">
      <div class="hero-content">
        <h1 class="main-title">Servicios Médicos</h1>
        <p class="subtitle">Agenda tu cita médica y recibe atención de calidad</p>
        <button class="cta-button" routerLink="/formulario-cita">
          <i class="fas fa-calendar-plus"></i> Agendar Cita Médica
        </button>
      </div>
    </div>
  
    <div class="info-grid">
      <!-- Sección de horarios de la clínica -->
      <div class="schedule-section">
        <div class="section-header">
          <h2 class="section-title">Horario de Atención</h2>
          <div class="section-divider"></div>
        </div>
        
        <div class="schedule-cards">
          <div *ngFor="let horario of horarioClinicas" 
               class="schedule-card" 
               [ngClass]="{'schedule-open': horario.estado === 'abierto', 
                           'schedule-closed': horario.estado === 'cerrado'}">
            <div class="day-badge">{{ horario.dia.charAt(0).toUpperCase() + horario.dia.slice(1) }}</div>
            <div class="time-display">
              <ng-container *ngIf="horario.estado === 'abierto'">
                <i class="fas fa-clock"></i>
                <span>{{ horario.horarioApertura }} - {{ horario.horarioCierre }}</span>
              </ng-container>
              <ng-container *ngIf="horario.estado === 'cerrado'">
                <i class="fas fa-door-closed"></i>
                <span>Cerrado</span>
              </ng-container>
            </div>
          </div>
        </div>
      </div>
  
      <!-- Sección de información de la clínica -->
      <div class="clinic-info-section" *ngIf="infoClinica">
        <div class="section-header">
          <h2 class="section-title">Información de Contacto</h2>
          <div class="section-divider"></div>
        </div>
        
        <div class="clinic-info-card">
          <div class="clinic-logo">
            <i class="fas fa-hospital-user"></i>
          </div>
          
          <div class="clinic-details">
            <div class="info-item">
              <i class="fas fa-hospital"></i>
              <div>
                <label>Nombre</label>
                <p>{{ infoClinica.nombreClinica }}</p>
              </div>
            </div>
            
            <div class="info-item">
              <i class="fas fa-map-marker-alt"></i>
              <div>
                <label>Dirección</label>
                <p>{{ infoClinica.direccion }}</p>
              </div>
            </div>
            
            <div class="info-item">
              <i class="fas fa-phone-alt"></i>
              <div>
                <label>Teléfono</label>
                <p>{{ infoClinica.telefono }}</p>
              </div>
            </div>
            
            <div class="info-item">
              <i class="fas fa-envelope"></i>
              <div>
                <label>Email</label>
                <p>{{ infoClinica.email }}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>.appointment-container {
    font-family: 'Roboto', 'Segoe UI', Arial, sans-serif;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  /* Hero Section */
  .hero-section {
    background: linear-gradient(135deg, #4e73df 0%, #36b9cc 100%);
    border-radius: 10px;
    padding: 3rem 2rem;
    margin-bottom: 2.5rem;
    color: white;
    text-align: center;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }
  
  .main-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    letter-spacing: 0.5px;
  }
  
  .subtitle {
    font-size: 1.2rem;
    margin-bottom: 2rem;
    opacity: 0.9;
  }
  
  .cta-button {
    background-color: white;
    color: #4e73df;
    border: none;
    padding: 1rem 2rem;
    font-size: 1.1rem;
    font-weight: 600;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
  }
  
  .cta-button:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.2);
  }
  
  .cta-button i {
    margin-right: 8px;
  }
  
  /* Grid Layout */
  .info-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  @media (min-width: 768px) {
    .info-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  /* Section Headers */
  .section-header {
    margin-bottom: 1.5rem;
    text-align: center;
  }
  
  .section-title {
    color: #2c3e50;
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
  }
  
  .section-divider {
    height: 4px;
    width: 60px;
    background: linear-gradient(90deg, #4e73df, #36b9cc);
    margin: 0 auto;
    border-radius: 2px;
  }
  
  /* Schedule Cards */
  .schedule-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
    gap: 1rem;
  }
  
  .schedule-card {
    background: white;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .schedule-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
  }
  
  .day-badge {
    padding: 0.8rem;
    text-align: center;
    font-weight: 600;
    font-size: 1.1rem;
    letter-spacing: 0.5px;
  }
  
  .time-display {
    padding: 0.8rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-size: 0.9rem;
  }
  
  .schedule-open .day-badge {
    background-color: #4e73df;
    color: white;
  }
  
  .schedule-closed .day-badge {
    background-color: #e74a3b;
    color: white;
  }
  
  .schedule-open .time-display {
    color: #2c3e50;
    background-color: #f8f9fc;
  }
  
  .schedule-closed .time-display {
    color: #e74a3b;
    background-color: #fff5f5;
  }
  
  /* Clinic Info Card */
  .clinic-info-card {
    background: white;
    border-radius: 10px;
    box-shadow: 0 3px 15px rgba(0, 0, 0, 0.08);
    overflow: hidden;
  }
  
  .clinic-logo {
    background: linear-gradient(135deg, #4e73df 0%, #36b9cc 100%);
    padding: 2rem;
    text-align: center;
  }
  
  .clinic-logo i {
    font-size: 3rem;
    color: white;
  }
  
  .clinic-details {
    padding: 2rem;
  }
  
  .info-item {
    display: flex;
    align-items: flex-start;
    margin-bottom: 1.5rem;
  }
  
  .info-item:last-child {
    margin-bottom: 0;
  }
  
  .info-item i {
    font-size: 1.2rem;
    color: #4e73df;
    margin-right: 1rem;
    margin-top: 3px;
  }
  
  .info-item label {
    display: block;
    font-size: 0.85rem;
    color: #6c757d;
    margin-bottom: 0.3rem;
  }
  
  .info-item p {
    margin: 0;
    color: #2c3e50;
    font-weight: 500;
  }import { Component, OnInit } from '@angular/core';
import { TipoCitaService } from 'src/app/admin/pages/services/tipo-cita.service';
import { HorarioClinicaService } from '../../services/horario-clinica.service';
import { Horario, HorarioClinicaResponse } from '../interfaces/horario_clinicas';
import dayGridPlugin from '@fullcalendar/daygrid';

import { Router } from '@angular/router';
import { CalendarOptions } from 'fullcalendar';
import { InfoClinica } from 'src/app/models/infoClinica';
import { AuthService } from '../../../auth/services/auth.service';
@Component({
  selector: 'app-agendar-cita',
  templateUrl: './agendar-cita.component.html',
  styleUrls: ['./agendar-cita.component.scss']
})
export class AgendarCitaComponent implements OnInit{

  horarioClinicas: Horario [] = [];
  calendarOptions: CalendarOptions;
  public infoClinica!: InfoClinica;

  constructor(private TipoCitaService: TipoCitaService, private HorarioClinicaService: HorarioClinicaService, private router: Router, private AuthService: AuthService){
    this.calendarOptions = {
      plugins: [dayGridPlugin],
      initialView: 'dayGridMonth',
      dateClick: this.handleDateClick.bind(this),
  }
  }

      ngOnInit(): void {
        this.infoClinica = this.AuthService.infoClinica;
        
        this.HorarioClinicaService.cargarHorarioClinica()
    .subscribe((resp: HorarioClinicaResponse) => { 

        this.horarioClinicas = resp.horariosClinica;
    });

  }
  handleDateClick(arg:any) {
    // ... tu código para manejar el clic en la fecha ...
  }

}
<div class="appointment-selection">
    <div *ngIf="bloques.length > 0" class="available-slots-container">
      <div class="card shadow-sm">
        <div class="card-header bg-light">
          <h4 class="mb-0 text-primary"><i class="fa fa-calendar-check-o me-2"></i>Horarios disponibles</h4>
          <p class="text-muted small mb-0">Seleccione el horario que mejor se adapte a sus necesidades</p>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-hover table-striped mb-0">
              <thead class="bg-light text-dark">
                <tr>
                  <th class="px-3 py-3">Médico</th>
                  <th class="px-3 py-3">Hora Inicio</th>
                  <th class="px-3 py-3">Hora Fin</th>
                  <th class="px-3 py-3">Precio</th>
                  <th class="px-3 py-3">Especialidad</th>
                  <th class="px-3 py-3 text-center">Acción</th>
                </tr>
              </thead>
              <tbody>
                <tr *ngFor="let bloque of bloques">
                  <td class="px-3 py-3 align-middle text-capitalize">
                    <div class="d-flex align-items-center">
                      <span class="avatar avatar-sm bg-primary text-white me-2">
                        {{ bloque.medicoNombre.charAt(0) }}
                      </span>
                      <span>{{ bloque.medicoNombre }}</span>
                    </div>
                  </td>
                  <td class="px-3 py-3 align-middle">
                    <span class="badge bg-light text-dark">
                      <i class="fa fa-clock-o me-1"></i>
                      {{ bloque.hora_inicio }}
                    </span>
                  </td>
                  <td class="px-3 py-3 align-middle">
                    <span class="badge bg-light text-dark">
                      <i class="fa fa-clock-o me-1"></i>
                      {{ bloque.hora_fin }}
                    </span>
                  </td>
                  <td class="px-3 py-3 align-middle">
                    <span class="fw-bold">$ {{ bloque.precio | number:'1.0-0' }}</span>
                  </td>
                  <td class="px-3 py-3 align-middle text-capitalize">
                    <span class="badge bg-info text-white">
                      {{ bloque.especialidad }}
                    </span>
                  </td>
                  <td class="px-3 py-3 align-middle text-center">
                    <button class="btn btn-primary btn-appointment" (click)="agendarCita(bloque)">
                      <i class="fa fa-calendar-plus-o me-1"></i>
                      Agendar
                    </button>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  
    <div *ngIf="bloques.length === 0" class="no-slots-container">
      <div class="card shadow-sm">
        <div class="card-body text-center p-5">
          <i class="fa fa-calendar-times-o text-danger empty-icon mb-3"></i>
          <h4 class="mb-3">No hay médicos disponibles</h4>
          <p class="text-muted mb-4">No se encontraron horarios disponibles para la fecha seleccionada. Por favor intente con otra fecha.</p>
          <button class="btn btn-secondary" (click)="volverAlFormulario()">
            <i class="fa fa-arrow-left me-1"></i>
            Volver al formulario
          </button>
        </div>
      </div>
    </div>
  </div>import { Component, OnInit } from '@angular/core';
import { BusquedaMedicoService } from '../../services/busqueda-medico.service';
import { Bloque, BloquesResponse } from '../interfaces/busqueda-medicos';
import { CitaMedicaService } from '../../../admin/pages/services/cita-medica.service';
import { AuthService } from '../../../auth/services/auth.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
@Component({
  selector: 'app-busqueda-medico',
  templateUrl: './busqueda-medico.component.html',
  styleUrls: ['./busqueda-medico.component.scss']
})
export class BusquedaMedicoComponent implements OnInit {

  bloques: Bloque[] = [];

  constructor(private BusquedaMedicoService: BusquedaMedicoService, private CitaMedicaService: CitaMedicaService, private AuthService: AuthService, private router: Router) { }
  
  ngOnInit(): void {
    this.BusquedaMedicoService.bloques$
      .subscribe(data => {
        this.bloques = data;
        console.log(this.bloques);
      });
      const rutPaciente = this.AuthService.usuario.rut;
      console.log('Aqui esta el rut del paciente logeado',rutPaciente);
  }

  volverAlFormulario(): void {
    this.router.navigate(['/formulario-cita']);
}




agendarCita(bloque: Bloque): void {
  const rutPaciente = this.AuthService.usuario.rut!;

  // Primero creamos la cita médica
  this.CitaMedicaService.crearCitaMedicaPaciente(bloque, rutPaciente)
    .subscribe(
      (response) => {
        console.log('Cita creada con éxito', response);
        console.log('AQUI ESTA EL ID CREADO', response.cita.idCita);

        // Una vez que la cita está creada, procedemos con el pago
        console.log('Precio de la cita:', bloque.precio);
        this.BusquedaMedicoService.pagarCita(bloque.precio, bloque.especialidad, response.cita.idCita)
          .subscribe(
            responsePago => {
              console.log('Aquí está la respuesta del pago', responsePago);
              // Aquí manejas la redirección o lo que sea necesario después del pago
              window.location.href = responsePago.init_point;
            },
            errorPago => {
              console.error('Error al crear la orden de pago:', errorPago);
            }
          );
      },
      (error) => {
        console.error('Error al crear la cita médica:', error);

        // Verificar si el error es específicamente porque el usuario ya tiene una cita programada
        if (error.status === 400 && error.error.mensaje) {
          Swal.fire({
            title: 'Error',
            text: error.error.mensaje, // Muestra el mensaje enviado desde el backend
            icon: 'error',
            confirmButtonText: 'Entendido'
          });
        } else {
          // Manejo de otros tipos de errores
          Swal.fire({
            title: 'Error',
            text: 'Ha ocurrido un error al agendar la cita.',
            icon: 'error',
            confirmButtonText: 'Entendido'
          });
        }
      }
    );
}
  
  

}
// Estilos para la selección de citas médicas
.appointment-selection {
  padding: 20px 0;
}

// Estilos para la tarjeta
.card {
  border-radius: 10px;
  border: none;
  overflow: hidden;
  margin-bottom: 1.5rem;
}

.card-header {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.shadow-sm {
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
}

// Estilos para la tabla
.table {
  margin-bottom: 0;
}

.table th {
  font-weight: 600;
  color: #2d3748;
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.table tbody tr {
  transition: all 0.3s ease;
}

.table tbody tr:hover {
  background-color: rgba(0, 123, 255, 0.05);
}

// Estilo para avatar con iniciales
.avatar {
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  font-weight: 600;
  font-size: 14px;
}

// Estilos para el botón de agendar
.btn-appointment {
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-weight: 500;
  transition: all 0.3s ease;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
}

// Estilos para cuando no hay slots disponibles
.no-slots-container {
  max-width: 600px;
  margin: 0 auto;
  
  .empty-icon {
    font-size: 3rem;
    display: block;
  }
}

// Estilo para badges
.badge {
  padding: 0.5rem 0.75rem;
  font-weight: 500;
  border-radius: 6px;
  
  &.bg-info {
    background-color: #38b2ac !important;
  }
  
  &.bg-light {
    background-color: #f1f5f9 !important;
  }
}

// Estilos para textos
.text-capitalize {
  text-transform: capitalize;
}

// Responsive
@media (max-width: 768px) {
  .table th, 
  .table td {
    padding: 0.75rem 0.5rem;
  }
  
  .avatar {
    width: 28px;
    height: 28px;
    font-size: 12px;
  }
  
  .btn-appointment {
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
  }
}<div class="appointment-selection">
    <div *ngIf="bloques.length > 0" class="available-slots-container">
      <div class="card shadow-sm">
        <div class="card-header bg-light">
          <h4 class="mb-0 text-primary"><i class="fa fa-calendar-check-o me-2"></i>Horarios disponibles</h4>
          <p class="text-muted small mb-0">Seleccione el horario que mejor se adapte a sus necesidades</p>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-hover table-striped mb-0">
              <thead class="bg-light text-dark">
                <tr>
                  <th class="px-3 py-3">Médico</th>
                  <th class="px-3 py-3">Hora Inicio</th>
                  <th class="px-3 py-3">Hora Fin</th>
                  <th class="px-3 py-3">Precio</th>
                  <th class="px-3 py-3">Especialidad</th>
                  <th class="px-3 py-3 text-center">Acción</th>
                </tr>
              </thead>
              <tbody>
                <tr *ngFor="let bloque of bloques">
                  <td class="px-3 py-3 align-middle text-capitalize">
                    <div class="d-flex align-items-center">
                      <span class="avatar avatar-sm bg-primary text-white me-2">
                        {{ bloque.medicoNombre.charAt(0) }}
                      </span>
                      <span>{{ bloque.medicoNombre }}</span>
                    </div>
                  </td>
                  <td class="px-3 py-3 align-middle">
                    <span class="badge bg-light text-dark">
                      <i class="fa fa-clock-o me-1"></i>
                      {{ bloque.hora_inicio }}
                    </span>
                  </td>
                  <td class="px-3 py-3 align-middle">
                    <span class="badge bg-light text-dark">
                      <i class="fa fa-clock-o me-1"></i>
                      {{ bloque.hora_fin }}
                    </span>
                  </td>
                  <td class="px-3 py-3 align-middle">
                    <span class="fw-bold">$ {{ bloque.precio | number:'1.0-0' }}</span>
                  </td>
                  <td class="px-3 py-3 align-middle text-capitalize">
                    <span class="badge bg-info text-white">
                      {{ bloque.especialidad }}
                    </span>
                  </td>
                  <td class="px-3 py-3 align-middle text-center">
                    <button class="btn btn-primary btn-appointment" (click)="agendarCita(bloque)">
                      <i class="fa fa-calendar-plus-o me-1"></i>
                      Agendar
                    </button>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  
    <div *ngIf="bloques.length === 0" class="no-slots-container">
      <div class="card shadow-sm">
        <div class="card-body text-center p-5">
          <i class="fa fa-calendar-times-o text-danger empty-icon mb-3"></i>
          <h4 class="mb-3">No hay médicos disponibles</h4>
          <p class="text-muted mb-4">No se encontraron horarios disponibles para la fecha seleccionada. Por favor intente con otra fecha.</p>
          <button class="btn btn-secondary" (click)="volverAlFormulario()">
            <i class="fa fa-arrow-left me-1"></i>
            Volver al formulario
          </button>
        </div>
      </div>
    </div>
  </div>// Estilos para la selección de citas médicas
.appointment-selection {
  padding: 20px 0;
}

// Estilos para la tarjeta
.card {
  border-radius: 10px;
  border: none;
  overflow: hidden;
  margin-bottom: 1.5rem;
}

.card-header {
  padding: 1rem 1.5rem;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
}

.shadow-sm {
  box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
}

// Estilos para la tabla
.table {
  margin-bottom: 0;
}

.table th {
  font-weight: 600;
  color: #2d3748;
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.table tbody tr {
  transition: all 0.3s ease;
}

.table tbody tr:hover {
  background-color: rgba(0, 123, 255, 0.05);
}

// Estilo para avatar con iniciales
.avatar {
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  font-weight: 600;
  font-size: 14px;
}

// Estilos para el botón de agendar
.btn-appointment {
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-weight: 500;
  transition: all 0.3s ease;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
}

// Estilos para cuando no hay slots disponibles
.no-slots-container {
  max-width: 600px;
  margin: 0 auto;
  
  .empty-icon {
    font-size: 3rem;
    display: block;
  }
}

// Estilo para badges
.badge {
  padding: 0.5rem 0.75rem;
  font-weight: 500;
  border-radius: 6px;
  
  &.bg-info {
    background-color: #38b2ac !important;
  }
  
  &.bg-light {
    background-color: #f1f5f9 !important;
  }
}

// Estilos para textos
.text-capitalize {
  text-transform: capitalize;
}

// Responsive
@media (max-width: 768px) {
  .table th, 
  .table td {
    padding: 0.75rem 0.5rem;
  }
  
  .avatar {
    width: 28px;
    height: 28px;
    font-size: 12px;
  }
  
  .btn-appointment {
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
  }
}import { Component, OnInit } from '@angular/core';
import { BusquedaMedicoService } from '../../services/busqueda-medico.service';
import { Bloque, BloquesResponse } from '../interfaces/busqueda-medicos';
import { CitaMedicaService } from '../../../admin/pages/services/cita-medica.service';
import { AuthService } from '../../../auth/services/auth.service';
import { Router } from '@angular/router';
import Swal from 'sweetalert2';
@Component({
  selector: 'app-busqueda-medico',
  templateUrl: './busqueda-medico.component.html',
  styleUrls: ['./busqueda-medico.component.scss']
})
export class BusquedaMedicoComponent implements OnInit {

  bloques: Bloque[] = [];

  constructor(private BusquedaMedicoService: BusquedaMedicoService, private CitaMedicaService: CitaMedicaService, private AuthService: AuthService, private router: Router) { }
  
  ngOnInit(): void {
    this.BusquedaMedicoService.bloques$
      .subscribe(data => {
        this.bloques = data;
        console.log(this.bloques);
      });
      const rutPaciente = this.AuthService.usuario.rut;
      console.log('Aqui esta el rut del paciente logeado',rutPaciente);
  }

  volverAlFormulario(): void {
    this.router.navigate(['/formulario-cita']);
}




agendarCita(bloque: Bloque): void {
  const rutPaciente = this.AuthService.usuario.rut!;

  // Primero creamos la cita médica
  this.CitaMedicaService.crearCitaMedicaPaciente(bloque, rutPaciente)
    .subscribe(
      (response) => {
        console.log('Cita creada con éxito', response);
        console.log('AQUI ESTA EL ID CREADO', response.cita.idCita);

        // Una vez que la cita está creada, procedemos con el pago
        console.log('Precio de la cita:', bloque.precio);
        this.BusquedaMedicoService.pagarCita(bloque.precio, bloque.especialidad, response.cita.idCita)
          .subscribe(
            responsePago => {
              console.log('Aquí está la respuesta del pago', responsePago);
              // Aquí manejas la redirección o lo que sea necesario después del pago
              window.location.href = responsePago.init_point;
            },
            errorPago => {
              console.error('Error al crear la orden de pago:', errorPago);
            }
          );
      },
      (error) => {
        console.error('Error al crear la cita médica:', error);

        // Verificar si el error es específicamente porque el usuario ya tiene una cita programada
        if (error.status === 400 && error.error.mensaje) {
          Swal.fire({
            title: 'Error',
            text: error.error.mensaje, // Muestra el mensaje enviado desde el backend
            icon: 'error',
            confirmButtonText: 'Entendido'
          });
        } else {
          // Manejo de otros tipos de errores
          Swal.fire({
            title: 'Error',
            text: 'Ha ocurrido un error al agendar la cita.',
            icon: 'error',
            confirmButtonText: 'Entendido'
          });
        }
      }
    );
}
  
  

}
<form *ngIf="miFormulario != null" [formGroup]="miFormulario" (ngSubmit)="cambiarPassword()" class="security-form">
    <mat-card class="password-card">
        <div class="security-header">
            <mat-icon class="security-icon">lock_reset</mat-icon>
            <mat-card-title class="security-title">Seguridad de la Cuenta</mat-card-title>
            <p class="security-subtitle">Protege tu acceso al sistema médico</p>
        </div>

        <mat-card-content class="password-content">
            <div class="password-section">
                <mat-form-field appearance="outline" class="security-input">
                    <mat-label>Contraseña actual</mat-label>
                    <input matInput 
                           [type]="mostrarPassword ? 'text' : 'password'" 
                           formControlName="password"
                           required>
                    <mat-icon matSuffix (click)="mostrarPassword = !mostrarPassword" class="toggle-icon">
                        {{mostrarPassword ? 'visibility_off' : 'visibility'}}
                    </mat-icon>
                    <mat-error *ngIf="miFormulario.get('password')?.hasError('required')">
                        Campo obligatorio
                    </mat-error>
                </mat-form-field>

                <mat-form-field appearance="outline" class="security-input">
                    <mat-label>Nueva contraseña</mat-label>
                    <input matInput 
                           [type]="mostrarNuevaPassword ? 'text' : 'password'" 
                           formControlName="newPassword"
                           required>
                    <mat-icon matSuffix (click)="mostrarNuevaPassword = !mostrarNuevaPassword" class="toggle-icon">
                        {{mostrarNuevaPassword ? 'visibility_off' : 'visibility'}}
                    </mat-icon>
                    <mat-hint>Mínimo 6 caracteres</mat-hint>
                    <mat-error *ngIf="miFormulario.get('newPassword')?.hasError('minlength')">
                        Mínimo 6 caracteres requeridos
                    </mat-error>
                </mat-form-field>

                <mat-form-field appearance="outline" class="security-input">
                    <mat-label>Confirmar nueva contraseña</mat-label>
                    <input matInput 
                           [type]="mostrarConfirmacionPassword ? 'text' : 'password'" 
                           formControlName="newPasswordConfirm"
                           required>
                    <mat-icon matSuffix (click)="mostrarConfirmacionPassword = !mostrarConfirmacionPassword" class="toggle-icon">
                        {{mostrarConfirmacionPassword ? 'visibility_off' : 'visibility'}}
                    </mat-icon>
                    <mat-error *ngIf="miFormulario.hasError('mismatch')">
                        Las contraseñas no coinciden
                    </mat-error>
                </mat-form-field>
            </div>

            <div class="password-requirements">
                <p class="requirements-title">Requisitos de seguridad:</p>
                <ul class="requirements-list">
                    <li><mat-icon>check_circle</mat-icon> Mínimo 6 caracteres</li>
                    <li><mat-icon>check_circle</mat-icon> Sin espacios en blanco</li>
                </ul>
            </div>
        </mat-card-content>

        <mat-card-actions class="security-actions">
            <button mat-raised-button 
                    color="primary" 
                    type="submit"
                    class="security-button"
                    [disabled]="miFormulario.invalid">
                <mat-icon>lock_reset</mat-icon>
                Actualizar Contraseña
            </button>
            
            <button mat-stroked-button 
                    color="warn" 
                    routerLink="/dashboard"
                    class="security-button">
                <mat-icon>cancel</mat-icon>
                Cancelar
            </button>
        </mat-card-actions>
    </mat-card>
</form>import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../../auth/services/auth.service';
import Swal from 'sweetalert2';
import { Usuario } from 'src/app/models/usuario';
@Component({
  selector: 'app-cambiar-password',
  templateUrl: './cambiar-password.component.html',
  styleUrls: ['./cambiar-password.component.scss']
})
export class CambiarPasswordComponent implements OnInit {
  public mostrarPassword: boolean = false;
  public mostrarNuevaPassword: boolean = false;
  public mostrarConfirmacionPassword: boolean = false;
  miFormulario: FormGroup;
  
  constructor(private fb: FormBuilder, private authService: AuthService) {
    this.miFormulario = this.fb.group({
      // Los campos del formulario y sus validaciones
      password: ['', [Validators.required, Validators.minLength(6)]],
      newPassword: ['', [Validators.required, Validators.minLength(6)]],
      newPasswordConfirm: ['', Validators.required]
    }, {
    
    });
  }
  ngOnInit(): void {
  
  }

  togglePasswordVisibility() {
    this.mostrarPassword = !this.mostrarPassword;
  }

  cambiarPassword(){
    const {password, newPassword, newPasswordConfirm} = this.miFormulario.value;
 
    if(newPassword === newPasswordConfirm){
      this.authService.cambiarPassword(this.authService.usuario.rut!, password, newPassword).subscribe(ok=>{
        if(ok === true){
          Swal.fire('Ha actualizado correctamente la contraseña', '', 'success');
        } else {
          Swal.fire('Error', '', 'error');
        }
      });
    } else {
      Swal.fire('Error', 'Las contraseñas nuevas no son iguales ', 'error');
    }
  }

}
.security-form {
    max-width: 600px;
    margin: 2rem auto;
    padding: 1rem;
}

.password-card {
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.security-header {
    background: #f8f9fa;
    padding: 2rem;
    text-align: center;
    border-bottom: 3px solid #3498db;
    
    .security-icon {
        font-size: 3rem;
        width: auto;
        height: auto;
        color: #3498db;
        margin-bottom: 1rem;
    }
    
    .security-title {
        color: #2c3e50;
        font-weight: 600;
        margin: 0.5rem 0;
    }
    
    .security-subtitle {
        color: #7f8c8d;
        font-size: 0.9rem;
        margin: 0;
    }
}

.password-content {
    padding: 2rem;
    
    .password-section {
        margin-bottom: 2rem;
        
        .security-input {
            width: 100%;
            margin: 1rem 0;
            
            .toggle-icon {
                color: #7f8c8d;
                cursor: pointer;
                &:hover {
                    color: #3498db;
                }
            }
            
            .mat-form-field-outline {
                border-radius: 8px;
            }
        }
    }
}

.password-requirements {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1.5rem;
    
    .requirements-title {
        color: #2c3e50;
        font-weight: 500;
        margin: 0 0 1rem 0;
    }
    
    .requirements-list {
        list-style: none;
        padding: 0;
        margin: 0;
        color: #7f8c8d;
        
        li {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.5rem 0;
            
            mat-icon {
                color: #3498db;
                font-size: 1.2rem;
                width: auto;
                height: auto;
            }
        }
    }
}

.security-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem 2rem;
    border-top: 1px solid #eee;
    
    .security-button {
        border-radius: 25px;
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
        
        mat-icon {
            margin-right: 0.5rem;
            font-size: 1.2rem;
            position: relative;
            top: -1px;
        }
    }
}

.mat-error {
    font-size: 0.85rem;
    display: flex;
    align-items: center;
    gap: 0.3rem;
    
    mat-icon {
        font-size: 1.1rem;
        margin-right: 0.3rem;
    }
}
<form *ngIf="miFormulario != null" [formGroup]="miFormulario" (ngSubmit)="cambiarPassword()" class="security-form">
    <mat-card class="password-card">
        <div class="security-header">
            <mat-icon class="security-icon">lock_reset</mat-icon>
            <mat-card-title class="security-title">Seguridad de la Cuenta</mat-card-title>
            <p class="security-subtitle">Protege tu acceso al sistema médico</p>
        </div>

        <mat-card-content class="password-content">
            <div class="password-section">
                <mat-form-field appearance="outline" class="security-input">
                    <mat-label>Contraseña actual</mat-label>
                    <input matInput 
                           [type]="mostrarPassword ? 'text' : 'password'" 
                           formControlName="password"
                           required>
                    <mat-icon matSuffix (click)="mostrarPassword = !mostrarPassword" class="toggle-icon">
                        {{mostrarPassword ? 'visibility_off' : 'visibility'}}
                    </mat-icon>
                    <mat-error *ngIf="miFormulario.get('password')?.hasError('required')">
                        Campo obligatorio
                    </mat-error>
                </mat-form-field>

                <mat-form-field appearance="outline" class="security-input">
                    <mat-label>Nueva contraseña</mat-label>
                    <input matInput 
                           [type]="mostrarNuevaPassword ? 'text' : 'password'" 
                           formControlName="newPassword"
                           required>
                    <mat-icon matSuffix (click)="mostrarNuevaPassword = !mostrarNuevaPassword" class="toggle-icon">
                        {{mostrarNuevaPassword ? 'visibility_off' : 'visibility'}}
                    </mat-icon>
                    <mat-hint>Mínimo 6 caracteres</mat-hint>
                    <mat-error *ngIf="miFormulario.get('newPassword')?.hasError('minlength')">
                        Mínimo 6 caracteres requeridos
                    </mat-error>
                </mat-form-field>

                <mat-form-field appearance="outline" class="security-input">
                    <mat-label>Confirmar nueva contraseña</mat-label>
                    <input matInput 
                           [type]="mostrarConfirmacionPassword ? 'text' : 'password'" 
                           formControlName="newPasswordConfirm"
                           required>
                    <mat-icon matSuffix (click)="mostrarConfirmacionPassword = !mostrarConfirmacionPassword" class="toggle-icon">
                        {{mostrarConfirmacionPassword ? 'visibility_off' : 'visibility'}}
                    </mat-icon>
                    <mat-error *ngIf="miFormulario.hasError('mismatch')">
                        Las contraseñas no coinciden
                    </mat-error>
                </mat-form-field>
            </div>

            <div class="password-requirements">
                <p class="requirements-title">Requisitos de seguridad:</p>
                <ul class="requirements-list">
                    <li><mat-icon>check_circle</mat-icon> Mínimo 6 caracteres</li>
                    <li><mat-icon>check_circle</mat-icon> Sin espacios en blanco</li>
                </ul>
            </div>
        </mat-card-content>

        <mat-card-actions class="security-actions">
            <button mat-raised-button 
                    color="primary" 
                    type="submit"
                    class="security-button"
                    [disabled]="miFormulario.invalid">
                <mat-icon>lock_reset</mat-icon>
                Actualizar Contraseña
            </button>
            
            <button mat-stroked-button 
                    color="warn" 
                    routerLink="/dashboard"
                    class="security-button">
                <mat-icon>cancel</mat-icon>
                Cancelar
            </button>
        </mat-card-actions>
    </mat-card>
</form>.security-form {
    max-width: 600px;
    margin: 2rem auto;
    padding: 1rem;
}

.password-card {
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.security-header {
    background: #f8f9fa;
    padding: 2rem;
    text-align: center;
    border-bottom: 3px solid #3498db;
    
    .security-icon {
        font-size: 3rem;
        width: auto;
        height: auto;
        color: #3498db;
        margin-bottom: 1rem;
    }
    
    .security-title {
        color: #2c3e50;
        font-weight: 600;
        margin: 0.5rem 0;
    }
    
    .security-subtitle {
        color: #7f8c8d;
        font-size: 0.9rem;
        margin: 0;
    }
}

.password-content {
    padding: 2rem;
    
    .password-section {
        margin-bottom: 2rem;
        
        .security-input {
            width: 100%;
            margin: 1rem 0;
            
            .toggle-icon {
                color: #7f8c8d;
                cursor: pointer;
                &:hover {
                    color: #3498db;
                }
            }
            
            .mat-form-field-outline {
                border-radius: 8px;
            }
        }
    }
}

.password-requirements {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1.5rem;
    
    .requirements-title {
        color: #2c3e50;
        font-weight: 500;
        margin: 0 0 1rem 0;
    }
    
    .requirements-list {
        list-style: none;
        padding: 0;
        margin: 0;
        color: #7f8c8d;
        
        li {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0.5rem 0;
            
            mat-icon {
                color: #3498db;
                font-size: 1.2rem;
                width: auto;
                height: auto;
            }
        }
    }
}

.security-actions {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem 2rem;
    border-top: 1px solid #eee;
    
    .security-button {
        border-radius: 25px;
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
        
        mat-icon {
            margin-right: 0.5rem;
            font-size: 1.2rem;
            position: relative;
            top: -1px;
        }
    }
}

.mat-error {
    font-size: 0.85rem;
    display: flex;
    align-items: center;
    gap: 0.3rem;
    
    mat-icon {
        font-size: 1.1rem;
        margin-right: 0.3rem;
    }
}
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../../../auth/services/auth.service';
import Swal from 'sweetalert2';
import { Usuario } from 'src/app/models/usuario';
@Component({
  selector: 'app-cambiar-password',
  templateUrl: './cambiar-password.component.html',
  styleUrls: ['./cambiar-password.component.scss']
})
export class CambiarPasswordComponent implements OnInit {
  public mostrarPassword: boolean = false;
  public mostrarNuevaPassword: boolean = false;
  public mostrarConfirmacionPassword: boolean = false;
  miFormulario: FormGroup;
  
  constructor(private fb: FormBuilder, private authService: AuthService) {
    this.miFormulario = this.fb.group({
      // Los campos del formulario y sus validaciones
      password: ['', [Validators.required, Validators.minLength(6)]],
      newPassword: ['', [Validators.required, Validators.minLength(6)]],
      newPasswordConfirm: ['', Validators.required]
    }, {
    
    });
  }
  ngOnInit(): void {
  
  }

  togglePasswordVisibility() {
    this.mostrarPassword = !this.mostrarPassword;
  }

  cambiarPassword(){
    const {password, newPassword, newPasswordConfirm} = this.miFormulario.value;
 
    if(newPassword === newPasswordConfirm){
      this.authService.cambiarPassword(this.authService.usuario.rut!, password, newPassword).subscribe(ok=>{
        if(ok === true){
          Swal.fire('Ha actualizado correctamente la contraseña', '', 'success');
        } else {
          Swal.fire('Error', '', 'error');
        }
      });
    } else {
      Swal.fire('Error', 'Las contraseñas nuevas no son iguales ', 'error');
    }
  }

}
<div class="container mt-4">
  <button class="btn btn-outline-primary mb-4" (click)="volverAtras()">
    <i class="bi bi-arrow-left me-2"></i>Volver
  </button>

  <div class="card shadow border-0">
    <div class="card-body p-4">
      <h2 class="text-center mb-4 text-primary">Programar cita médica</h2>
      
      <!-- Formulario -->
      <form [formGroup]="form" (ngSubmit)="enviarFormulario()">
        <div class="row g-3 align-items-end">
          <div class="col-md-6">
            <label for="especialidad" class="form-label fw-bold">Especialidad médica</label>
            <select class="form-select" formControlName="especialidad" id="especialidad">
              <option value="" disabled selected>Seleccione una especialidad...</option>
              <option *ngFor="let tipo of tiposCitas" [value]="tipo.especialidad_medica">
                {{ tipo.especialidad_medica }}
              </option>
            </select>
          </div>

          <div class="col-md-4">
            <label for="fecha" class="form-label fw-bold">Fecha deseada</label>
            <input type="date" class="form-control" id="fecha" formControlName="fecha"
                   >
          </div>

          <div class="col-md-2">
            <button type="submit" class="btn btn-primary w-100" [disabled]="!form.valid">
              <i class="bi bi-search me-2"></i>Buscar
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <!-- Info Box -->
  <div class="alert alert-info mt-4 shadow-sm">
    <i class="bi bi-info-circle me-2"></i>
    Consulta las especialidades disponibles por día y selecciona una fecha en el calendario 
    donde la especialidad que necesitas esté disponible.
  </div>

  <!-- Días y especialidades -->
  <div class="row g-4 mt-2">
    <div class="col-12">
      <h4 class="mb-3 text-secondary">Disponibilidad por día</h4>
      <div class="row g-3">
        <div class="col-md-3 col-sm-6" *ngFor="let dia of ordenDias">
          <div class="card h-100 border-start-4 border-primary shadow-sm hover-shadow">
            <div class="card-body">
              <h5 class="card-title text-primary">
                <i class="bi bi-calendar-event me-2"></i>{{ dia | titlecase }}
              </h5>
              <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex align-items-center" 
                    *ngFor="let especialidad of horariosEspecialidades[dia]">
                  <i class="bi bi-check2-circle text-success me-2"></i>
                  {{ especialidad }}
                </li>
                <li class="list-group-item text-muted small" 
                    *ngIf="!horariosEspecialidades[dia]?.length">
                  No hay especialidades este día
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>import { Component } from '@angular/core';
import { TipoCitaService } from 'src/app/admin/pages/services/tipo-cita.service';
import { Tipo_cita, tipoCitaResponse } from 'src/app/admin/pages/interface/tipoCita';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { BusquedaMedicoService } from '../../services/busqueda-medico.service';
import { BusquedaMedicoComponent } from '../busqueda-medico/busqueda-medico.component';
import { Bloque, BloquesResponse } from '../interfaces/busqueda-medicos';
import { BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router';
import { HorarioClinicaService } from '../../services/horario-clinica.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-formulario-cita',
  templateUrl: './formulario-cita.component.html',
  styleUrls: ['./formulario-cita.component.scss']
})
export class FormularioCitaComponent {

  tiposCitas: any[] = [];
  ordenDias: string[] = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo'];
  form: FormGroup;
  private _bloques: Bloque[] = [];
  horariosEspecialidades: {[key: string]: string[]} = {};
  private bloquesSubject = new BehaviorSubject<Bloque[]>([]);
  bloques$ = this.bloquesSubject.asObservable();

  constructor(private fb: FormBuilder, private TipoCitaService: TipoCitaService, private BusquedaMedicoService: BusquedaMedicoService, private router: Router, private HorarioClinicaService: HorarioClinicaService ) {
    this.form = this.fb.group({
      especialidad: [null, Validators.required],
      fecha: [null, Validators.required]
    });
  }

  get bloques(): Bloque[] { // Getter para acceder a los bloques
    return this._bloques;
  }


  ngOnInit(): void {
    this.TipoCitaService.cargaEspecialidades().subscribe(
      response => {
        console.log('aqui estan las especialidades',response);
        this.tiposCitas = response.especialidades;
        console.log('aqui esta el arreglo de especialidades',this.tiposCitas);
      },
      error => {
        console.error('Error cargando tipos de cita:', error);
      }
    );
  
    this.HorarioClinicaService.obtenerHorarioEspecialidades().subscribe(
      (horarios: any) => {
        console.log('aqui estan los horarios especialidades',horarios);
        this.horariosEspecialidades = horarios;
      },
      error => {
        console.error('Error al obtener horarios de especialidades:', error);
      }
    );
    
  }
  

  enviarFormulario() {
    const formData = this.form.value;
  
    // Crear un objeto de fecha para la fecha actual
    const fechaActual = new Date();
    fechaActual.setHours(0, 0, 0, 0); // Ajustar la fecha actual a la medianoche
  
    // Crear un objeto de fecha para la fecha seleccionada en la zona horaria local
    const partesFecha = formData.fecha.split('-');
    const fechaSeleccionada = new Date(partesFecha[0], partesFecha[1] - 1, partesFecha[2]);
    fechaSeleccionada.setHours(0, 0, 0, 0); // Ajustar la fecha seleccionada a la medianoche
  
    // Verificar si la fecha seleccionada es anterior a la fecha actual
    if (fechaSeleccionada < fechaActual) {
      Swal.fire({
        title: 'Fecha no válida',
        text: 'No puedes seleccionar una fecha anterior a la actual.',
        icon: 'error',
        confirmButtonText: 'Ok'
      });
      return; // Detener la ejecución del método aquí
    }
  
    // Continuar con el procesamiento si la fecha es válida
    this.BusquedaMedicoService.buscarHorarioDisponible(formData)
      .subscribe((resp: BloquesResponse) => {
        this.BusquedaMedicoService.actualizarBloques(resp.bloques);

        this.router.navigate(['/busqueda-medico']);
      });
  }
  
  
  
  

volverAtras(): void {
  this.router.navigate(['/Agendar-cita']);
}
  

}
.form-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 10vh; /* Esto asegura que el formulario esté centrado verticalmente en la vista */
  }
  
  form {
    width: 100%;
    max-width: 500px; /* Ajusta este valor según la anchura que prefieras para tu formulario */
  }

  .btn-primary {
    transition: transform 0.3s ease;
  
    &:hover {
      transform: scale(1.05);
    }
  }

  .btn btn-secondary  {
    transition: transform 0.3s ease;
  
    &:hover {
      transform: scale(1.05);
    }
  }

  .btn-margen-izquierdo {
    margin-left: 180px; /* Ajusta este valor según necesites */
  }
  
  .dia-container {
    /* Asegura que todos los contenedores tengan la misma altura */
    display: flex;
    flex-direction: column;
  
    /* Alinea el contenido al inicio del contenedor */
    align-items: start;
  }

  .info-especialidades {
    background-color: #f8f9fa;  /* Un fondo suave para que destaque */
    border-left: 4px solid #007bff; /* Una línea a la izquierda para llamar la atención */
    padding: 10px 15px; /* Añade algo de espacio alrededor del texto */
    margin-top: 20px; /* Margen superior para separarlo de otros elementos */
    border-radius: 5px; /* Esquinas redondeadas para un look moderno */
    color: #333; /* Color del texto */
    font-weight: bold; /* Hacer el texto más visible */
    box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Sombra sutil para dar profundidad */
  }
  
  <div class="container mt-4">
  <button class="btn btn-outline-primary mb-4" (click)="volverAtras()">
    <i class="bi bi-arrow-left me-2"></i>Volver
  </button>

  <div class="card shadow border-0">
    <div class="card-body p-4">
      <h2 class="text-center mb-4 text-primary">Programar cita médica</h2>
      
      <!-- Formulario -->
      <form [formGroup]="form" (ngSubmit)="enviarFormulario()">
        <div class="row g-3 align-items-end">
          <div class="col-md-6">
            <label for="especialidad" class="form-label fw-bold">Especialidad médica</label>
            <select class="form-select" formControlName="especialidad" id="especialidad">
              <option value="" disabled selected>Seleccione una especialidad...</option>
              <option *ngFor="let tipo of tiposCitas" [value]="tipo.especialidad_medica">
                {{ tipo.especialidad_medica }}
              </option>
            </select>
          </div>

          <div class="col-md-4">
            <label for="fecha" class="form-label fw-bold">Fecha deseada</label>
            <input type="date" class="form-control" id="fecha" formControlName="fecha"
                   >
          </div>

          <div class="col-md-2">
            <button type="submit" class="btn btn-primary w-100" [disabled]="!form.valid">
              <i class="bi bi-search me-2"></i>Buscar
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <!-- Info Box -->
  <div class="alert alert-info mt-4 shadow-sm">
    <i class="bi bi-info-circle me-2"></i>
    Consulta las especialidades disponibles por día y selecciona una fecha en el calendario 
    donde la especialidad que necesitas esté disponible.
  </div>

  <!-- Días y especialidades -->
  <div class="row g-4 mt-2">
    <div class="col-12">
      <h4 class="mb-3 text-secondary">Disponibilidad por día</h4>
      <div class="row g-3">
        <div class="col-md-3 col-sm-6" *ngFor="let dia of ordenDias">
          <div class="card h-100 border-start-4 border-primary shadow-sm hover-shadow">
            <div class="card-body">
              <h5 class="card-title text-primary">
                <i class="bi bi-calendar-event me-2"></i>{{ dia | titlecase }}
              </h5>
              <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex align-items-center" 
                    *ngFor="let especialidad of horariosEspecialidades[dia]">
                  <i class="bi bi-check2-circle text-success me-2"></i>
                  {{ especialidad }}
                </li>
                <li class="list-group-item text-muted small" 
                    *ngIf="!horariosEspecialidades[dia]?.length">
                  No hay especialidades este día
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>.form-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 10vh; /* Esto asegura que el formulario esté centrado verticalmente en la vista */
  }
  
  form {
    width: 100%;
    max-width: 500px; /* Ajusta este valor según la anchura que prefieras para tu formulario */
  }

  .btn-primary {
    transition: transform 0.3s ease;
  
    &:hover {
      transform: scale(1.05);
    }
  }

  .btn btn-secondary  {
    transition: transform 0.3s ease;
  
    &:hover {
      transform: scale(1.05);
    }
  }

  .btn-margen-izquierdo {
    margin-left: 180px; /* Ajusta este valor según necesites */
  }
  
  .dia-container {
    /* Asegura que todos los contenedores tengan la misma altura */
    display: flex;
    flex-direction: column;
  
    /* Alinea el contenido al inicio del contenedor */
    align-items: start;
  }

  .info-especialidades {
    background-color: #f8f9fa;  /* Un fondo suave para que destaque */
    border-left: 4px solid #007bff; /* Una línea a la izquierda para llamar la atención */
    padding: 10px 15px; /* Añade algo de espacio alrededor del texto */
    margin-top: 20px; /* Margen superior para separarlo de otros elementos */
    border-radius: 5px; /* Esquinas redondeadas para un look moderno */
    color: #333; /* Color del texto */
    font-weight: bold; /* Hacer el texto más visible */
    box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Sombra sutil para dar profundidad */
  }
  
  import { Component } from '@angular/core';
import { TipoCitaService } from 'src/app/admin/pages/services/tipo-cita.service';
import { Tipo_cita, tipoCitaResponse } from 'src/app/admin/pages/interface/tipoCita';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { BusquedaMedicoService } from '../../services/busqueda-medico.service';
import { BusquedaMedicoComponent } from '../busqueda-medico/busqueda-medico.component';
import { Bloque, BloquesResponse } from '../interfaces/busqueda-medicos';
import { BehaviorSubject } from 'rxjs';
import { Router } from '@angular/router';
import { HorarioClinicaService } from '../../services/horario-clinica.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-formulario-cita',
  templateUrl: './formulario-cita.component.html',
  styleUrls: ['./formulario-cita.component.scss']
})
export class FormularioCitaComponent {

  tiposCitas: any[] = [];
  ordenDias: string[] = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo'];
  form: FormGroup;
  private _bloques: Bloque[] = [];
  horariosEspecialidades: {[key: string]: string[]} = {};
  private bloquesSubject = new BehaviorSubject<Bloque[]>([]);
  bloques$ = this.bloquesSubject.asObservable();

  constructor(private fb: FormBuilder, private TipoCitaService: TipoCitaService, private BusquedaMedicoService: BusquedaMedicoService, private router: Router, private HorarioClinicaService: HorarioClinicaService ) {
    this.form = this.fb.group({
      especialidad: [null, Validators.required],
      fecha: [null, Validators.required]
    });
  }

  get bloques(): Bloque[] { // Getter para acceder a los bloques
    return this._bloques;
  }


  ngOnInit(): void {
    this.TipoCitaService.cargaEspecialidades().subscribe(
      response => {
        console.log('aqui estan las especialidades',response);
        this.tiposCitas = response.especialidades;
        console.log('aqui esta el arreglo de especialidades',this.tiposCitas);
      },
      error => {
        console.error('Error cargando tipos de cita:', error);
      }
    );
  
    this.HorarioClinicaService.obtenerHorarioEspecialidades().subscribe(
      (horarios: any) => {
        console.log('aqui estan los horarios especialidades',horarios);
        this.horariosEspecialidades = horarios;
      },
      error => {
        console.error('Error al obtener horarios de especialidades:', error);
      }
    );
    
  }
  

  enviarFormulario() {
    const formData = this.form.value;
  
    // Crear un objeto de fecha para la fecha actual
    const fechaActual = new Date();
    fechaActual.setHours(0, 0, 0, 0); // Ajustar la fecha actual a la medianoche
  
    // Crear un objeto de fecha para la fecha seleccionada en la zona horaria local
    const partesFecha = formData.fecha.split('-');
    const fechaSeleccionada = new Date(partesFecha[0], partesFecha[1] - 1, partesFecha[2]);
    fechaSeleccionada.setHours(0, 0, 0, 0); // Ajustar la fecha seleccionada a la medianoche
  
    // Verificar si la fecha seleccionada es anterior a la fecha actual
    if (fechaSeleccionada < fechaActual) {
      Swal.fire({
        title: 'Fecha no válida',
        text: 'No puedes seleccionar una fecha anterior a la actual.',
        icon: 'error',
        confirmButtonText: 'Ok'
      });
      return; // Detener la ejecución del método aquí
    }
  
    // Continuar con el procesamiento si la fecha es válida
    this.BusquedaMedicoService.buscarHorarioDisponible(formData)
      .subscribe((resp: BloquesResponse) => {
        this.BusquedaMedicoService.actualizarBloques(resp.bloques);

        this.router.navigate(['/busqueda-medico']);
      });
  }
  
  
  
  

volverAtras(): void {
  this.router.navigate(['/Agendar-cita']);
}
  

}
<div class="row animated fadeIn fast">
  <div class="col-12">
      <div class="card shadow-sm border-0" style="border-radius: 15px;">
          <div class="card-header bg-primary text-white rounded-top">
              <div class="d-flex justify-content-between align-items-center">
                  <div>
                      <h4 class="card-title mb-0"><i class="fas fa-file-medical me-2"></i>Registro Clínico Digital</h4>
                      <small class="card-subtitle">Sistema de Archivos Médicos Electrónicos (EMR v2.4)</small>
                  </div>
                  <div class="badge bg-light text-primary fs-6">
                      <i class="fas fa-dna me-2"></i>Casos Registrados: {{totalHistoriales}}
                  </div>
              </div>
          </div>
          
          <div class="card-body medical-table-container">
              <div class="table-responsive">
                  <table class="table table-hover table-medical">
                      <thead class="medical-head">
                          <tr>
                              <th><i class="fas fa-id-badge medical-icon"></i> ID Caso</th>
                              <th><i class="fas fa-diagnoses medical-icon"></i> Diagnóstico</th>
                              <th><i class="fas fa-prescription-bottle medical-icon"></i> Terapia</th>
                              <th><i class="fas fa-notes-medical medical-icon"></i> Observaciones</th>
                              <th><i class="fas fa-user-md medical-icon"></i> Especialista</th>
                              <th><i class="fas fa-calendar-check medical-icon"></i> Fecha Consulta</th>
                              <th><i class="fas fa-microscope medical-icon"></i> Análisis</th>
                          </tr>
                      </thead>
                      <tbody>
                          <tr *ngFor="let historial of historialMedico" class="medical-row">
                              <td class="fw-bold text-primary">CASO-{{historial.id_historial}}</td>
                              <td>
                                  <div class="diagnosis-tag">
                                      {{historial.diagnostico}}
                                  </div>
                              </td>
                              <td>
                                  <span class="medication-badge">
                                      <i class="fas fa-capsules me-2"></i>
                                      {{historial.medicamento}}
                                  </span>
                              </td>
                              <td class="notes-cell">
                                  <div class="notes-content">
                                      {{historial.notas}}
                                  </div>
                              </td>
                              <td>
                                  <div class="doctor-info">
                                      <div class="doctor-name">{{historial.medico.nombre}} {{historial.medico.apellidos}}</div>
                               
                                  </div>
                              </td>
                              <td>
                                  <div class="date-box">
                                      <div class="date-day">{{ historial.fecha_consulta | date: 'd' }}</div>
                                      <div class="date-month">{{ historial.fecha_consulta | date: 'MMM' }}</div>
                                      <div class="date-year">{{ historial.fecha_consulta | date: 'y' }}</div>
                                  </div>
                              </td>
                              <td>
                                  <div class="icon-container d-flex">
                                      <a class="medical-action" 
                                         data-toggle="tooltip"
                                         data-original-title="Examinar Detalles"
                                         [routerLink]="['/ver-historial-paciente', historial.id_historial]">
                                          <i class="fas fa-clipboard-list medical-icon-detail"></i>
                                      </a>
                                  </div>
                              </td>
                          </tr>
                      </tbody>
                  </table>
              </div>

              <app-paginator 
                  [totalItems]="totalHistoriales" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
              </app-paginator>
          </div>
      </div>
  </div>
</div>



import { Component, OnDestroy, OnInit } from '@angular/core';
import { HistorialService } from 'src/app/medicos/services/historial.service';
import { AuthService } from 'src/app/auth/services/auth.service';
import { Historial, HistorialResponse } from 'src/app/medicos/historial';
import { Usuario } from 'src/app/models/usuario';
import { BusquedaMedicoService } from '../../../services/busqueda-medico.service';
import { BusquedasService } from '../../../../admin/pages/services/busquedas.service';
@Component({
  selector: 'app-historial-paciente',
  templateUrl: './historial-paciente.component.html',
  styleUrls: ['./historial-paciente.component.scss']
})
export class HistorialPacienteComponent implements OnInit {

  historialMedico: Historial[] = []; 
  public desde: number = 0;
  public totalHistoriales: number = 0;

  constructor(private historialService: HistorialService, private authservice: AuthService, private BusquedasService: BusquedasService){}

  ngOnInit() {
    if (this.authservice.usuario && this.authservice.usuario.rut) { 
        const rutUsuario = this.authservice.usuario.rut;
        this.cargarHistorialMedico(rutUsuario);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }
}




  cambiarPagina(valor: number) {
    this.desde += valor;

    if (this.desde < 0) {
        this.desde = 0;
    } else if (this.desde >= this.totalHistoriales) {
        this.desde -= valor;
    }

    const rutUsuario = this.authservice.usuario?.rut;
    if (rutUsuario) {
        this.cargarHistorialMedico(rutUsuario);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }
}


  cargarHistorialMedico(rut: string) {
    this.historialService.obtenerHistorialPorId(rut, this.desde)
    .subscribe((historial: HistorialResponse) => {
     
      
      this.historialMedico = historial.historiales;
      console.log('AQUI ESTA EL ARREGLO DE HISTORIALES',this.historialMedico );
      this.totalHistoriales = historial.total; 
    }, error => {
      console.error("Error al obtener el historial médico:", error);
    });
}


}
.medical-table-container {
    background: #f8f9fa;
    border-radius: 0 0 15px 15px;
  }
  
  .table-medical {
    border-collapse: separate;
    border-spacing: 0 8px;
  }
  
  .medical-head th {
    background: #e9f7fe;
    color: #1a237e;
    font-weight: 600;
    border-bottom: 2px solid #90caf9;
  }
  
  .medical-icon {
    color: #1976d2;
    margin-right: 8px;
  }
  
  .medical-row {
    background: white;
    transition: all 0.3s ease;
    border-left: 4px solid transparent;
  }
  
  .medical-row:hover {
    transform: translateX(4px);
    box-shadow: 0 2px 8px rgba(25, 118, 210, 0.1);
    border-left-color: #1976d2;
  }
  
  .diagnosis-tag {
    background: #e3f2fd;
    padding: 4px 10px;
    border-radius: 15px;
    font-weight: 500;
    color: #0d47a1;
  }
  
  .medication-badge {
    background: #f3e5f5;
    padding: 4px 10px;
    border-radius: 15px;
    color: #6a1b9a;
  }
  
  .notes-content {
    max-width: 250px;
    white-space: pre-wrap;
    font-size: 0.9em;
    color: #455a64;
  }
  
  .date-box {
    background: #f5f5f5;
    padding: 8px;
    border-radius: 8px;
    text-align: center;
    line-height: 1.2;
  }
  
  .date-day {
    font-size: 1.4em;
    font-weight: bold;
    color: #1976d2;
  }
  
  .date-month {
    font-size: 0.8em;
    text-transform: uppercase;
  }
  
  .date-year {
    font-size: 0.8em;
    color: #666;
  }
  
  .medical-icon-detail {
    color: #1976d2;
    font-size: 1.2em;
    transition: all 0.3s ease;
  }
  
  .medical-action:hover .medical-icon-detail {
    transform: scale(1.2);
    color: #0d47a1;
  }
  
  .doctor-info {
    line-height: 1.3;
  }
  
  .doctor-name {
    font-weight: 500;
    color: #2c3e50;
  }<div class="row animated fadeIn fast">
  <div class="col-12">
      <div class="card shadow-sm border-0" style="border-radius: 15px;">
          <div class="card-header bg-primary text-white rounded-top">
              <div class="d-flex justify-content-between align-items-center">
                  <div>
                      <h4 class="card-title mb-0"><i class="fas fa-file-medical me-2"></i>Registro Clínico Digital</h4>
                      <small class="card-subtitle">Sistema de Archivos Médicos Electrónicos (EMR v2.4)</small>
                  </div>
                  <div class="badge bg-light text-primary fs-6">
                      <i class="fas fa-dna me-2"></i>Casos Registrados: {{totalHistoriales}}
                  </div>
              </div>
          </div>
          
          <div class="card-body medical-table-container">
              <div class="table-responsive">
                  <table class="table table-hover table-medical">
                      <thead class="medical-head">
                          <tr>
                              <th><i class="fas fa-id-badge medical-icon"></i> ID Caso</th>
                              <th><i class="fas fa-diagnoses medical-icon"></i> Diagnóstico</th>
                              <th><i class="fas fa-prescription-bottle medical-icon"></i> Terapia</th>
                              <th><i class="fas fa-notes-medical medical-icon"></i> Observaciones</th>
                              <th><i class="fas fa-user-md medical-icon"></i> Especialista</th>
                              <th><i class="fas fa-calendar-check medical-icon"></i> Fecha Consulta</th>
                              <th><i class="fas fa-microscope medical-icon"></i> Análisis</th>
                          </tr>
                      </thead>
                      <tbody>
                          <tr *ngFor="let historial of historialMedico" class="medical-row">
                              <td class="fw-bold text-primary">CASO-{{historial.id_historial}}</td>
                              <td>
                                  <div class="diagnosis-tag">
                                      {{historial.diagnostico}}
                                  </div>
                              </td>
                              <td>
                                  <span class="medication-badge">
                                      <i class="fas fa-capsules me-2"></i>
                                      {{historial.medicamento}}
                                  </span>
                              </td>
                              <td class="notes-cell">
                                  <div class="notes-content">
                                      {{historial.notas}}
                                  </div>
                              </td>
                              <td>
                                  <div class="doctor-info">
                                      <div class="doctor-name">{{historial.medico.nombre}} {{historial.medico.apellidos}}</div>
                               
                                  </div>
                              </td>
                              <td>
                                  <div class="date-box">
                                      <div class="date-day">{{ historial.fecha_consulta | date: 'd' }}</div>
                                      <div class="date-month">{{ historial.fecha_consulta | date: 'MMM' }}</div>
                                      <div class="date-year">{{ historial.fecha_consulta | date: 'y' }}</div>
                                  </div>
                              </td>
                              <td>
                                  <div class="icon-container d-flex">
                                      <a class="medical-action" 
                                         data-toggle="tooltip"
                                         data-original-title="Examinar Detalles"
                                         [routerLink]="['/ver-historial-paciente', historial.id_historial]">
                                          <i class="fas fa-clipboard-list medical-icon-detail"></i>
                                      </a>
                                  </div>
                              </td>
                          </tr>
                      </tbody>
                  </table>
              </div>

              <app-paginator 
                  [totalItems]="totalHistoriales" 
                  [(offset)]="desde" 
                  [pageSize]="5"
                  (offsetChange)="cambiarPagina($event)">
              </app-paginator>
          </div>
      </div>
  </div>
</div>



.medical-table-container {
    background: #f8f9fa;
    border-radius: 0 0 15px 15px;
  }
  
  .table-medical {
    border-collapse: separate;
    border-spacing: 0 8px;
  }
  
  .medical-head th {
    background: #e9f7fe;
    color: #1a237e;
    font-weight: 600;
    border-bottom: 2px solid #90caf9;
  }
  
  .medical-icon {
    color: #1976d2;
    margin-right: 8px;
  }
  
  .medical-row {
    background: white;
    transition: all 0.3s ease;
    border-left: 4px solid transparent;
  }
  
  .medical-row:hover {
    transform: translateX(4px);
    box-shadow: 0 2px 8px rgba(25, 118, 210, 0.1);
    border-left-color: #1976d2;
  }
  
  .diagnosis-tag {
    background: #e3f2fd;
    padding: 4px 10px;
    border-radius: 15px;
    font-weight: 500;
    color: #0d47a1;
  }
  
  .medication-badge {
    background: #f3e5f5;
    padding: 4px 10px;
    border-radius: 15px;
    color: #6a1b9a;
  }
  
  .notes-content {
    max-width: 250px;
    white-space: pre-wrap;
    font-size: 0.9em;
    color: #455a64;
  }
  
  .date-box {
    background: #f5f5f5;
    padding: 8px;
    border-radius: 8px;
    text-align: center;
    line-height: 1.2;
  }
  
  .date-day {
    font-size: 1.4em;
    font-weight: bold;
    color: #1976d2;
  }
  
  .date-month {
    font-size: 0.8em;
    text-transform: uppercase;
  }
  
  .date-year {
    font-size: 0.8em;
    color: #666;
  }
  
  .medical-icon-detail {
    color: #1976d2;
    font-size: 1.2em;
    transition: all 0.3s ease;
  }
  
  .medical-action:hover .medical-icon-detail {
    transform: scale(1.2);
    color: #0d47a1;
  }
  
  .doctor-info {
    line-height: 1.3;
  }
  
  .doctor-name {
    font-weight: 500;
    color: #2c3e50;
  }import { Component, OnDestroy, OnInit } from '@angular/core';
import { HistorialService } from 'src/app/medicos/services/historial.service';
import { AuthService } from 'src/app/auth/services/auth.service';
import { Historial, HistorialResponse } from 'src/app/medicos/historial';
import { Usuario } from 'src/app/models/usuario';
import { BusquedaMedicoService } from '../../../services/busqueda-medico.service';
import { BusquedasService } from '../../../../admin/pages/services/busquedas.service';
@Component({
  selector: 'app-historial-paciente',
  templateUrl: './historial-paciente.component.html',
  styleUrls: ['./historial-paciente.component.scss']
})
export class HistorialPacienteComponent implements OnInit {

  historialMedico: Historial[] = []; 
  public desde: number = 0;
  public totalHistoriales: number = 0;

  constructor(private historialService: HistorialService, private authservice: AuthService, private BusquedasService: BusquedasService){}

  ngOnInit() {
    if (this.authservice.usuario && this.authservice.usuario.rut) { 
        const rutUsuario = this.authservice.usuario.rut;
        this.cargarHistorialMedico(rutUsuario);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }
}




  cambiarPagina(valor: number) {
    this.desde += valor;

    if (this.desde < 0) {
        this.desde = 0;
    } else if (this.desde >= this.totalHistoriales) {
        this.desde -= valor;
    }

    const rutUsuario = this.authservice.usuario?.rut;
    if (rutUsuario) {
        this.cargarHistorialMedico(rutUsuario);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }
}


  cargarHistorialMedico(rut: string) {
    this.historialService.obtenerHistorialPorId(rut, this.desde)
    .subscribe((historial: HistorialResponse) => {
     
      
      this.historialMedico = historial.historiales;
      console.log('AQUI ESTA EL ARREGLO DE HISTORIALES',this.historialMedico );
      this.totalHistoriales = historial.total; 
    }, error => {
      console.error("Error al obtener el historial médico:", error);
    });
}


}
<div class="historial-container">
    <div class="header-medico">
        <h2 class="titulo-seccion">HISTORIAL CLÍNICO</h2>
        <div class="sello"></div>
    </div>
    
    <div *ngIf="historial" class="documento-medico">
        <div class="encabezado">
            <div class="id-historial">
                <span class="badge-id">ID# {{historial.id_historial}}</span>
                <span class="fecha-consulta">{{historial.fecha_consulta | date: 'dd/MM/yyyy'}}</span>
            </div>
            <div class="linea-divisoria"></div>
        </div>

        <div class="seccion-datos">
            <div class="columna-datos">
                <div class="campo">
                    <label>Paciente:</label>
                    <p class="valor">{{historial.rut_paciente}}</p>
                </div>
                <div class="campo">
                    <label>Médico tratante:</label>
                    <p class="valor">{{historial.rut_medico}}</p>
                </div>
            </div>
            
            <div class="columna-datos">
                <div class="campo">
                    <label>Fecha creación:</label>
                    <p class="valor-fecha">{{historial.createdAt | date: 'dd/MM/yyyy HH:mm'}}</p>
                </div>
            </div>
        </div>

        <div class="seccion-clinica">
            <h3 class="subtitulo">INFORMACIÓN CLÍNICA</h3>
            <div class="campo-vertical">
                <label>Diagnóstico principal:</label>
                <div class="cuadro-texto">{{historial.diagnostico}}</div>
            </div>
            
            <div class="campo-vertical">
                <label>Medicación recetada:</label>
                <div class="cuadro-texto">{{historial.medicamento}}</div>
            </div>
            
            <div class="campo-vertical">
                <label>Observaciones:</label>
                <div class="cuadro-texto notas">{{historial.notas}}</div>
            </div>
        </div>
    </div>

    <div *ngIf="!historial" class="error-carga">
        <div class="icono-error">!</div>
        <p>No se ha encontrado el historial médico solicitado</p>
    </div>
</div>import { ComponentFixture, TestBed } from '@angular/core/testing';

import { VerHistorialMedicoPacienteComponent } from './ver-historial-medico-paciente.component';

describe('VerHistorialMedicoPacienteComponent', () => {
  let component: VerHistorialMedicoPacienteComponent;
  let fixture: ComponentFixture<VerHistorialMedicoPacienteComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [VerHistorialMedicoPacienteComponent]
    });
    fixture = TestBed.createComponent(VerHistorialMedicoPacienteComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HistorialService } from '../../../../medicos/services/historial.service';

@Component({
  selector: 'app-ver-historial-medico-paciente',
  templateUrl: './ver-historial-medico-paciente.component.html',
  styleUrls: ['./ver-historial-medico-paciente.component.scss']
})
export class VerHistorialMedicoPacienteComponent implements OnInit {

  historial: any = {};

  constructor(
    
    private route: ActivatedRoute, private HistorialService: HistorialService
) { }

  ngOnInit(): void {
    const idHistorial = this.route.snapshot.paramMap.get('id');
    console.log('aqui esta el id del historial',idHistorial)
    if (idHistorial) {
      this.cargarHistorial(idHistorial);
  } else {
      console.error('No se proporcionó un ID de factura válido.');
      
  }
}

cargarHistorial(id: string) {
  const idHistorial = +id;
  this.HistorialService.getHistorialPorId(idHistorial)
  .subscribe((response:any) => {
        console.log('aqui esta la respuesta',response);
        console.log('aqui esta la respuesta completa',response)
          this.historial = response;
          console.log('historial cargada:', this.historial);
    
  }, error => {
      console.error('Error al cargar la factura:', error);
  });
}

}
.historial-container {
    font-family: 'Segoe UI', Arial, sans-serif;
    max-width: 800px;
    margin: 2rem auto;
    background: #f8f9fa;
    padding: 2rem;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.header-medico {
    position: relative;
    margin-bottom: 2rem;
    text-align: center;
    
    .titulo-seccion {
        color: #2c3e50;
        text-transform: uppercase;
        letter-spacing: 2px;
        border-bottom: 3px solid #3498db;
        padding-bottom: 1rem;
        margin: 0 0 2rem 0;
    }
    
    .sello {
        position: absolute;
        top: -10px;
        right: 20px;
        width: 80px;
        height: 80px;
        border: 3px dashed #e74c3c;
        border-radius: 50%;
        opacity: 0.3;
    }
}

.documento-medico {
    background: white;
    padding: 2rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    position: relative;
    
    .encabezado {
        margin-bottom: 1.5rem;
        
        .id-historial {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            
            .badge-id {
                background: #3498db;
                color: white;
                padding: 0.3rem 0.8rem;
                border-radius: 15px;
                font-size: 0.9rem;
            }
            
            .fecha-consulta {
                color: #7f8c8d;
                font-weight: 500;
            }
        }
        
        .linea-divisoria {
            border-bottom: 2px solid #ecf0f1;
            margin-bottom: 1.5rem;
        }
    }
}

.seccion-datos {
    display: flex;
    gap: 2rem;
    margin-bottom: 2rem;
    
    .columna-datos {
        flex: 1;
        
        .campo {
            margin-bottom: 1rem;
            
            label {
                display: block;
                color: #95a5a6;
                font-size: 0.9rem;
                margin-bottom: 0.3rem;
            }
            
            .valor {
                margin: 0;
                font-weight: 500;
                color: #2c3e50;
            }
            
            .valor-fecha {
                color: #3498db;
                font-weight: 600;
            }
        }
    }
}

.seccion-clinica {
    .subtitulo {
        color: #3498db;
        text-transform: uppercase;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
    }
    
    .campo-vertical {
        margin-bottom: 1.5rem;
        
        label {
            display: block;
            color: #7f8c8d;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .cuadro-texto {
            background: #f8f9fa;
            border: 1px solid #ecf0f1;
            padding: 1rem;
            border-radius: 4px;
            min-height: 80px;
            
            &.notas {
                white-space: pre-wrap;
                line-height: 1.6;
            }
        }
    }
}

.error-carga {
    background: #ffe3e3;
    border: 1px solid #ff8787;
    padding: 1.5rem;
    border-radius: 4px;
    color: #ff0000;
    display: flex;
    align-items: center;
    gap: 1rem;
    
    .icono-error {
        background: #ff0000;
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }
}<div class="historial-container">
    <div class="header-medico">
        <h2 class="titulo-seccion">HISTORIAL CLÍNICO</h2>
        <div class="sello"></div>
    </div>
    
    <div *ngIf="historial" class="documento-medico">
        <div class="encabezado">
            <div class="id-historial">
                <span class="badge-id">ID# {{historial.id_historial}}</span>
                <span class="fecha-consulta">{{historial.fecha_consulta | date: 'dd/MM/yyyy'}}</span>
            </div>
            <div class="linea-divisoria"></div>
        </div>

        <div class="seccion-datos">
            <div class="columna-datos">
                <div class="campo">
                    <label>Paciente:</label>
                    <p class="valor">{{historial.rut_paciente}}</p>
                </div>
                <div class="campo">
                    <label>Médico tratante:</label>
                    <p class="valor">{{historial.rut_medico}}</p>
                </div>
            </div>
            
            <div class="columna-datos">
                <div class="campo">
                    <label>Fecha creación:</label>
                    <p class="valor-fecha">{{historial.createdAt | date: 'dd/MM/yyyy HH:mm'}}</p>
                </div>
            </div>
        </div>

        <div class="seccion-clinica">
            <h3 class="subtitulo">INFORMACIÓN CLÍNICA</h3>
            <div class="campo-vertical">
                <label>Diagnóstico principal:</label>
                <div class="cuadro-texto">{{historial.diagnostico}}</div>
            </div>
            
            <div class="campo-vertical">
                <label>Medicación recetada:</label>
                <div class="cuadro-texto">{{historial.medicamento}}</div>
            </div>
            
            <div class="campo-vertical">
                <label>Observaciones:</label>
                <div class="cuadro-texto notas">{{historial.notas}}</div>
            </div>
        </div>
    </div>

    <div *ngIf="!historial" class="error-carga">
        <div class="icono-error">!</div>
        <p>No se ha encontrado el historial médico solicitado</p>
    </div>
</div>.historial-container {
    font-family: 'Segoe UI', Arial, sans-serif;
    max-width: 800px;
    margin: 2rem auto;
    background: #f8f9fa;
    padding: 2rem;
    border-radius: 4px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.header-medico {
    position: relative;
    margin-bottom: 2rem;
    text-align: center;
    
    .titulo-seccion {
        color: #2c3e50;
        text-transform: uppercase;
        letter-spacing: 2px;
        border-bottom: 3px solid #3498db;
        padding-bottom: 1rem;
        margin: 0 0 2rem 0;
    }
    
    .sello {
        position: absolute;
        top: -10px;
        right: 20px;
        width: 80px;
        height: 80px;
        border: 3px dashed #e74c3c;
        border-radius: 50%;
        opacity: 0.3;
    }
}

.documento-medico {
    background: white;
    padding: 2rem;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    position: relative;
    
    .encabezado {
        margin-bottom: 1.5rem;
        
        .id-historial {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            
            .badge-id {
                background: #3498db;
                color: white;
                padding: 0.3rem 0.8rem;
                border-radius: 15px;
                font-size: 0.9rem;
            }
            
            .fecha-consulta {
                color: #7f8c8d;
                font-weight: 500;
            }
        }
        
        .linea-divisoria {
            border-bottom: 2px solid #ecf0f1;
            margin-bottom: 1.5rem;
        }
    }
}

.seccion-datos {
    display: flex;
    gap: 2rem;
    margin-bottom: 2rem;
    
    .columna-datos {
        flex: 1;
        
        .campo {
            margin-bottom: 1rem;
            
            label {
                display: block;
                color: #95a5a6;
                font-size: 0.9rem;
                margin-bottom: 0.3rem;
            }
            
            .valor {
                margin: 0;
                font-weight: 500;
                color: #2c3e50;
            }
            
            .valor-fecha {
                color: #3498db;
                font-weight: 600;
            }
        }
    }
}

.seccion-clinica {
    .subtitulo {
        color: #3498db;
        text-transform: uppercase;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
    }
    
    .campo-vertical {
        margin-bottom: 1.5rem;
        
        label {
            display: block;
            color: #7f8c8d;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .cuadro-texto {
            background: #f8f9fa;
            border: 1px solid #ecf0f1;
            padding: 1rem;
            border-radius: 4px;
            min-height: 80px;
            
            &.notas {
                white-space: pre-wrap;
                line-height: 1.6;
            }
        }
    }
}

.error-carga {
    background: #ffe3e3;
    border: 1px solid #ff8787;
    padding: 1.5rem;
    border-radius: 4px;
    color: #ff0000;
    display: flex;
    align-items: center;
    gap: 1rem;
    
    .icono-error {
        background: #ff0000;
        color: white;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
    }
}import { ComponentFixture, TestBed } from '@angular/core/testing';

import { VerHistorialMedicoPacienteComponent } from './ver-historial-medico-paciente.component';

describe('VerHistorialMedicoPacienteComponent', () => {
  let component: VerHistorialMedicoPacienteComponent;
  let fixture: ComponentFixture<VerHistorialMedicoPacienteComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [VerHistorialMedicoPacienteComponent]
    });
    fixture = TestBed.createComponent(VerHistorialMedicoPacienteComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HistorialService } from '../../../../medicos/services/historial.service';

@Component({
  selector: 'app-ver-historial-medico-paciente',
  templateUrl: './ver-historial-medico-paciente.component.html',
  styleUrls: ['./ver-historial-medico-paciente.component.scss']
})
export class VerHistorialMedicoPacienteComponent implements OnInit {

  historial: any = {};

  constructor(
    
    private route: ActivatedRoute, private HistorialService: HistorialService
) { }

  ngOnInit(): void {
    const idHistorial = this.route.snapshot.paramMap.get('id');
    console.log('aqui esta el id del historial',idHistorial)
    if (idHistorial) {
      this.cargarHistorial(idHistorial);
  } else {
      console.error('No se proporcionó un ID de factura válido.');
      
  }
}

cargarHistorial(id: string) {
  const idHistorial = +id;
  this.HistorialService.getHistorialPorId(idHistorial)
  .subscribe((response:any) => {
        console.log('aqui esta la respuesta',response);
        console.log('aqui esta la respuesta completa',response)
          this.historial = response;
          console.log('historial cargada:', this.historial);
    
  }, error => {
      console.error('Error al cargar la factura:', error);
  });
}

}

<div class="container">
    <h1 class="title">Bienvenido al Sistema de Gestión de Citas Médicas</h1>
    <p class="introduction">
        A continuación, encontrará instrucciones facitar el uso de nuestra aplicacion de citas. Por favor, siga estos pasos en el orden presentado para una experiencia eficiente.
    </p>
    <ol class="instruction-list">
        <li><strong>Agendar cita medica:</strong> 
            Agende su cita médica ingresando a la sección 'Agendar Cita'. Haga clic en el botón 'Agendar Cita Médica'. Aquí encontrará un formulario donde deberá seleccionar la especialidad médica que desea agendar para su consulta. Para ayudarlo en su búsqueda, hemos incluido una lista debajo del formulario con los días en los que se atienden ciertas especialidades. Solo seleccione una especialidad y una fecha, luego haga clic en el botón 'Buscar Cita Médica'. Aquí deberá escoger un médico disponible junto con su horario disponible. Haga clic en 'Agendar Cita' para proceder con la compra de su cita en Mercado Pago. Una vez realizada la compra, se le enviará un correo recordatorio con información de su cita. Además, al finalizar la compra y volver a la aplicación, se le entregará un documento que, si gusta, puede imprimir para asistir a su cita. Información como la dirección de la clínica se encuentra en la sección 'Agendar Cita', junto al horario de la clínica.</li>
        <li><strong>Revisar historial medico:</strong>En esta seccion podra revisar sus historiales medicos con informacion como diagnosticos, medicamentos y demas informacion relevante de su medico.</li>
        <li><strong>Revisar citas medicas:</strong> En esta seccion podra ver sus citas medicas que tiene agendadas.</li> 
        <li><strong>Cancelar cita:</strong> Si desea cancelar una cita que ya ha pagado, comuníquese con nosotros a través de correo electrónico o por teléfono. Ahí cancelaremos su cita actual y agendaremos otra para la fecha que desee.</li>  
        <li><strong>Cambiar contraseña:</strong> como su nombre lo indica, en esta seccion podra cambiar la contraseña que tiene registrada en la aplicacion por otra que guste.</li>    

    </ol>
</div>


import { Component } from '@angular/core';

@Component({
  selector: 'app-inicio-paciente',
  templateUrl: './inicio-paciente.component.html',
  styleUrls: ['./inicio-paciente.component.scss']
})
export class InicioPacienteComponent {

}
.container {
    max-width: 800px; 
    margin: auto; 
    padding: 20px;
    background-color: #f8f8f8;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.title {
    text-align: center;
    color: #333;
    font-size: 24px;
    margin-bottom: 16px;
    font-weight: bold; 
}

.introduction {
    font-size: 16px;
    color: #555;
    margin-bottom: 20px;
    font-style: italic; 
}

.instruction-list {
    list-style-type: none;
    padding: 0;
    max-width: 700px; 
    margin: auto; 
}

.instruction-list li {
    background-color: #fff;
    margin-bottom: 10px;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease; 
}

.instruction-list li:hover {
    transform: scale(1.05); 
}

.instruction-list li strong {
    color: #007bff;
    font-size: 18px; 
}

.instruction-list li::before {
    content: '• ';
    color: #007bff;
    font-size: 20px;
    margin-right: 5px; 
}


.instruction-list li {
    border: 1px solid #ddd;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

<div class="container">
    <h1 class="title">Bienvenido al Sistema de Gestión de Citas Médicas</h1>
    <p class="introduction">
        A continuación, encontrará instrucciones facitar el uso de nuestra aplicacion de citas. Por favor, siga estos pasos en el orden presentado para una experiencia eficiente.
    </p>
    <ol class="instruction-list">
        <li><strong>Agendar cita medica:</strong> 
            Agende su cita médica ingresando a la sección 'Agendar Cita'. Haga clic en el botón 'Agendar Cita Médica'. Aquí encontrará un formulario donde deberá seleccionar la especialidad médica que desea agendar para su consulta. Para ayudarlo en su búsqueda, hemos incluido una lista debajo del formulario con los días en los que se atienden ciertas especialidades. Solo seleccione una especialidad y una fecha, luego haga clic en el botón 'Buscar Cita Médica'. Aquí deberá escoger un médico disponible junto con su horario disponible. Haga clic en 'Agendar Cita' para proceder con la compra de su cita en Mercado Pago. Una vez realizada la compra, se le enviará un correo recordatorio con información de su cita. Además, al finalizar la compra y volver a la aplicación, se le entregará un documento que, si gusta, puede imprimir para asistir a su cita. Información como la dirección de la clínica se encuentra en la sección 'Agendar Cita', junto al horario de la clínica.</li>
        <li><strong>Revisar historial medico:</strong>En esta seccion podra revisar sus historiales medicos con informacion como diagnosticos, medicamentos y demas informacion relevante de su medico.</li>
        <li><strong>Revisar citas medicas:</strong> En esta seccion podra ver sus citas medicas que tiene agendadas.</li> 
        <li><strong>Cancelar cita:</strong> Si desea cancelar una cita que ya ha pagado, comuníquese con nosotros a través de correo electrónico o por teléfono. Ahí cancelaremos su cita actual y agendaremos otra para la fecha que desee.</li>  
        <li><strong>Cambiar contraseña:</strong> como su nombre lo indica, en esta seccion podra cambiar la contraseña que tiene registrada en la aplicacion por otra que guste.</li>    

    </ol>
</div>


.container {
    max-width: 800px; 
    margin: auto; 
    padding: 20px;
    background-color: #f8f8f8;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.title {
    text-align: center;
    color: #333;
    font-size: 24px;
    margin-bottom: 16px;
    font-weight: bold; 
}

.introduction {
    font-size: 16px;
    color: #555;
    margin-bottom: 20px;
    font-style: italic; 
}

.instruction-list {
    list-style-type: none;
    padding: 0;
    max-width: 700px; 
    margin: auto; 
}

.instruction-list li {
    background-color: #fff;
    margin-bottom: 10px;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease; 
}

.instruction-list li:hover {
    transform: scale(1.05); 
}

.instruction-list li strong {
    color: #007bff;
    font-size: 18px; 
}

.instruction-list li::before {
    content: '• ';
    color: #007bff;
    font-size: 20px;
    margin-right: 5px; 
}


.instruction-list li {
    border: 1px solid #ddd;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
import { Component } from '@angular/core';

@Component({
  selector: 'app-inicio-paciente',
  templateUrl: './inicio-paciente.component.html',
  styleUrls: ['./inicio-paciente.component.scss']
})
export class InicioPacienteComponent {

}
export interface Bloque {
    medicoNombre: string;
    hora_inicio: string;
    hora_fin: string;
    precio: number;
    especialidad: string;
}

export interface BloquesResponse {
    ok: boolean;
    bloques: Bloque[];
}
export interface Horario {
    dia: string;
    horarioApertura: string | null;
    horarioCierre: string | null;
    estado: string;
}

export interface HorarioClinicaResponse {
    ok: boolean;
    horariosClinica: Horario[];
}// cita-medica.interface.ts
export interface CitaMedicaF {
    idCita: number;
    motivo: string;
    rut_paciente: string;
    rut_medico: string;
    fecha: string;
    hora_inicio: string;
    hora_fin: string;
    estado: string;
    descripcion?: string;
    idTipoCita: number;
    factura?: Factura;
    medico: Medico;
    paciente: Paciente;
  }
  
  export interface Factura {
    id_factura: number;
    id_cita: number;
    payment_method_id: string;
    transaction_amount: number;
    payment_status: string;
    status_detail: string;
    monto_pagado: number;
    estado_pago: string;
  }
  
  export interface Medico {
    nombre: string;
    apellidos: string;
    especialidad_medica: string;
  }
  
  export interface Paciente {
    nombre: string;
    apellidos: string;
    email: string;
  }
  
<router-outlet></router-outlet>
<app-dashboard></app-dashboard>
import { Component, OnInit } from '@angular/core';
import { SidebarService } from 'src/app/shared/sidebar.service';


@Component({
  selector: 'app-layout-page',
  templateUrl: './layout-page.component.html',
  styleUrls: ['./layout-page.component.scss']
})
export class LayoutPageComponent implements OnInit{

  constructor(private sidebarService: SidebarService){}

  ngOnInit(): void {

    this.sidebarService.cargarMenu();
  

  }

}



<router-outlet></router-outlet>
<app-dashboard></app-dashboard>
import { Component, OnInit } from '@angular/core';
import { SidebarService } from 'src/app/shared/sidebar.service';


@Component({
  selector: 'app-layout-page',
  templateUrl: './layout-page.component.html',
  styleUrls: ['./layout-page.component.scss']
})
export class LayoutPageComponent implements OnInit{

  constructor(private sidebarService: SidebarService){}

  ngOnInit(): void {

    this.sidebarService.cargarMenu();
  

  }

}


<div class="centered-container">
    <p>Transacción fallida</p>
    <button class="btn btn-primary" (click)="volverAAgendarCita()">Volver a Agendar Cita</button>
</div>


import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-payment-failure',
  templateUrl: './payment-failure.component.html',
  styleUrls: ['./payment-failure.component.scss']
})
export class PaymentFailureComponent {

  constructor(private router: Router) {}

  volverAAgendarCita(): void {
    this.router.navigate(['/Agendar-cita']);
  }

}


.centered-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start; // Cambiado de 'center' a 'flex-start'
    height: 100vh;
    padding-top: 20px; // Ajusta según sea necesario

    p {
        margin-bottom: 20px;
    }
}

<div class="centered-container">
    <p>Transacción fallida</p>
    <button class="btn btn-primary" (click)="volverAAgendarCita()">Volver a Agendar Cita</button>
</div>




.centered-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start; // Cambiado de 'center' a 'flex-start'
    height: 100vh;
    padding-top: 20px; // Ajusta según sea necesario

    p {
        margin-bottom: 20px;
    }
}

import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-payment-failure',
  templateUrl: './payment-failure.component.html',
  styleUrls: ['./payment-failure.component.scss']
})
export class PaymentFailureComponent {

  constructor(private router: Router) {}

  volverAAgendarCita(): void {
    this.router.navigate(['/Agendar-cita']);
  }

}
<!-- payment-success.component.html -->
<button (click)="volverAInicio()" class="btn btn-secondary mt-3">Volver a Inicio</button>
<div  *ngIf="detallesCita">
    <h2>Detalles de la Cita</h2>
    <p><strong>Motivo:</strong> {{ detallesCita.motivo }}</p>
    <p><strong>Fecha:</strong> {{ detallesCita.fecha }}</p>
    <p><strong>Hora de Inicio:</strong> {{ detallesCita.hora_inicio }}</p>
    <p><strong>Hora de Fin:</strong> {{ detallesCita.hora_fin }}</p>
    <p><strong>Estado:</strong> {{ detallesCita.estado }}</p>

  
    <h3>Información del Médico</h3>
    <p><strong>Nombre:</strong> {{ detallesCita.medico.nombre }} {{ detallesCita.medico.apellidos }}</p>
    <p><strong>Especialidad:</strong> {{ detallesCita.medico.especialidad_medica }}</p>
  
    <h3>Información del Paciente</h3>
    <p><strong>Nombre:</strong> {{ detallesCita.paciente.nombre }} {{ detallesCita.paciente.apellidos }}</p>
    <p><strong>Email:</strong> {{ detallesCita.paciente.email }}</p>
  
    <div *ngIf="detallesCita.factura">
      <h3>Detalles de Facturación</h3>
      <p><strong>Método de Pago:</strong> {{ detallesCita.factura.payment_method_id }}</p>
      <p><strong>Monto Pagado:</strong> {{ detallesCita.factura.monto_pagado }}</p>
      <p><strong>Estado del Pago:</strong> {{ detallesCita.factura.estado_pago }}</p>
    </div>
    <div *ngIf="AuthService.infoClinica" class="info-clinica">
      <h3>Información de Contacto de la Clínica</h3>
      <p><strong>Nombre de la Clínica:</strong> {{ AuthService.infoClinica.nombreClinica }}</p>
      <p><strong>Dirección:</strong> {{ AuthService.infoClinica.direccion }}</p>
      <p><strong>Teléfono:</strong> {{ AuthService.infoClinica.telefono }}</p>
      <p><strong>Email:</strong> {{ AuthService.infoClinica.email }}</p>
  </div>
  <button (click)="imprimir()" class="btn btn-primary mt-3 btn-imprimir">Imprimir Detalles</button>

  </div>
  
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CitaMedicaService } from '../../../admin/pages/services/cita-medica.service';
import { CitaMedicaF } from '../interfaces/payment';
import { AuthService } from '../../../auth/services/auth.service';


@Component({
  selector: 'app-payment-success',
  templateUrl: './payment-success.component.html',
  styleUrls: ['./payment-success.component.scss']
})
export class PaymentSuccessComponent implements OnInit {

 

  detallesCita: any | null = null;

  constructor(private route: ActivatedRoute, private CitaMedicaService: CitaMedicaService, public AuthService: AuthService, private router: Router ) {}

  /*
        ngOnInit() {
    if (this.authservice.usuario && this.authservice.usuario.rut) { 
        const rutUsuario = this.authservice.usuario.rut;
        this.cargarHistorialMedico(rutUsuario);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }

     cargarHistorialMedico(rut: string) {
    this.historialService.obtenerHistorialPorId(rut)
    .subscribe((historial:HistorialResponse) => {
      console.log(historial)
      this.historialMedico = historial.historiales;
     

    }, error => {
      console.error("Error al obtener el historial médico:", error);
    });
  }
}
  */

  ngOnInit() {
    console.log(this.AuthService.infoClinica);
    this.route.queryParams.subscribe(params => {
      const idCita = params['idCita'];
      console.log('AQUI ESTA EL ID DE LA CITA', idCita);
      this.obtenerCitamedica(idCita);
      
    });
  }

  volverAInicio() {
    // Navega a la ruta deseada
    this.router.navigate(['/Agendar-cita']);
  }

  obtenerCitamedica(idCita: number) {
    this.CitaMedicaService.obtenerCitamedicaFacturaPorId(idCita)
      .subscribe(
        (response:any) => {
          console.log('AQUI ESTA LA RESPUESTA:', response);
          this.detallesCita = response.citaMedica;
          console.log('AQUI ESTA EL ARREGLO CON LOS DATOS:',this.detallesCita);
          
        },
        error => {
          console.error('Error al obtener los detalles de la cita:', error);
          
        }
      );
  }

  imprimir() {
    window.print();
  }

}
@media print {
    .btn-imprimir {
      display: none;
    }
  }
  <!-- payment-success.component.html -->
<button (click)="volverAInicio()" class="btn btn-secondary mt-3">Volver a Inicio</button>
<div  *ngIf="detallesCita">
    <h2>Detalles de la Cita</h2>
    <p><strong>Motivo:</strong> {{ detallesCita.motivo }}</p>
    <p><strong>Fecha:</strong> {{ detallesCita.fecha }}</p>
    <p><strong>Hora de Inicio:</strong> {{ detallesCita.hora_inicio }}</p>
    <p><strong>Hora de Fin:</strong> {{ detallesCita.hora_fin }}</p>
    <p><strong>Estado:</strong> {{ detallesCita.estado }}</p>

  
    <h3>Información del Médico</h3>
    <p><strong>Nombre:</strong> {{ detallesCita.medico.nombre }} {{ detallesCita.medico.apellidos }}</p>
    <p><strong>Especialidad:</strong> {{ detallesCita.medico.especialidad_medica }}</p>
  
    <h3>Información del Paciente</h3>
    <p><strong>Nombre:</strong> {{ detallesCita.paciente.nombre }} {{ detallesCita.paciente.apellidos }}</p>
    <p><strong>Email:</strong> {{ detallesCita.paciente.email }}</p>
  
    <div *ngIf="detallesCita.factura">
      <h3>Detalles de Facturación</h3>
      <p><strong>Método de Pago:</strong> {{ detallesCita.factura.payment_method_id }}</p>
      <p><strong>Monto Pagado:</strong> {{ detallesCita.factura.monto_pagado }}</p>
      <p><strong>Estado del Pago:</strong> {{ detallesCita.factura.estado_pago }}</p>
    </div>
    <div *ngIf="AuthService.infoClinica" class="info-clinica">
      <h3>Información de Contacto de la Clínica</h3>
      <p><strong>Nombre de la Clínica:</strong> {{ AuthService.infoClinica.nombreClinica }}</p>
      <p><strong>Dirección:</strong> {{ AuthService.infoClinica.direccion }}</p>
      <p><strong>Teléfono:</strong> {{ AuthService.infoClinica.telefono }}</p>
      <p><strong>Email:</strong> {{ AuthService.infoClinica.email }}</p>
  </div>
  <button (click)="imprimir()" class="btn btn-primary mt-3 btn-imprimir">Imprimir Detalles</button>

  </div>
  
@media print {
    .btn-imprimir {
      display: none;
    }
  }
  import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CitaMedicaService } from '../../../admin/pages/services/cita-medica.service';
import { CitaMedicaF } from '../interfaces/payment';
import { AuthService } from '../../../auth/services/auth.service';


@Component({
  selector: 'app-payment-success',
  templateUrl: './payment-success.component.html',
  styleUrls: ['./payment-success.component.scss']
})
export class PaymentSuccessComponent implements OnInit {

 

  detallesCita: any | null = null;

  constructor(private route: ActivatedRoute, private CitaMedicaService: CitaMedicaService, public AuthService: AuthService, private router: Router ) {}

  /*
        ngOnInit() {
    if (this.authservice.usuario && this.authservice.usuario.rut) { 
        const rutUsuario = this.authservice.usuario.rut;
        this.cargarHistorialMedico(rutUsuario);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }

     cargarHistorialMedico(rut: string) {
    this.historialService.obtenerHistorialPorId(rut)
    .subscribe((historial:HistorialResponse) => {
      console.log(historial)
      this.historialMedico = historial.historiales;
     

    }, error => {
      console.error("Error al obtener el historial médico:", error);
    });
  }
}
  */

  ngOnInit() {
    console.log(this.AuthService.infoClinica);
    this.route.queryParams.subscribe(params => {
      const idCita = params['idCita'];
      console.log('AQUI ESTA EL ID DE LA CITA', idCita);
      this.obtenerCitamedica(idCita);
      
    });
  }

  volverAInicio() {
    // Navega a la ruta deseada
    this.router.navigate(['/Agendar-cita']);
  }

  obtenerCitamedica(idCita: number) {
    this.CitaMedicaService.obtenerCitamedicaFacturaPorId(idCita)
      .subscribe(
        (response:any) => {
          console.log('AQUI ESTA LA RESPUESTA:', response);
          this.detallesCita = response.citaMedica;
          console.log('AQUI ESTA EL ARREGLO CON LOS DATOS:',this.detallesCita);
          
        },
        error => {
          console.error('Error al obtener los detalles de la cita:', error);
          
        }
      );
  }

  imprimir() {
    window.print();
  }

}
<div class="citas-container">
  <div class="header-citas">
      <div class="search-container">
          <div class="search-bar">
              <input type="text" 
                     class="medical-search"
                     placeholder="Buscar por motivo, médico o fecha..."
                     #txtTermino
                     (keyup)="buscar(txtTermino.value)">
              <i class="fas fa-search-medical"></i>
          </div>
      </div>
      
      <div class="resumen-citas">
          <h2 class="titulo-citas">
              Agenda Médica
              <span class="badge-total">{{totalCitas}} citas</span>
          </h2>
          <p class="subtitulo-citas">Registro de consultas programadas</p>
      </div>
  </div>

  <div *ngIf="citasMedicas.length > 0" class="listado-citas">
      <div *ngFor="let cita of citasMedicas" class="cita-card">

          
          <div class="cita-body">
              <div class="cita-info">
                  <div class="info-item">
                      <i class="fas fa-stethoscope"></i>
                      <div>
                          <label>Motivo</label>
                          <p class="motivo">{{cita.motivo}}</p>
                      </div>
                  </div>
                  
                  <div class="info-item">
                      <i class="fas fa-calendar-check"></i>
                      <div>
                          <label>Fecha y Hora</label>
                          <p class="horario">
                              {{cita.fecha | date: 'dd/MM/yyyy'}} 
                              <span class="hora">{{cita.hora_inicio}} - {{cita.hora_fin}}</span>
                          </p>
                      </div>
                  </div>
                  
                  <div class="info-item">
                      <i class="fas fa-user-md"></i>
                      <div>
                          <label>Médico</label>
                          <p class="medico">{{cita.medico.nombre}} {{cita.medico.apellidos}}</p>
                      </div>
                  </div>
              </div>
              

          </div>
      </div>
  </div>

  <div *ngIf="citasMedicas.length === 0" class="sin-citas">
      <div class="empty-state">
          <i class="fas fa-calendar-times"></i>
          <p>No se encontraron citas programadas</p>
      </div>
  </div>

  <app-paginator 
      class="medical-paginator"
      [totalItems]="totalCitas" 
      [(offset)]="desde" 
      [pageSize]="5"
      (offsetChange)="cargarCitasMedicas(authService.usuario!.rut, $event)">
  </app-paginator>
</div>import { Component, OnInit } from '@angular/core';



import { BusquedasService } from 'src/app/admin/pages/services/busquedas.service';
import { AuthService } from 'src/app/auth/services/auth.service';
import { CitaMedicaService } from '../../../admin/pages/services/cita-medica.service';
@Component({
  selector: 'app-ver-citas-paciente',
  templateUrl: './ver-citas-paciente.component.html',
  styleUrls: ['./ver-citas-paciente.component.scss']
})
export class VerCitasPacienteComponent implements OnInit {

  citasMedicas: any[] = []; 
  public desde: number = 0;
  public totalCitas: number = 0;
    constructor( public authService: AuthService, private BusquedaMedicoService: BusquedasService, private CitaMedicaService: CitaMedicaService){}

  ngOnInit() {
    if (this.authService.usuario && this.authService.usuario.rut) { 
        const rutUsuario = this.authService.usuario.rut;
        console.log('AQUI ESTA EL RUT DEL U', rutUsuario );
        this.cargarCitasMedicas(rutUsuario, 0);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }
}
cambiarPagina(valor: number) {
  console.log("Valor actual de 'desde':", this.desde);
  this.desde += valor;

  if (this.desde < 0) {
    this.desde = 0;
  } else if (this.desde >= this.totalCitas) {
    this.desde -= valor;
  }

  console.log("Nuevo valor de 'desde':", this.desde);
  this.cargarCitasMedicas(this.authService.usuario.rut!, this.desde);
}

cargarCitasMedicas(rutPaciente: string, desde: number) {
  this.CitaMedicaService.obtenerCitaMedicaPorIdParaPacientes(rutPaciente, desde)
  .subscribe((response: any) => {
 
    this.citasMedicas = response.citas;
  
    this.totalCitas = response.total;
    console.log('AQUI ESTA EL TOTAL DE CITAS',this.totalCitas);
    console.log('AQUI ESTA LAS CITAS EN EL ARREGLO',this.citasMedicas);
   

  }, error => {
    console.error("Error al obtener el historial médico:", error);
  });
}

  buscar(termino: string){}

}
.citas-container {
    font-family: 'Segoe UI', Arial, sans-serif;
    max-width: 1200px;
    margin: 2rem auto;
    padding: 1.5rem;
}

.header-citas {
    margin-bottom: 2rem;
    
    .search-container {
        margin-bottom: 2rem;
        
        .search-bar {
            position: relative;
            
            .medical-search {
                width: 100%;
                padding: 1rem 1.5rem 1rem 3rem;
                border: 2px solid #e0e0e0;
                border-radius: 30px;
                font-size: 1rem;
                background: #f8f9fa;
                transition: all 0.3s ease;
                
                &:focus {
                    outline: none;
                    border-color: #3498db;
                    box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
                }
            }
            
            .fa-search-medical {
                position: absolute;
                left: 1.5rem;
                top: 50%;
                transform: translateY(-50%);
                color: #7f8c8d;
            }
        }
    }
}

.resumen-citas {
    text-align: center;
    margin-bottom: 2rem;
    
    .titulo-citas {
        color: #2c3e50;
        font-size: 2rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        
        .badge-total {
            background: #3498db;
            color: white;
            padding: 0.3rem 1rem;
            border-radius: 20px;
            font-size: 1.2rem;
        }
    }
    
    .subtitulo-citas {
        color: #7f8c8d;
        font-size: 1rem;
    }
}

.listado-citas {
    display: grid;
    gap: 1.5rem;
    
    .cita-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
        
        &:hover {
            transform: translateY(-2px);
        }
        
        .cita-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            border-bottom: 2px solid #f1f1f1;
            
            .cita-id {
                color: #3498db;
                font-weight: 600;
            }
            
            .cita-status {
                font-size: 0.85rem;
                padding: 0.3rem 0.8rem;
                border-radius: 15px;
                
                &.pending {
                    background: #fff3cd;
                    color: #856404;
                }
                
                &.completed {
                    background: #d4edda;
                    color: #155724;
                }
            }
        }
        
        .cita-body {
            padding: 1.5rem;
            display: flex;
            gap: 2rem;
            
            .cita-info {
                flex: 1;
                display: grid;
                gap: 1.5rem;
                
                .info-item {
                    display: flex;
                    gap: 1rem;
                    align-items: center;
                    
                    i {
                        font-size: 1.5rem;
                        color: #3498db;
                        width: 40px;
                        text-align: center;
                    }
                    
                    label {
                        display: block;
                        color: #7f8c8d;
                        font-size: 0.9rem;
                        margin-bottom: 0.3rem;
                    }
                    
                    p {
                        margin: 0;
                        color: #2c3e50;
                        font-weight: 500;
                        
                        &.horario {
                            .hora {
                                color: #3498db;
                                margin-left: 0.5rem;
                            }
                        }
                    }
                }
            }
            
            .cita-actions {
                display: flex;
                align-items: center;
                
                .btn-detalles {
                    background: #3498db;
                    color: white;
                    border: none;
                    padding: 0.8rem 1.5rem;
                    border-radius: 25px;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                    transition: background 0.3s ease;
                    
                    &:hover {
                        background: #2980b9;
                    }
                    
                    i {
                        font-size: 1.1rem;
                    }
                }
            }
        }
    }
}

.sin-citas {
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: #f8f9fa;
        border-radius: 10px;
        
        i {
            font-size: 4rem;
            color: #bdc3c7;
            margin-bottom: 1rem;
        }
        
        p {
            color: #7f8c8d;
            font-size: 1.2rem;
        }
    }
}

.medical-paginator {
    margin-top: 2rem;
    display: flex;
    justify-content: center;
}<div class="citas-container">
  <div class="header-citas">
      <div class="search-container">
          <div class="search-bar">
              <input type="text" 
                     class="medical-search"
                     placeholder="Buscar por motivo, médico o fecha..."
                     #txtTermino
                     (keyup)="buscar(txtTermino.value)">
              <i class="fas fa-search-medical"></i>
          </div>
      </div>
      
      <div class="resumen-citas">
          <h2 class="titulo-citas">
              Agenda Médica
              <span class="badge-total">{{totalCitas}} citas</span>
          </h2>
          <p class="subtitulo-citas">Registro de consultas programadas</p>
      </div>
  </div>

  <div *ngIf="citasMedicas.length > 0" class="listado-citas">
      <div *ngFor="let cita of citasMedicas" class="cita-card">

          
          <div class="cita-body">
              <div class="cita-info">
                  <div class="info-item">
                      <i class="fas fa-stethoscope"></i>
                      <div>
                          <label>Motivo</label>
                          <p class="motivo">{{cita.motivo}}</p>
                      </div>
                  </div>
                  
                  <div class="info-item">
                      <i class="fas fa-calendar-check"></i>
                      <div>
                          <label>Fecha y Hora</label>
                          <p class="horario">
                              {{cita.fecha | date: 'dd/MM/yyyy'}} 
                              <span class="hora">{{cita.hora_inicio}} - {{cita.hora_fin}}</span>
                          </p>
                      </div>
                  </div>
                  
                  <div class="info-item">
                      <i class="fas fa-user-md"></i>
                      <div>
                          <label>Médico</label>
                          <p class="medico">{{cita.medico.nombre}} {{cita.medico.apellidos}}</p>
                      </div>
                  </div>
              </div>
              

          </div>
      </div>
  </div>

  <div *ngIf="citasMedicas.length === 0" class="sin-citas">
      <div class="empty-state">
          <i class="fas fa-calendar-times"></i>
          <p>No se encontraron citas programadas</p>
      </div>
  </div>

  <app-paginator 
      class="medical-paginator"
      [totalItems]="totalCitas" 
      [(offset)]="desde" 
      [pageSize]="5"
      (offsetChange)="cargarCitasMedicas(authService.usuario!.rut, $event)">
  </app-paginator>
</div>.citas-container {
    font-family: 'Segoe UI', Arial, sans-serif;
    max-width: 1200px;
    margin: 2rem auto;
    padding: 1.5rem;
}

.header-citas {
    margin-bottom: 2rem;
    
    .search-container {
        margin-bottom: 2rem;
        
        .search-bar {
            position: relative;
            
            .medical-search {
                width: 100%;
                padding: 1rem 1.5rem 1rem 3rem;
                border: 2px solid #e0e0e0;
                border-radius: 30px;
                font-size: 1rem;
                background: #f8f9fa;
                transition: all 0.3s ease;
                
                &:focus {
                    outline: none;
                    border-color: #3498db;
                    box-shadow: 0 0 8px rgba(52, 152, 219, 0.2);
                }
            }
            
            .fa-search-medical {
                position: absolute;
                left: 1.5rem;
                top: 50%;
                transform: translateY(-50%);
                color: #7f8c8d;
            }
        }
    }
}

.resumen-citas {
    text-align: center;
    margin-bottom: 2rem;
    
    .titulo-citas {
        color: #2c3e50;
        font-size: 2rem;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        
        .badge-total {
            background: #3498db;
            color: white;
            padding: 0.3rem 1rem;
            border-radius: 20px;
            font-size: 1.2rem;
        }
    }
    
    .subtitulo-citas {
        color: #7f8c8d;
        font-size: 1rem;
    }
}

.listado-citas {
    display: grid;
    gap: 1.5rem;
    
    .cita-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
        
        &:hover {
            transform: translateY(-2px);
        }
        
        .cita-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            border-bottom: 2px solid #f1f1f1;
            
            .cita-id {
                color: #3498db;
                font-weight: 600;
            }
            
            .cita-status {
                font-size: 0.85rem;
                padding: 0.3rem 0.8rem;
                border-radius: 15px;
                
                &.pending {
                    background: #fff3cd;
                    color: #856404;
                }
                
                &.completed {
                    background: #d4edda;
                    color: #155724;
                }
            }
        }
        
        .cita-body {
            padding: 1.5rem;
            display: flex;
            gap: 2rem;
            
            .cita-info {
                flex: 1;
                display: grid;
                gap: 1.5rem;
                
                .info-item {
                    display: flex;
                    gap: 1rem;
                    align-items: center;
                    
                    i {
                        font-size: 1.5rem;
                        color: #3498db;
                        width: 40px;
                        text-align: center;
                    }
                    
                    label {
                        display: block;
                        color: #7f8c8d;
                        font-size: 0.9rem;
                        margin-bottom: 0.3rem;
                    }
                    
                    p {
                        margin: 0;
                        color: #2c3e50;
                        font-weight: 500;
                        
                        &.horario {
                            .hora {
                                color: #3498db;
                                margin-left: 0.5rem;
                            }
                        }
                    }
                }
            }
            
            .cita-actions {
                display: flex;
                align-items: center;
                
                .btn-detalles {
                    background: #3498db;
                    color: white;
                    border: none;
                    padding: 0.8rem 1.5rem;
                    border-radius: 25px;
                    cursor: pointer;
                    display: flex;
                    align-items: center;
                    gap: 0.5rem;
                    transition: background 0.3s ease;
                    
                    &:hover {
                        background: #2980b9;
                    }
                    
                    i {
                        font-size: 1.1rem;
                    }
                }
            }
        }
    }
}

.sin-citas {
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: #f8f9fa;
        border-radius: 10px;
        
        i {
            font-size: 4rem;
            color: #bdc3c7;
            margin-bottom: 1rem;
        }
        
        p {
            color: #7f8c8d;
            font-size: 1.2rem;
        }
    }
}

.medical-paginator {
    margin-top: 2rem;
    display: flex;
    justify-content: center;
}import { Component, OnInit } from '@angular/core';



import { BusquedasService } from 'src/app/admin/pages/services/busquedas.service';
import { AuthService } from 'src/app/auth/services/auth.service';
import { CitaMedicaService } from '../../../admin/pages/services/cita-medica.service';
@Component({
  selector: 'app-ver-citas-paciente',
  templateUrl: './ver-citas-paciente.component.html',
  styleUrls: ['./ver-citas-paciente.component.scss']
})
export class VerCitasPacienteComponent implements OnInit {

  citasMedicas: any[] = []; 
  public desde: number = 0;
  public totalCitas: number = 0;
    constructor( public authService: AuthService, private BusquedaMedicoService: BusquedasService, private CitaMedicaService: CitaMedicaService){}

  ngOnInit() {
    if (this.authService.usuario && this.authService.usuario.rut) { 
        const rutUsuario = this.authService.usuario.rut;
        console.log('AQUI ESTA EL RUT DEL U', rutUsuario );
        this.cargarCitasMedicas(rutUsuario, 0);
    } else {
        console.error("RUT del usuario no definido o usuario no autenticado");
    }
}
cambiarPagina(valor: number) {
  console.log("Valor actual de 'desde':", this.desde);
  this.desde += valor;

  if (this.desde < 0) {
    this.desde = 0;
  } else if (this.desde >= this.totalCitas) {
    this.desde -= valor;
  }

  console.log("Nuevo valor de 'desde':", this.desde);
  this.cargarCitasMedicas(this.authService.usuario.rut!, this.desde);
}

cargarCitasMedicas(rutPaciente: string, desde: number) {
  this.CitaMedicaService.obtenerCitaMedicaPorIdParaPacientes(rutPaciente, desde)
  .subscribe((response: any) => {
 
    this.citasMedicas = response.citas;
  
    this.totalCitas = response.total;
    console.log('AQUI ESTA EL TOTAL DE CITAS',this.totalCitas);
    console.log('AQUI ESTA LAS CITAS EN EL ARREGLO',this.citasMedicas);
   

  }, error => {
    console.error("Error al obtener el historial médico:", error);
  });
}

  buscar(termino: string){}

}
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from 'src/environment/environment';
import {  BehaviorSubject, Observable } from 'rxjs';
import { BloquesResponse } from '../pages/interfaces/busqueda-medicos';
import { Bloque } from '../pages/interfaces/busqueda-medicos';
const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class BusquedaMedicoService {
  
  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}

  private bloquesSubject: BehaviorSubject<Bloque[]> = new BehaviorSubject<Bloque[]>([]);
  public bloques$: Observable<Bloque[]> = this.bloquesSubject.asObservable();

  constructor(private http: HttpClient){}

  buscarHorarioDisponible(formData:any): Observable<BloquesResponse> {
    const url = `${base_url}/busqueda_cita`;
    return this.http.post<BloquesResponse>(url, formData, this.headers);
}

    actualizarBloques(data: Bloque[]): void {
      this.bloquesSubject.next(data);
    }
/*
    pagarCita(precio: number): Observable<any> {
      const url = `${base_url}/paypal/create-order`; // Sustituye con el endpoint correcto
      return this.http.post(url, { appointmentPrice: precio });
    }
 */  

    pagarCita(precio: number, especialidad: string, idCita: number): Observable<any> {
      const url = `${base_url}/mercadoPago/create-order`;
      // Incluye ambos, el precio y la especialidad, en el cuerpo de la petición
      return this.http.post(url, { precio: precio, motivo: especialidad, idCita },this.headers);
    }
    
  
}

import { HttpBackend, HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { environment } from 'src/environment/environment';
import { HorarioClinicaResponse } from '../pages/interfaces/horario_clinicas';

const base_url = environment.base_url;

@Injectable({
  providedIn: 'root'
})
export class HorarioClinicaService {

  get token(): string {
    return localStorage.getItem('token') || '';
  }

  get headers() {
    return { 
      headers: {
      'Authorization': `Bearer ${this.token}`
      }
    }
}



  constructor(private http: HttpClient){}

  cargarHorarioClinica(): Observable<HorarioClinicaResponse> {
    const url = `${base_url}/horario_clinica`;
    return this.http.get<HorarioClinicaResponse>(url,this.headers);
  }

  obtenerHorarioEspecialidades() {

    const url = `${base_url}/horario_clinica/porEspecialidad`;
    return this.http.get(url,this.headers);
  }
}
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DashboardComponent } from './dashboard/dashboard.component';
import { MaterialModule } from '../material/material.module';
import { RouterModule } from '@angular/router';
import { PaginatorComponent } from './paginator/paginator.component';
import { MatMenuModule } from '@angular/material/menu';




@NgModule({
  declarations: [
    DashboardComponent,
    PaginatorComponent,

  ],
  imports: [
    CommonModule,
    MaterialModule,
    RouterModule,
    MatMenuModule,
  ],
  exports: [DashboardComponent, PaginatorComponent],
})
export class SharedModule { }
import { Injectable } from '@angular/core';

export interface MenuItem {
  label: string;
  icon?: string;
  url: string;
  category?: string;
}

@Injectable({
  providedIn: 'root'
})
export class SidebarService {
  public menu: MenuItem[] = [];
  
  constructor() {
    this.cargarMenu();
  }
  
  /**
   * Carga el menú desde localStorage y asigna iconos por defecto si no existen
   */
  cargarMenu(): void {
    const menuFromLocalStorage = localStorage.getItem('menu');
    
    if (menuFromLocalStorage) {
      try {
        // Cargar menú del localStorage
        const parsedMenu = JSON.parse(menuFromLocalStorage);
        
        // Asignar iconos por defecto según la URL si no existen
        this.menu = parsedMenu.map((item: MenuItem) => {
          if (!item.icon) {
            item.icon = this.getDefaultIcon(item.url);
          }
          return item;
        });
        
        console.log('Menú cargado:', this.menu);
      } catch (error) {
        console.error('Error al parsear el menú:', error);
        this.menu = [];
      }
    } else {
      console.log('No se encontró menú en localStorage');
      this.menu = [];
    }
  }
  
  /**
   * Obtiene un icono por defecto basado en la URL del elemento de menú
   */
  private getDefaultIcon(url: string): string {
    if (url.includes('dashboard')) return 'dashboard';
    if (url.includes('profile')) return 'person';
    if (url.includes('user')) return 'people';
    if (url.includes('medic')) return 'local_hospital';
    if (url.includes('patient')) return 'healing';
    if (url.includes('appointment')) return 'event';
    if (url.includes('report')) return 'assessment';
    if (url.includes('setting')) return 'settings';
    if (url.includes('chart')) return 'bar_chart';
    
    // Icono por defecto
    return 'chevron_right';
  }
}import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DashboardComponent } from './dashboard/dashboard.component';
import { MaterialModule } from '../material/material.module';
import { RouterModule } from '@angular/router';
import { PaginatorComponent } from './paginator/paginator.component';
import { MatMenuModule } from '@angular/material/menu';




@NgModule({
  declarations: [
    DashboardComponent,
    PaginatorComponent,

  ],
  imports: [
    CommonModule,
    MaterialModule,
    RouterModule,
    MatMenuModule,
  ],
  exports: [DashboardComponent, PaginatorComponent],
})
export class SharedModule { }
<mat-sidenav-container fullscreen>
    <!-- Sidebar permanentemente visible con ancho aumentado -->
    <mat-sidenav #sidenav mode="side" opened [ngStyle]="{ width: '320px' }" class="permanent-sidenav">
      <div class="sidebar-header">
        <div class="user-profile" *ngIf="authService.usuario || authService.medico">
          <div class="avatar">
            <mat-icon class="avatar-icon">account_circle</mat-icon>
          </div>
          <div class="user-info">
            <h3 class="user-name">
              {{ authService.usuario ? authService.usuario.nombre + ' ' + authService.usuario.apellidos :
                authService.medico ? authService.medico.nombre + ' ' + authService.medico.apellidos : 'Usuario' }}
            </h3>
            <span class="user-role">
              {{ authService.usuario ? authService.usuario.rol :
                authService.medico ? authService.medico.rol : '' | titlecase }}
            </span>
          </div>
        </div>
        <mat-divider></mat-divider>
      </div>
  
      <mat-nav-list class="menu-list">
        <div class="menu-category" *ngFor="let category of groupedMenu | keyvalue">
          <h3 class="menu-category-title">{{ category.key }}</h3>
          <a mat-list-item
            *ngFor="let item of category.value"
            [routerLink]="item.url"
            routerLinkActive="active-link"
            class="menu-item">
            <mat-icon matListItemIcon>{{ item.icon || 'arrow_right' }}</mat-icon>
            <span class="menu-item-text">{{ item.label }}</span>
          </a>
        </div>
      </mat-nav-list>
      
      <div class="sidebar-footer">
        <mat-divider></mat-divider>
        <div class="clinic-info" *ngIf="authService.infoClinica">
          <h4>{{ authService.infoClinica.nombreClinica }}</h4>
          <p class="clinic-contact">{{ authService.infoClinica.telefono }}</p>
        </div>
        
        <!-- Botón de cerrar sesión -->
        <button mat-flat-button class="logout-button" (click)="onLogout()">
          <mat-icon>exit_to_app</mat-icon>
          <span>Cerrar Sesión</span>
        </button>
      </div>
    </mat-sidenav>
  
    <!-- Contenido principal -->
    <mat-sidenav-content>
      <mat-toolbar color="primary">
        <span class="clinic-name" *ngIf="authService.infoClinica">
          {{ authService.infoClinica.nombreClinica }}
        </span>
        
        <span class="spacer"></span>
        
        <div class="user-toolbar-info" *ngIf="authService.usuario || authService.medico">
          <span class="username">
            {{ authService.usuario ? authService.usuario.nombre :
               authService.medico ? authService.medico.nombre : '' }}
          </span>
          <button mat-icon-button [matMenuTriggerFor]="menu">
            <mat-icon>account_circle</mat-icon>
          </button>
          <mat-menu #menu="matMenu">
            <button mat-menu-item>
              <mat-icon>person</mat-icon>
              <span>Mi Perfil</span>
            </button>
            <button mat-menu-item>
              <mat-icon>settings</mat-icon>
              <span>Configuración</span>
            </button>
            <mat-divider></mat-divider>
            <button mat-menu-item (click)="onLogout()">
              <mat-icon>exit_to_app</mat-icon>
              <span>Cerrar Sesión</span>
            </button>
          </mat-menu>
        </div>
      </mat-toolbar>
  
      <div class="main-content">
        <router-outlet></router-outlet>
      </div>
    </mat-sidenav-content>
  </mat-sidenav-container>import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { SidebarService } from '../sidebar.service';
import { AuthService } from '../../auth/services/auth.service';

interface MenuItem {
  label: string;
  icon?: string;
  url: string;
  category?: string;
}

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {
  
  // Menú agrupado por categorías
  groupedMenu: { [key: string]: MenuItem[] } = {};

  constructor(
    private router: Router,
    public sidebarService: SidebarService,
    public authService: AuthService
  ) {}
  
  ngOnInit(): void {
    // Agrupar menú por categorías cuando se cargue el componente
    this.groupMenuItems();
    
    // Verificar estado de autenticación
    this.checkAuthState();
  }
  
  /**
   * Agrupa los elementos del menú por categoría
   */
  groupMenuItems(): void {
    this.groupedMenu = {};
    
    // Procesar elementos del menú y agruparlos por categoría
    this.sidebarService.menu.forEach((item: MenuItem) => {
      const category = item.category || 'General';
      
      if (!this.groupedMenu[category]) {
        this.groupedMenu[category] = [];
      }
      
      this.groupedMenu[category].push(item);
    });
  }
  
  /**
   * Verifica el estado de autenticación usando el servicio
   */
  checkAuthState(): void {
    this.authService.validarToken().subscribe(
      valid => {
        if (!valid) {
          this.router.navigate(['/auth']);
        }
      }
    );
  }
  
  /**
   * Maneja el cierre de sesión
   */
  onLogout(): void {
    this.authService.logout();
    this.router.navigate(['/auth']);
  }
}/* Variables */
$primary-color: #3f51b5;
$accent-color: #ff4081;
$light-gray: #f5f5f5;
$medium-gray: #e0e0e0;
$dark-gray: #757575;
$danger-color: #f44336;
$text-color: #333333;
$sidebar-width: 320px;
$toolbar-height: 64px;
$border-radius: 8px;

/* Layout principal */
mat-sidenav-container {
  height: 100%;
}

/* Estilos para el sidenav permanente */
.permanent-sidenav {
  width: $sidebar-width;
  background-color: white;
  border-right: 1px solid $medium-gray;
  display: flex;
  flex-direction: column;
  overflow-x: hidden;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

  .sidebar-header {
    padding: 16px;
    
    .user-profile {
      display: flex;
      align-items: center;
      padding: 16px 0;
      
      .avatar {
        background-color: $primary-color;
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-shrink: 0;
        
        .avatar-icon {
          color: white;
          font-size: 28px;
          height: 28px;
          width: 28px;
        }
      }
      
      .user-info {
        margin-left: 16px;
        overflow: hidden;
        width: calc(100% - 64px);
        
        .user-name {
          margin: 0;
          font-size: 16px;
          font-weight: 500;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          max-width: 100%;
        }
        
        .user-role {
          color: $dark-gray;
          font-size: 14px;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          max-width: 100%;
        }
      }
    }
  }
  
  .menu-list {
    flex: 1;
    overflow-y: auto;
    padding-top: 0;
    
    .menu-category {
      margin-bottom: 16px;
      
      .menu-category-title {
        color: $dark-gray;
        font-size: 13px;
        font-weight: 500;
        padding: 16px 16px 8px;
        margin: 0;
        text-transform: uppercase;
      }
    }
    
    .menu-item {
      border-radius: 0 24px 24px 0;
      margin: 0 8px 0 0;
      height: 48px;
      
      &:hover {
        background-color: rgba($primary-color, 0.08);
      }
      
      &.active-link {
        background-color: rgba($primary-color, 0.12);
        color: $primary-color;
        
        mat-icon {
          color: $primary-color;
        }
      }

      .menu-item-text {
        font-size: 15px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: calc(100% - 56px);
        display: block;
      }
      
      mat-icon {
        margin-right: 16px;
        flex-shrink: 0;
      }
    }
  }
  
  .sidebar-footer {
    padding: 16px;
    
    .clinic-info {
      padding: 16px 0;
      text-align: center;
      
      h4 {
        margin: 0 0 8px;
        font-weight: 500;
        font-size: 15px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      
      .clinic-contact {
        color: $dark-gray;
        margin: 0;
        font-size: 14px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    }
    
    /* Estilos para el botón de cerrar sesión */
    .logout-button {
      width: 100%;
      margin-top: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba($danger-color, 0.05);
      color: $danger-color;
      border: 1px solid rgba($danger-color, 0.2);
      border-radius: $border-radius;
      padding: 8px 16px;
      transition: all 0.3s ease;
      
      &:hover {
        background-color: rgba($danger-color, 0.1);
      }
      
      mat-icon {
        margin-right: 8px;
      }
      
      span {
        font-weight: 500;
      }
    }
  }
}

/* Estilos para el contenido principal */
mat-sidenav-content {
  margin-left: $sidebar-width;
  
  .mat-toolbar {
    position: fixed;
    top: 0;
    right: 0;
    left: $sidebar-width;
    z-index: 2;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.12);
    
    .clinic-name {
      margin-left: 16px;
      font-weight: 500;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      max-width: 40%;
    }
    
    .user-toolbar-info {
      display: flex;
      align-items: center;
      
      .username {
        margin-right: 8px;
        font-weight: 500;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        max-width: 200px;
      }
    }
  }
  
  .main-content {
    padding: 24px;
    margin-top: $toolbar-height;
    min-height: calc(100vh - #{$toolbar-height});
    background-color: $light-gray;
    overflow-x: auto;
  }
}

/* Utilidades */
.spacer {
  flex: 1 1 auto;
}

/* Media queries para responsive */
@media screen and (max-width: 1200px) {
  /* Mantener como solicitado */
}

/* Estilos específicos para tablas */
table {
  width: 100%;
  border-collapse: collapse;
  background-color: white;
  border-radius: $border-radius;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  
  th, td {
    padding: 12px 16px;
    text-align: left;
    border-bottom: 1px solid $medium-gray;
  }
  
  th {
    background-color: rgba($primary-color, 0.05);
    font-weight: 500;
    color: $primary-color;
  }
  
  tr:last-child td {
    border-bottom: none;
  }
  
  tr:hover {
    background-color: rgba($primary-color, 0.03);
  }
}<mat-sidenav-container fullscreen>
    <!-- Sidebar permanentemente visible con ancho aumentado -->
    <mat-sidenav #sidenav mode="side" opened [ngStyle]="{ width: '320px' }" class="permanent-sidenav">
      <div class="sidebar-header">
        <div class="user-profile" *ngIf="authService.usuario || authService.medico">
          <div class="avatar">
            <mat-icon class="avatar-icon">account_circle</mat-icon>
          </div>
          <div class="user-info">
            <h3 class="user-name">
              {{ authService.usuario ? authService.usuario.nombre + ' ' + authService.usuario.apellidos :
                authService.medico ? authService.medico.nombre + ' ' + authService.medico.apellidos : 'Usuario' }}
            </h3>
            <span class="user-role">
              {{ authService.usuario ? authService.usuario.rol :
                authService.medico ? authService.medico.rol : '' | titlecase }}
            </span>
          </div>
        </div>
        <mat-divider></mat-divider>
      </div>
  
      <mat-nav-list class="menu-list">
        <div class="menu-category" *ngFor="let category of groupedMenu | keyvalue">
          <h3 class="menu-category-title">{{ category.key }}</h3>
          <a mat-list-item
            *ngFor="let item of category.value"
            [routerLink]="item.url"
            routerLinkActive="active-link"
            class="menu-item">
            <mat-icon matListItemIcon>{{ item.icon || 'arrow_right' }}</mat-icon>
            <span class="menu-item-text">{{ item.label }}</span>
          </a>
        </div>
      </mat-nav-list>
      
      <div class="sidebar-footer">
        <mat-divider></mat-divider>
        <div class="clinic-info" *ngIf="authService.infoClinica">
          <h4>{{ authService.infoClinica.nombreClinica }}</h4>
          <p class="clinic-contact">{{ authService.infoClinica.telefono }}</p>
        </div>
        
        <!-- Botón de cerrar sesión -->
        <button mat-flat-button class="logout-button" (click)="onLogout()">
          <mat-icon>exit_to_app</mat-icon>
          <span>Cerrar Sesión</span>
        </button>
      </div>
    </mat-sidenav>
  
    <!-- Contenido principal -->
    <mat-sidenav-content>
      <mat-toolbar color="primary">
        <span class="clinic-name" *ngIf="authService.infoClinica">
          {{ authService.infoClinica.nombreClinica }}
        </span>
        
        <span class="spacer"></span>
        
        <div class="user-toolbar-info" *ngIf="authService.usuario || authService.medico">
          <span class="username">
            {{ authService.usuario ? authService.usuario.nombre :
               authService.medico ? authService.medico.nombre : '' }}
          </span>
          <button mat-icon-button [matMenuTriggerFor]="menu">
            <mat-icon>account_circle</mat-icon>
          </button>
          <mat-menu #menu="matMenu">
            <button mat-menu-item>
              <mat-icon>person</mat-icon>
              <span>Mi Perfil</span>
            </button>
            <button mat-menu-item>
              <mat-icon>settings</mat-icon>
              <span>Configuración</span>
            </button>
            <mat-divider></mat-divider>
            <button mat-menu-item (click)="onLogout()">
              <mat-icon>exit_to_app</mat-icon>
              <span>Cerrar Sesión</span>
            </button>
          </mat-menu>
        </div>
      </mat-toolbar>
  
      <div class="main-content">
        <router-outlet></router-outlet>
      </div>
    </mat-sidenav-content>
  </mat-sidenav-container>/* Variables */
$primary-color: #3f51b5;
$accent-color: #ff4081;
$light-gray: #f5f5f5;
$medium-gray: #e0e0e0;
$dark-gray: #757575;
$danger-color: #f44336;
$text-color: #333333;
$sidebar-width: 320px;
$toolbar-height: 64px;
$border-radius: 8px;

/* Layout principal */
mat-sidenav-container {
  height: 100%;
}

/* Estilos para el sidenav permanente */
.permanent-sidenav {
  width: $sidebar-width;
  background-color: white;
  border-right: 1px solid $medium-gray;
  display: flex;
  flex-direction: column;
  overflow-x: hidden;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

  .sidebar-header {
    padding: 16px;
    
    .user-profile {
      display: flex;
      align-items: center;
      padding: 16px 0;
      
      .avatar {
        background-color: $primary-color;
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-shrink: 0;
        
        .avatar-icon {
          color: white;
          font-size: 28px;
          height: 28px;
          width: 28px;
        }
      }
      
      .user-info {
        margin-left: 16px;
        overflow: hidden;
        width: calc(100% - 64px);
        
        .user-name {
          margin: 0;
          font-size: 16px;
          font-weight: 500;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          max-width: 100%;
        }
        
        .user-role {
          color: $dark-gray;
          font-size: 14px;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          max-width: 100%;
        }
      }
    }
  }
  
  .menu-list {
    flex: 1;
    overflow-y: auto;
    padding-top: 0;
    
    .menu-category {
      margin-bottom: 16px;
      
      .menu-category-title {
        color: $dark-gray;
        font-size: 13px;
        font-weight: 500;
        padding: 16px 16px 8px;
        margin: 0;
        text-transform: uppercase;
      }
    }
    
    .menu-item {
      border-radius: 0 24px 24px 0;
      margin: 0 8px 0 0;
      height: 48px;
      
      &:hover {
        background-color: rgba($primary-color, 0.08);
      }
      
      &.active-link {
        background-color: rgba($primary-color, 0.12);
        color: $primary-color;
        
        mat-icon {
          color: $primary-color;
        }
      }

      .menu-item-text {
        font-size: 15px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        width: calc(100% - 56px);
        display: block;
      }
      
      mat-icon {
        margin-right: 16px;
        flex-shrink: 0;
      }
    }
  }
  
  .sidebar-footer {
    padding: 16px;
    
    .clinic-info {
      padding: 16px 0;
      text-align: center;
      
      h4 {
        margin: 0 0 8px;
        font-weight: 500;
        font-size: 15px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
      
      .clinic-contact {
        color: $dark-gray;
        margin: 0;
        font-size: 14px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    }
    
    /* Estilos para el botón de cerrar sesión */
    .logout-button {
      width: 100%;
      margin-top: 16px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color: rgba($danger-color, 0.05);
      color: $danger-color;
      border: 1px solid rgba($danger-color, 0.2);
      border-radius: $border-radius;
      padding: 8px 16px;
      transition: all 0.3s ease;
      
      &:hover {
        background-color: rgba($danger-color, 0.1);
      }
      
      mat-icon {
        margin-right: 8px;
      }
      
      span {
        font-weight: 500;
      }
    }
  }
}

/* Estilos para el contenido principal */
mat-sidenav-content {
  margin-left: $sidebar-width;
  
  .mat-toolbar {
    position: fixed;
    top: 0;
    right: 0;
    left: $sidebar-width;
    z-index: 2;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.12);
    
    .clinic-name {
      margin-left: 16px;
      font-weight: 500;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      max-width: 40%;
    }
    
    .user-toolbar-info {
      display: flex;
      align-items: center;
      
      .username {
        margin-right: 8px;
        font-weight: 500;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        max-width: 200px;
      }
    }
  }
  
  .main-content {
    padding: 24px;
    margin-top: $toolbar-height;
    min-height: calc(100vh - #{$toolbar-height});
    background-color: $light-gray;
    overflow-x: auto;
  }
}

/* Utilidades */
.spacer {
  flex: 1 1 auto;
}

/* Media queries para responsive */
@media screen and (max-width: 1200px) {
  /* Mantener como solicitado */
}

/* Estilos específicos para tablas */
table {
  width: 100%;
  border-collapse: collapse;
  background-color: white;
  border-radius: $border-radius;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  
  th, td {
    padding: 12px 16px;
    text-align: left;
    border-bottom: 1px solid $medium-gray;
  }
  
  th {
    background-color: rgba($primary-color, 0.05);
    font-weight: 500;
    color: $primary-color;
  }
  
  tr:last-child td {
    border-bottom: none;
  }
  
  tr:hover {
    background-color: rgba($primary-color, 0.03);
  }
}import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { SidebarService } from '../sidebar.service';
import { AuthService } from '../../auth/services/auth.service';

interface MenuItem {
  label: string;
  icon?: string;
  url: string;
  category?: string;
}

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent implements OnInit {
  
  // Menú agrupado por categorías
  groupedMenu: { [key: string]: MenuItem[] } = {};

  constructor(
    private router: Router,
    public sidebarService: SidebarService,
    public authService: AuthService
  ) {}
  
  ngOnInit(): void {
    // Agrupar menú por categorías cuando se cargue el componente
    this.groupMenuItems();
    
    // Verificar estado de autenticación
    this.checkAuthState();
  }
  
  /**
   * Agrupa los elementos del menú por categoría
   */
  groupMenuItems(): void {
    this.groupedMenu = {};
    
    // Procesar elementos del menú y agruparlos por categoría
    this.sidebarService.menu.forEach((item: MenuItem) => {
      const category = item.category || 'General';
      
      if (!this.groupedMenu[category]) {
        this.groupedMenu[category] = [];
      }
      
      this.groupedMenu[category].push(item);
    });
  }
  
  /**
   * Verifica el estado de autenticación usando el servicio
   */
  checkAuthState(): void {
    this.authService.validarToken().subscribe(
      valid => {
        if (!valid) {
          this.router.navigate(['/auth']);
        }
      }
    );
  }
  
  /**
   * Maneja el cierre de sesión
   */
  onLogout(): void {
    this.authService.logout();
    this.router.navigate(['/auth']);
  }
}<!-- paginator.component.html -->
<div class="paginator">
    <button class="btn btn-secondary" (click)="changePage(-pageSize)">Anteriores</button>
    <span>
      Página: {{ (offset / pageSize) + 1 }} de {{ totalItems ? Math.ceil(totalItems / pageSize) : 1 }}
    </span>
    <button class="btn btn-secondary" (click)="changePage(pageSize)">Siguiente</button>
  </div>
  
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PaginatorComponent } from './paginator.component';

describe('PaginatorComponent', () => {
  let component: PaginatorComponent;
  let fixture: ComponentFixture<PaginatorComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [PaginatorComponent]
    });
    fixture = TestBed.createComponent(PaginatorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// paginator.component.ts
import { Component, EventEmitter, Input, Output } from '@angular/core';

@Component({
  selector: 'app-paginator',
  templateUrl: './paginator.component.html',
  styleUrls: ['./paginator.component.scss']
})
export class PaginatorComponent {
  @Input() totalItems: number = 0;
  @Input() offset: number = 0;
  @Input() pageSize: number = 5;

  @Output() offsetChange: EventEmitter<number> = new EventEmitter<number>();

  // Agrega esta línea para exponer Math en el template:
  public Math = Math;

  changePage(delta: number): void {
    let newOffset = this.offset + delta;

    if (newOffset < 0) {
      newOffset = 0;
    } else if (newOffset >= this.totalItems) {
      newOffset = this.offset;
    }

    if (newOffset !== this.offset) {
      this.offset = newOffset;
      this.offsetChange.emit(this.offset);
    }
  }
}
/* paginator.component.scss */
.paginator {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
  }
  <!-- paginator.component.html -->
<div class="paginator">
    <button class="btn btn-secondary" (click)="changePage(-pageSize)">Anteriores</button>
    <span>
      Página: {{ (offset / pageSize) + 1 }} de {{ totalItems ? Math.ceil(totalItems / pageSize) : 1 }}
    </span>
    <button class="btn btn-secondary" (click)="changePage(pageSize)">Siguiente</button>
  </div>
  
/* paginator.component.scss */
.paginator {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1rem;
  }
  import { ComponentFixture, TestBed } from '@angular/core/testing';

import { PaginatorComponent } from './paginator.component';

describe('PaginatorComponent', () => {
  let component: PaginatorComponent;
  let fixture: ComponentFixture<PaginatorComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [PaginatorComponent]
    });
    fixture = TestBed.createComponent(PaginatorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
// paginator.component.ts
import { Component, EventEmitter, Input, Output } from '@angular/core';

@Component({
  selector: 'app-paginator',
  templateUrl: './paginator.component.html',
  styleUrls: ['./paginator.component.scss']
})
export class PaginatorComponent {
  @Input() totalItems: number = 0;
  @Input() offset: number = 0;
  @Input() pageSize: number = 5;

  @Output() offsetChange: EventEmitter<number> = new EventEmitter<number>();

  // Agrega esta línea para exponer Math en el template:
  public Math = Math;

  changePage(delta: number): void {
    let newOffset = this.offset + delta;

    if (newOffset < 0) {
      newOffset = 0;
    } else if (newOffset >= this.totalItems) {
      newOffset = this.offset;
    }

    if (newOffset !== this.offset) {
      this.offset = newOffset;
      this.offsetChange.emit(this.offset);
    }
  }
}
// src/app/shared/validators/password-strength-validator.ts
import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';

export function passwordStrengthValidator(): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const value = control.value;
    if (!value) {
      return null;
    }
    const hasUpperCase = /[A-Z]+/.test(value);
    const hasNumeric = /[0-9]+/.test(value);
    const hasSpecialChar = /[.,'!@#$%^&*()_+-]+/.test(value);
    const passwordValid = hasUpperCase && hasNumeric && hasSpecialChar;
    return !passwordValid ? { passwordStrength: true } : null;
  };
}
// src/app/shared/validators/phone-validator.ts
import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';

export function phoneValidator(): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const value = control.value;
    const telefonoRegex = /^\+56 9 \d{4}-\d{4}$/;
    return telefonoRegex.test(value) ? null : { telefonoInvalido: true };
  };
}
// src/app/shared/validators/rut-validator.ts
import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';

export function rutValidator(): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const value: string = control.value;
    if (!value) {
   
      return null;
    }

    // Remover puntos y guiones
    const cleanValue = value.replace(/[.-]/g, '');
    if (cleanValue.length < 2) {
      return { rutInvalid: true };
    }
    
    const body = cleanValue.slice(0, -1);
    const dv = cleanValue.slice(-1).toUpperCase();

    // Verificar que el cuerpo sea numérico
    if (!/^\d+$/.test(body)) {
      return { rutInvalid: true };
    }

    let sum = 0;
    let multiplier = 2;

    // Calcular el dígito verificador
    for (let i = body.length - 1; i >= 0; i--) {
      sum += parseInt(body.charAt(i), 10) * multiplier;
      multiplier = multiplier < 7 ? multiplier + 1 : 2;
    }
    const dvCalculated = 11 - (sum % 11);
    const dvExpected =
      dvCalculated === 11 ? '0' :
      dvCalculated === 10 ? 'K' : dvCalculated.toString();

    return dvExpected === dv ? null : { rutInvalid: true };
  };
}
